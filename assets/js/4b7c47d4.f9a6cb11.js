"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["17045"],{63730:function(e,n,i){i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var s=i(61210),o=i(74848),t=i(84429);let r={title:"Ariadne Codegen 0.5"},a,d={authorsImageUrls:[]},c=[{value:"Disabling SSL verification for remote schemas",id:"disabling-ssl-verification-for-remote-schemas",level:2},{value:"Support for custom names of operation types",id:"support-for-custom-names-of-operation-types",level:2},{value:"Generating Python declarations for GraphQL schemas",id:"generating-python-declarations-for-graphql-schemas",level:2},{value:"Unlocked dependencies used in development",id:"unlocked-dependencies-used-in-development",level:2},{value:"Changelog",id:"changelog",level:2}];function l(e){let n={a:"a",code:"code",h2:"h2",li:"li",p:"p",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Ariadne Codegen 0.5 is now available!"}),"\n",(0,o.jsxs)(n.p,{children:["This release brings multiple bunch of new options and improvements to the ",(0,o.jsx)(n.code,{children:"ariande-codegen"})," command."]}),"\n",(0,o.jsx)(n.h2,{id:"disabling-ssl-verification-for-remote-schemas",children:"Disabling SSL verification for remote schemas"}),"\n",(0,o.jsxs)(n.p,{children:["New ",(0,o.jsx)(n.code,{children:"remote_schema_verify_ssl"})," option can now be used to control SSL certificate verification during the remote schema download."]}),"\n",(0,o.jsx)(n.p,{children:"This option is enabled by default and should only be disabled with good reasons, like when you are running calls over the internal network that uses self-signed certificates."}),"\n",(0,o.jsx)(n.h2,{id:"support-for-custom-names-of-operation-types",children:"Support for custom names of operation types"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"ariadne-codegen"})," previously assumed that root types in GraphQL schema are always named ",(0,o.jsx)(n.code,{children:"Query"})," and ",(0,o.jsx)(n.code,{children:"Mutation"}),", but we were informed that this is not always the case as for example ",(0,o.jsx)(n.a,{href:"https://hasura.io/",children:"Hasura"})," defaults to ",(0,o.jsx)(n.code,{children:"query_root"})," and ",(0,o.jsx)(n.code,{children:"mutation_root"})," instead."]}),"\n",(0,o.jsxs)(n.p,{children:["Starting with 0.5 release operation roots are instead resolved from ",(0,o.jsx)(n.code,{children:"Schema"})," types's ",(0,o.jsx)(n.code,{children:"query"})," and ",(0,o.jsx)(n.code,{children:"mutation"})," fields."]}),"\n",(0,o.jsx)(n.h2,{id:"generating-python-declarations-for-graphql-schemas",children:"Generating Python declarations for GraphQL schemas"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"ariadne-codegen"})," has new ",(0,o.jsx)(n.code,{children:"graphqlschema"})," mode which generates a Python file containing complete declaration of GraphQL schema as ",(0,o.jsx)(n.code,{children:"graphql.GraphQLSchema"})," instance."]}),"\n",(0,o.jsxs)(n.p,{children:["This schema can be further converted into a string using the ",(0,o.jsx)(n.code,{children:"graphql.print_schema"})," utility."]}),"\n",(0,o.jsx)(n.h2,{id:"unlocked-dependencies-used-in-development",children:"Unlocked dependencies used in development"}),"\n",(0,o.jsxs)(n.p,{children:["Versions of ",(0,o.jsx)(n.code,{children:"black"}),", ",(0,o.jsx)(n.code,{children:"isort"}),", ",(0,o.jsx)(n.code,{children:"autoflake"})," and other dependencies used by code generation logic as final processing step were previously pinned, forcing projects that used ",(0,o.jsx)(n.code,{children:"ariadne-codegen"})," as their dependency to pin those themselves."]}),"\n",(0,o.jsxs)(n.p,{children:["We've unpinned those packages versions in ",(0,o.jsx)(n.code,{children:"ariadne-codegen"}),", assuming that its better for project owners do use ",(0,o.jsx)(n.code,{children:"ariadne-codegen"})," version used by them compatible with their dev deps than for us to force them into specific versions."]}),"\n",(0,o.jsx)(n.h2,{id:"changelog",children:"Changelog"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Added generation of GraphQL schema's Python representation."}),"\n",(0,o.jsx)(n.li,{children:"Fixed annotations for lists."}),"\n",(0,o.jsx)(n.li,{children:"Fixed support of custom operation types names."}),"\n",(0,o.jsx)(n.li,{children:"Unlocked versions of black, isort, autoflake and dev dependencies"}),"\n",(0,o.jsxs)(n.li,{children:["Added ",(0,o.jsx)(n.code,{children:"remote_schema_verify_ssl"})," option."]}),"\n",(0,o.jsx)(n.li,{children:"Changed how default values for inputs are generated to handle potential cycles."}),"\n",(0,o.jsxs)(n.li,{children:["Fixed ",(0,o.jsx)(n.code,{children:"BaseModel"})," incorrectly calling ",(0,o.jsx)(n.code,{children:"parse"})," and ",(0,o.jsx)(n.code,{children:"serialize"})," methods on entire list instead of its items for ",(0,o.jsx)(n.code,{children:"List[Scalar]"}),"."]}),"\n"]})]})}function h(e={}){let{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},84429:function(e,n,i){i.d(n,{R:()=>r,x:()=>a});var s=i(96540);let o={},t=s.createContext(o);function r(e){let n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(t.Provider,{value:n},e.children)}},61210:function(e){e.exports=JSON.parse('{"permalink":"/blog/2023/04/05/ariadne-codegen-0-5","source":"@site/blog/2023-04-05-ariadne-codegen-0-5.md","title":"Ariadne Codegen 0.5","description":"Ariadne Codegen 0.5 is now available!","date":"2023-04-05T00:00:00.000Z","tags":[],"readingTime":1.56,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne Codegen 0.5"},"unlisted":false,"prevItem":{"title":"Ariadne Codegen 0.6","permalink":"/blog/2023/04/18/ariadne-codegen-0-6"},"nextItem":{"title":"Ariadne 0.19.1","permalink":"/blog/2023/03/28/ariadne-0-19-1"}}')}}]);