"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["53270"],{74481:function(e,n,t){t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var i=t(60868),s=t(74848),d=t(84429);let a={title:"Ariadne Codegen 0.10"},r,o={authorsImageUrls:[]},l=[{value:"Converting capitalized names and digits to snake case (breaking change)",id:"converting-capitalized-names-and-digits-to-snake-case-breaking-change",level:2},{value:"Open Telemetry tracing",id:"open-telemetry-tracing",level:2},{value:"Included comments",id:"included-comments",level:2},{value:"<code>ExtractOperationsPlugin</code>",id:"extractoperationsplugin",level:2},{value:"Overloading arguments per call",id:"overloading-arguments-per-call",level:2},{value:"Escaping enum values which are Python keywords",id:"escaping-enum-values-which-are-python-keywords",level:2},{value:"Adding <code>__typename</code> to all models generated from unions and interfaces",id:"adding-__typename-to-all-models-generated-from-unions-and-interfaces",level:2},{value:"Nullable fields with nullable directives",id:"nullable-fields-with-nullable-directives",level:2},{value:"Ignored <code>enums_module_name</code>",id:"ignored-enums_module_name",level:2},{value:"Changelog",id:"changelog",level:2}];function c(e){let n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Ariadne Codegen 0.10 has been released!"}),"\n",(0,s.jsxs)(n.p,{children:["This release improves the snake case conversion of operation names, adds opt-in support for Open Telemetry tracing, introduces the ",(0,s.jsx)(n.code,{children:"ExtractOperationsPlugin"})," plugin, adds Python 3.12 to the supported versions, and brings other features and fixes."]}),"\n",(0,s.jsx)(n.h2,{id:"converting-capitalized-names-and-digits-to-snake-case-breaking-change",children:"Converting capitalized names and digits to snake case (breaking change)"}),"\n",(0,s.jsxs)(n.p,{children:["Codegen converts given operation name to snake case. Result will later be used as name of a file containing generated models for operation, optionally (if ",(0,s.jsx)(n.code,{children:"convert_to_snake_case"})," is set to ",(0,s.jsx)(n.code,{children:"true"}),") also as client's method name. This release introduces changes to how numbers and capitalised names are handled in the conversion process, e.g:"]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"operation name"}),(0,s.jsx)(n.th,{children:"old snake case"}),(0,s.jsx)(n.th,{children:"new snake case"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"name"}),(0,s.jsx)(n.td,{children:"name"}),(0,s.jsx)(n.td,{children:"name"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"operationName"}),(0,s.jsx)(n.td,{children:"operation_name"}),(0,s.jsx)(n.td,{children:"operation_name"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"operationNAME"}),(0,s.jsx)(n.td,{children:"operation_n_a_m_e"}),(0,s.jsx)(n.td,{children:"operation_name"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"OPERATIONName"}),(0,s.jsx)(n.td,{children:"o_p_e_r_a_t_i_o_n_name"}),(0,s.jsx)(n.td,{children:"operation_name"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"operationName123"}),(0,s.jsx)(n.td,{children:"operation_name123"}),(0,s.jsx)(n.td,{children:"operation_name_123"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"operationNAME123"}),(0,s.jsx)(n.td,{children:"operation_n_a_m_e123"}),(0,s.jsx)(n.td,{children:"operation_name_123"})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"This is potentially a breaking change and may require changes in code using generated client."}),"\n",(0,s.jsx)(n.h2,{id:"open-telemetry-tracing",children:"Open Telemetry tracing"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"0.10"})," ships with two additional base clients that support the Open Telemetry tracing. When the ",(0,s.jsx)(n.code,{children:"opentelemetry_client"})," configuration option is set to ",(0,s.jsx)(n.code,{children:"true"}),", the default included base client is replaced with one that implements the opt-in Open Telemetry support - ",(0,s.jsx)(n.code,{children:"BaseClientOpenTelemetry"}),"/",(0,s.jsx)(n.code,{children:"AsyncBaseClientOpenTelemetry"}),". By default this support does nothing, but if the ",(0,s.jsx)(n.code,{children:"opentelemetry-api"})," package is installed and the ",(0,s.jsx)(n.code,{children:"tracer"})," argument is provided, then the client will create spans with data about requests made."]}),"\n",(0,s.jsxs)(n.p,{children:["Tracing arguments accepted by ",(0,s.jsx)(n.code,{children:"BaseClientOpenTelemetry"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tracer"}),": ",(0,s.jsx)(n.code,{children:"Optional[Union[str, Tracer]] = None"})," - tracer object or name to pass to the ",(0,s.jsx)(n.code,{children:"get_tracer"})," method"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"root_context"}),": ",(0,s.jsx)(n.code,{children:"Optional[Context] = None"})," - optional context added to the root span"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"root_span_name"}),": ",(0,s.jsx)(n.code,{children:'str = "GraphQL Operation"'})," - name of the root span"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"AsyncBaseClientOpenTelemetry"})," supports the same arguments as ",(0,s.jsx)(n.code,{children:"BaseClientOpenTelemetry"}),", but also accepts additional arguments regarding websockets:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ws_root_context"}),": ",(0,s.jsx)(n.code,{children:"Optional[Context] = None"})," - optional context added to root span for websocket connection"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ws_root_span_name"}),": ",(0,s.jsx)(n.code,{children:'str = "GraphQL Subscription"'})," - name of root span for websocket connection"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"included-comments",children:"Included comments"}),"\n",(0,s.jsxs)(n.p,{children:["In ",(0,s.jsx)(n.code,{children:"0.10"})," we changed the ",(0,s.jsx)(n.code,{children:"include_comments"})," option to allow selection of the style of comments to be included at the top of each generated file. Available options:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"timestamp"'})," - comment with generation timestamp"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"stable"'})," - comment with message that this is a generated file (new default)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"none"'})," - no comments"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Previous boolean support is deprecated and will be dropped in future releases, but for now ",(0,s.jsx)(n.code,{children:"false"})," is mapped to ",(0,s.jsx)(n.code,{children:'"none"'})," and ",(0,s.jsx)(n.code,{children:"true"})," to ",(0,s.jsx)(n.code,{children:'"timestamp"'}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"extractoperationsplugin",children:(0,s.jsx)(n.code,{children:"ExtractOperationsPlugin"})}),"\n",(0,s.jsxs)(n.p,{children:["Version ",(0,s.jsx)(n.code,{children:"0.10"})," adds ",(0,s.jsx)(n.code,{children:"ExtractOperationsPlugin"})," to the ",(0,s.jsx)(n.code,{children:"ariadne_codegen.contrib"})," package. It moves query strings from the generated client's methods into a separate ",(0,s.jsx)(n.code,{children:"operations.py"})," module and changes the generated client to import these definitions instead. The generated module name can be customized by adding ",(0,s.jsx)(n.code,{children:'operations_module_name="custom_name"'})," to the ",(0,s.jsx)(n.code,{children:"[tool.ariadne-codegen.operations]"})," section in config. E.g:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gql",children:"# queries.graphql\nquery getName {\n  name\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"pyproject.toml"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'[tool.ariadne-codegen]\n...\nqueries_path = "..../queries.graphql"\nplugins = ["ariadne_codegen.contrib.extract_operations.ExtractOperationsPlugin"]\n\n[tool.ariadne-codegen.extract_operations]\noperations_module_name = "custom_operations"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Using the above configuration will result in the ",(0,s.jsx)(n.code,{children:"custom_operations.py"})," being generated with following contents:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'__all__ = ["GET_NAME"]\n\nGET_NAME = """\nquery getName {\n  name\n}\n"""\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The generated client imports ",(0,s.jsx)(n.code,{children:"GET_NAME"})," and uses it instead of defining it's own operation string:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from .custom_operations import GET_NAME\nfrom .get_name import GetName\n\n\ndef gql(q: str) -> str:\n    return q\n\n\nclass Client(AsyncBaseClient):\n    async def get_name(self, **kwargs: Any) -> GetName:\n        variables: Dict[str, object] = {}\n        response = await self.execute(query=GET_NAME, variables=variables, **kwargs)\n        data = self.get_data(response)\n        return GetName.model_validate(data)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"overloading-arguments-per-call",children:"Overloading arguments per call"}),"\n",(0,s.jsxs)(n.p,{children:["Each generated client's method now accepts ",(0,s.jsx)(n.code,{children:"**kwargs"})," and passes them to the ",(0,s.jsx)(n.code,{children:"http_client.post"}),"/",(0,s.jsx)(n.code,{children:"ws_connect"})," call made in the base client."]}),"\n",(0,s.jsx)(n.h2,{id:"escaping-enum-values-which-are-python-keywords",children:"Escaping enum values which are Python keywords"}),"\n",(0,s.jsxs)(n.p,{children:["GraphQL enum values that are Python reserved keywords will now be suffixed with ",(0,s.jsx)(n.code,{children:"_"})," in generated code, just like this is the case with generated field names for models, e.g:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gql",children:"enum CustomEnum {\n  valid\n  import\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# enums.py\nfrom enum import Enum\n\n\nclass CustomEnum(str, Enum):\n    valid = "valid"\n    import_ = "import"\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"adding-__typename-to-all-models-generated-from-unions-and-interfaces",children:["Adding ",(0,s.jsx)(n.code,{children:"__typename"})," to all models generated from unions and interfaces"]}),"\n",(0,s.jsxs)(n.p,{children:["In previous versions, models created from single-member unions or from interfaces that were queried without inline fragments didn't have a ",(0,s.jsx)(n.code,{children:"__typename"})," field added. Now ",(0,s.jsx)(n.code,{children:"0.10"})," includes this special field in all models generated from abstract types."]}),"\n",(0,s.jsx)(n.h2,{id:"nullable-fields-with-nullable-directives",children:"Nullable fields with nullable directives"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"0.10"})," fixes behaviour when the default ",(0,s.jsx)(n.code,{children:"None"})," was not added to a nullable field with a ",(0,s.jsx)(n.code,{children:"@skip"}),"/",(0,s.jsx)(n.code,{children:"@include"})," directive."]}),"\n",(0,s.jsxs)(n.h2,{id:"ignored-enums_module_name",children:["Ignored ",(0,s.jsx)(n.code,{children:"enums_module_name"})]}),"\n",(0,s.jsxs)(n.p,{children:["Codegen now correctly reads ",(0,s.jsx)(n.code,{children:"enums_module_name"})," and uses its value instead of always generating ",(0,s.jsx)(n.code,{children:"enums.py"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"changelog",children:"Changelog"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Fixed generating results for nullable fields with nullable directives."}),"\n",(0,s.jsxs)(n.li,{children:["Changed ",(0,s.jsx)(n.code,{children:"include_comments"})," option to accept enum value, changed default to ",(0,s.jsx)(n.code,{children:'"stable"'}),", deprecated boolean support. Added ",(0,s.jsx)(n.code,{children:"get_file_comment"})," plugin hook."]}),"\n",(0,s.jsxs)(n.li,{children:["Changed ",(0,s.jsx)(n.code,{children:"str_to_snake_case"})," utility to correctly handle capitalized words."]}),"\n",(0,s.jsx)(n.li,{children:"Digits in Python names are now preceded by an underscore (breaking change)."}),"\n",(0,s.jsxs)(n.li,{children:["Fixed parsing of unions and interfaces to always add ",(0,s.jsx)(n.code,{children:"__typename"})," to generated result models."]}),"\n",(0,s.jsxs)(n.li,{children:["Added escaping of enum values which are Python keywords by appending ",(0,s.jsx)(n.code,{children:"_"})," to them."]}),"\n",(0,s.jsxs)(n.li,{children:["Fixed ",(0,s.jsx)(n.code,{children:"enums_module_name"})," option not being passed to generators."]}),"\n",(0,s.jsxs)(n.li,{children:["Added additional base clients supporting the Open Telemetry tracing. Added ",(0,s.jsx)(n.code,{children:"opentelemetry_client"})," config option."]}),"\n",(0,s.jsxs)(n.li,{children:["Changed generated client's methods to pass ",(0,s.jsx)(n.code,{children:"**kwargs"})," to base client's ",(0,s.jsx)(n.code,{children:"execute"})," and ",(0,s.jsx)(n.code,{children:"execute_ws"})," methods (breaking change for custom base clients)."]}),"\n",(0,s.jsxs)(n.li,{children:["Added ",(0,s.jsx)(n.code,{children:"operation_definition"})," argument to ",(0,s.jsx)(n.code,{children:"generate_client_method"})," plugin hook."]}),"\n",(0,s.jsxs)(n.li,{children:["Added ",(0,s.jsx)(n.code,{children:"ExtractOperationsPlugin"})," that extracts operation strings from client methods to separate module."]}),"\n",(0,s.jsx)(n.li,{children:"Added Python 3.12 to tested versions."}),"\n"]})]})}function h(e={}){let{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},84429:function(e,n,t){t.d(n,{R:()=>a,x:()=>r});var i=t(96540);let s={},d=i.createContext(s);function a(e){let n=i.useContext(d);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(d.Provider,{value:n},e.children)}},60868:function(e){e.exports=JSON.parse('{"permalink":"/blog/2023/11/15/ariadne-codegen-0-10","source":"@site/blog/2023-11-15-ariadne-codegen-0-10.md","title":"Ariadne Codegen 0.10","description":"Ariadne Codegen 0.10 has been released!","date":"2023-11-15T00:00:00.000Z","tags":[],"readingTime":4.14,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne Codegen 0.10"},"unlisted":false,"prevItem":{"title":"Ariadne Codegen 0.11","permalink":"/blog/2023/12/05/ariadne-codegen-0-11"},"nextItem":{"title":"Ariadne 0.21","permalink":"/blog/2023/11/08/ariadne-0-21-0"}}')}}]);