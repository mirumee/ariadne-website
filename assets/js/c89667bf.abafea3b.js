"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["63423"],{68215:function(e,r,s){s.r(r),s.d(r,{frontMatter:()=>a,toc:()=>c,default:()=>h,metadata:()=>n,assets:()=>l,contentTitle:()=>o});var n=JSON.parse('{"id":"other-integrations","title":"Other technologies","description":"Ariadne can be used to add GraphQL server to projects developed using any web framework that supports JSON responses.","source":"@site/server_versioned_docs/version-0.5.0/other-integrations.md","sourceDirName":".","slug":"/other-integrations","permalink":"/server/0.5.0/other-integrations","draft":false,"unlisted":false,"tags":[],"version":"0.5.0","frontMatter":{"id":"other-integrations","title":"Other technologies"},"sidebar":"tutorialSidebar","previous":{"title":"Starlette","permalink":"/server/0.5.0/starlette-integration"},"next":{"title":"ariadne","permalink":"/server/0.5.0/api-reference"}}'),t=s(74848),i=s(84429);let a={id:"other-integrations",title:"Other technologies"},o,l={},c=[{value:"Asynchronous servers",id:"asynchronous-servers",level:2},{value:"File uploads",id:"file-uploads",level:2}];function d(e){let r={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.p,{children:"Ariadne can be used to add GraphQL server to projects developed using any web framework that supports JSON responses."}),"\n",(0,t.jsx)(r.p,{children:"Implementation details differ between frameworks, but same steps apply for most of them:"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:["Use ",(0,t.jsx)(r.a,{href:"/server/0.5.0/api-reference#make_executable_schema",children:(0,t.jsx)(r.code,{children:"make_executable_schema"})})," to create executable schema instance."]}),"\n",(0,t.jsxs)(r.li,{children:["Create view, route or controller (semantics vary between frameworks) that accepts ",(0,t.jsx)(r.code,{children:"GET"})," and ",(0,t.jsx)(r.code,{children:"POST"})," requests."]}),"\n",(0,t.jsxs)(r.li,{children:["If request was made with ",(0,t.jsx)(r.code,{children:"GET"})," method, return response containing GraphQL Playground's HTML."]}),"\n",(0,t.jsxs)(r.li,{children:["If request was made with ",(0,t.jsx)(r.code,{children:"POST"}),", disable any CSRF checks, test that its content type is ",(0,t.jsx)(r.code,{children:"application/json"})," then parse its content as JSON. Return ",(0,t.jsx)(r.code,{children:"400 BAD REQUEST"})," if this fails."]}),"\n",(0,t.jsxs)(r.li,{children:["Call ",(0,t.jsx)(r.a,{href:"/server/0.5.0/api-reference#graphql_sync",children:(0,t.jsx)(r.code,{children:"graphql_sync"})})," with schema, parsed JSON and any other options that are fit for your implementation."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.a,{href:"/server/0.5.0/api-reference#graphql_sync",children:(0,t.jsx)(r.code,{children:"graphql_sync"})})," returns tuple that has two values: ",(0,t.jsx)(r.code,{children:"boolean"})," and ",(0,t.jsx)(r.code,{children:"dict"}),". Use dict as data for JSON response, and boolean for status code. If boolean is ",(0,t.jsx)(r.code,{children:"true"}),", set response's status code to ",(0,t.jsx)(r.code,{children:"200"}),", otherwise it should be ",(0,t.jsx)(r.code,{children:"400"})]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:["See the ",(0,t.jsx)(r.a,{href:"/server/0.5.0/flask-integration",children:"Flask integration"})," for implementation of this algorithm using Flask framework."]}),"\n",(0,t.jsx)(r.h2,{id:"asynchronous-servers",children:"Asynchronous servers"}),"\n",(0,t.jsxs)(r.p,{children:["If your server stack supports ASGI, you can use ",(0,t.jsx)(r.a,{href:"/server/0.5.0/api-reference#graphql",children:(0,t.jsx)(r.code,{children:"graphql"})})," to execute GraphQL queries asynchronously and ",(0,t.jsx)(r.a,{href:"/server/0.5.0/api-reference#subscribe",children:(0,t.jsx)(r.code,{children:"subscribe"})})," for websocket connections initialized by subscriptions."]}),"\n",(0,t.jsx)(r.h2,{id:"file-uploads",children:"File uploads"}),"\n",(0,t.jsxs)(r.p,{children:["To support file uploads, your ",(0,t.jsx)(r.code,{children:"POST"})," method implementation will need to be extended to allow the ",(0,t.jsxs)(r.a,{href:"https://github.com/jaydenseric/graphql-multipart-request-spec",children:[(0,t.jsx)(r.code,{children:"multipart/form-data"})," requests"]}),", following algorithm supplied below:"]}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:["Parse JSON stored in ",(0,t.jsx)(r.code,{children:"operations"})," and ",(0,t.jsx)(r.code,{children:"map"})," value of HTTP request. Return response with ",(0,t.jsx)(r.code,{children:"400"})," status code if parsing of those values fails."]}),"\n",(0,t.jsxs)(r.li,{children:["Create ",(0,t.jsx)(r.code,{children:"dict"})," (or any Python object that implements ",(0,t.jsx)(r.code,{children:"__getitem__"}),") that contains remaining query's values. If possible, filter off items that aren't an uploaded file."]}),"\n",(0,t.jsxs)(r.li,{children:["Call ",(0,t.jsx)(r.a,{href:"/server/0.5.0/api-reference#combine_multipart_data",children:(0,t.jsx)(r.code,{children:"combine_multipart_data"})})," with ",(0,t.jsx)(r.code,{children:"operations"}),", ",(0,t.jsx)(r.code,{children:"map"})," and data structure from step 2 as its values."]}),"\n",(0,t.jsxs)(r.li,{children:["Call ",(0,t.jsx)(r.a,{href:"/server/0.5.0/api-reference#graphql",children:(0,t.jsx)(r.code,{children:"graphql"})})," or ",(0,t.jsx)(r.a,{href:"/server/0.5.0/api-reference#graphql_sync",children:(0,t.jsx)(r.code,{children:"graphql_sync"})})," with value returned by ",(0,t.jsx)(r.code,{children:"combine_multipart_data"}),"."]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"Rest of the algorithm is same as in regular queries."})]})}function h(e={}){let{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},84429:function(e,r,s){s.d(r,{R:()=>a,x:()=>o});var n=s(96540);let t={},i=n.createContext(t);function a(e){let r=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);