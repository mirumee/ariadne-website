<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="rss.xsl"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Ariadne · Python GraphQL Schema-first Blog</title>
        <link>https://ariadnegraphql.org/blog</link>
        <description>Ariadne · Python GraphQL Schema-first Blog</description>
        <lastBuildDate>Thu, 19 Dec 2024 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Ariadne 0.24]]></title>
            <link>https://ariadnegraphql.org/blog/2024/12/19/ariadne-0-24</link>
            <guid>https://ariadnegraphql.org/blog/2024/12/19/ariadne-0-24</guid>
            <pubDate>Thu, 19 Dec 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Ariadne 0.24 is now available.]]></description>
            <content:encoded><![CDATA[<p>Ariadne 0.24 is now available.</p>
<p>Ariadne 0.24 is a maintenance release that implements improvements and fixes to reported issues.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="added-validation-for-directive-declarations-in-make_executable_schema-to-prevent-schema-creation-with-undeclared-directives">Added validation for directive declarations in <code>make_executable_schema</code> to prevent schema creation with undeclared directives<a href="https://ariadnegraphql.org/blog/2024/12/19/ariadne-0-24#added-validation-for-directive-declarations-in-make_executable_schema-to-prevent-schema-creation-with-undeclared-directives" class="hash-link" aria-label="Direct link to added-validation-for-directive-declarations-in-make_executable_schema-to-prevent-schema-creation-with-undeclared-directives" title="Direct link to added-validation-for-directive-declarations-in-make_executable_schema-to-prevent-schema-creation-with-undeclared-directives">​</a></h2>
<p><code>SchemaDirectiveVisitor</code> that <code>make_executable_schema</code> uses for GraphQL directives will now raise the <code>ValueError</code> if directive is not declared in the GraphQL schema.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="added-include_cookies-option-to-the-explorerapollo">Added <code>include_cookies</code> option to the <code>ExplorerApollo</code><a href="https://ariadnegraphql.org/blog/2024/12/19/ariadne-0-24#added-include_cookies-option-to-the-explorerapollo" class="hash-link" aria-label="Direct link to added-include_cookies-option-to-the-explorerapollo" title="Direct link to added-include_cookies-option-to-the-explorerapollo">​</a></h2>
<p>Apollo Explorer's <code>includeCookies</code> option can now be enabled in Ariadne via the <code>include_cookies</code> kwarg.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="added-share_enabled-param-to-explorerplayground-to-enable-share-playground-feature">Added <code>share_enabled</code> param to <code>ExplorerPlayground</code> to enable share playground feature<a href="https://ariadnegraphql.org/blog/2024/12/19/ariadne-0-24#added-share_enabled-param-to-explorerplayground-to-enable-share-playground-feature" class="hash-link" aria-label="Direct link to added-share_enabled-param-to-explorerplayground-to-enable-share-playground-feature" title="Direct link to added-share_enabled-param-to-explorerplayground-to-enable-share-playground-feature">​</a></h2>
<p>GraphQL Playground's <code>shareEnabled</code> option can now be enabled in Ariadne via the <code>share_enabled</code> kwarg.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="added-support-for-nested-attribute-resolution-in-alias-resolvers">Added support for nested attribute resolution in alias resolvers<a href="https://ariadnegraphql.org/blog/2024/12/19/ariadne-0-24#added-support-for-nested-attribute-resolution-in-alias-resolvers" class="hash-link" aria-label="Direct link to Added support for nested attribute resolution in alias resolvers" title="Direct link to Added support for nested attribute resolution in alias resolvers">​</a></h2>
<p>Ariadne's <code>resolve_to</code> utility now supports data structure traversal in created resolvers when <code>.</code> is used in the <code>attr_name</code> argument:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">resolver </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> resolve_to</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"attr.child_attr.deeper_child_attr"</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="replaced-regexes-in-the-apollo-federation-implementation-with-cleaner-approach-using-graphql-ast">Replaced regexes in the Apollo Federation implementation with cleaner approach using GraphQL AST<a href="https://ariadnegraphql.org/blog/2024/12/19/ariadne-0-24#replaced-regexes-in-the-apollo-federation-implementation-with-cleaner-approach-using-graphql-ast" class="hash-link" aria-label="Direct link to Replaced regexes in the Apollo Federation implementation with cleaner approach using GraphQL AST" title="Direct link to Replaced regexes in the Apollo Federation implementation with cleaner approach using GraphQL AST">​</a></h2>
<p>Ariadne used series of regexes to process GraphQL schemas used for Apollo Federation. This approach was prone to errors and edge cases.</p>
<p>In 0.24 this approach was replaced with new one that instead parses schema to AST.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="changelog">CHANGELOG<a href="https://ariadnegraphql.org/blog/2024/12/19/ariadne-0-24#changelog" class="hash-link" aria-label="Direct link to CHANGELOG" title="Direct link to CHANGELOG">​</a></h2>
<ul>
<li>Added validation for directive declarations in <code>make_executable_schema</code> to prevent schema creation with undeclared directives.</li>
<li>Replaced hardcoded HTTP statuses with <code>HTTPStatus</code> from the <code>http</code> stdlib module.</li>
<li>Added <code>include_cookies</code> option to the <code>ExplorerApollo</code>.</li>
<li>Fixed typing on <code>extract_data_from_request</code> method.</li>
<li>Fixed tests websockets after starlette update.</li>
<li>Added <code>share_enabled</code> param to <code>ExplorerPlayground</code> to enable share playground feature.</li>
<li>Added support for nested attribute resolution in alias resolvers.</li>
<li>Replaced regexes in the Apollo Federation implementation with cleaner approach using GraphQL AST.</li>
</ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Ariadne GraphQL Proxy 0.3]]></title>
            <link>https://ariadnegraphql.org/blog/2024/03/26/ariadne-graphql-proxy-0-3</link>
            <guid>https://ariadnegraphql.org/blog/2024/03/26/ariadne-graphql-proxy-0-3</guid>
            <pubDate>Tue, 26 Mar 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Ariadne GraphQL Proxy 0.3 is now available.]]></description>
            <content:encoded><![CDATA[<p>Ariadne GraphQL Proxy 0.3 is now available.</p>
<p>This release implements new features we found necessary for our use cases and fixes the issues we've found in testing.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="cache-serializers">Cache serializers<a href="https://ariadnegraphql.org/blog/2024/03/26/ariadne-graphql-proxy-0-3#cache-serializers" class="hash-link" aria-label="Direct link to Cache serializers" title="Direct link to Cache serializers">​</a></h2>
<p>Cache backends now support serializer customization for better control on how data is dehydrated and re-hydrated for selected cache store.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="fixed-schema-proxy-error-when-variable-in-operation-was-not-in-variables">Fixed schema proxy error when variable in operation was not in <code>variables</code><a href="https://ariadnegraphql.org/blog/2024/03/26/ariadne-graphql-proxy-0-3#fixed-schema-proxy-error-when-variable-in-operation-was-not-in-variables" class="hash-link" aria-label="Direct link to fixed-schema-proxy-error-when-variable-in-operation-was-not-in-variables" title="Direct link to fixed-schema-proxy-error-when-variable-in-operation-was-not-in-variables">​</a></h2>
<p>GraphQL supports optional variables. Those are variables which can be either <code>null</code> or are omitted from <code>variables</code>.</p>
<p>Previously, Ariadne GraphQL Proxy would crash with <code>KeyError</code> if optional variable was omitted from <code>variables</code>. This was fixed in 0.3 release.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="fixed-union-fields-support">Fixed <code>union</code> fields support<a href="https://ariadnegraphql.org/blog/2024/03/26/ariadne-graphql-proxy-0-3#fixed-union-fields-support" class="hash-link" aria-label="Direct link to fixed-union-fields-support" title="Direct link to fixed-union-fields-support">​</a></h2>
<p>Ariadne GraphQL Proxy would attempt to retrieve a list of fields for <code>union</code> type, crashing with a <code>KeyError</code>.</p>
<p>In 0.3 release GraphQL Proxy is aware of <code>union</code> types and implements a dedicated query splitting logic for fields returning them.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="custom-headers">Custom headers<a href="https://ariadnegraphql.org/blog/2024/03/26/ariadne-graphql-proxy-0-3#custom-headers" class="hash-link" aria-label="Direct link to Custom headers" title="Direct link to Custom headers">​</a></h2>
<p>Custom headers configuration was improved for both <code>ProxyResolver</code> and <code>ProxySchema</code>.</p>
<p>It is now possible to set default headers that should be included in requests made by the Proxy, enabling GraphQL access to APIs requiring auth for schema introspection.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="proxy-errors-and-extensions-from-upstream">Proxy errors and extensions from upstream.<a href="https://ariadnegraphql.org/blog/2024/03/26/ariadne-graphql-proxy-0-3#proxy-errors-and-extensions-from-upstream" class="hash-link" aria-label="Direct link to Proxy errors and extensions from upstream." title="Direct link to Proxy errors and extensions from upstream.">​</a></h2>
<p>For remote schemas it is now possible to enable proxying of GraphQL errors and extensions.</p>
<p>Because proxy mechanism uses the strategy pattern, it's also possible to customize how proxied data appears in a final JSON with query's result.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="fields-dependencies">Fields dependencies<a href="https://ariadnegraphql.org/blog/2024/03/26/ariadne-graphql-proxy-0-3#fields-dependencies" class="hash-link" aria-label="Direct link to Fields dependencies" title="Direct link to Fields dependencies">​</a></h2>
<p>Field's dependencies are additional fields that should be retrieved from the upstream GraphQL API when given field is requested.</p>
<p>This feature is useful when final schema includes new fields that should be resolved from other fields, which themselves shouldn't be included in the final schema.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="changelog">CHANGELOG<a href="https://ariadnegraphql.org/blog/2024/03/26/ariadne-graphql-proxy-0-3#changelog" class="hash-link" aria-label="Direct link to CHANGELOG" title="Direct link to CHANGELOG">​</a></h2>
<ul>
<li>Added <code>CacheSerializer</code>, <code>NoopCacheSerializer</code> and <code>JSONCacheSerializer</code>. Changed <code>CacheBackend</code>, <code>InMemoryCache</code>, <code>CloudflareCacheBackend</code> and <code>DynamoDBCacheBackend</code> to accept <code>serializer</code> initialization option.</li>
<li>Fixed schema proxy returning an error when variable defined in an operation is missing from its variables.</li>
<li>Fixed query <code>union</code> fields support.</li>
<li>Improved custom headers handling in <code>ProxyResolver</code> and <code>ProxySchema</code>.</li>
<li>Proxy errors and extensions from upstream.</li>
<li>Added fields dependencies configuration option to <code>ProxySchema</code>.</li>
</ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Ariadne 0.23]]></title>
            <link>https://ariadnegraphql.org/blog/2024/03/18/ariadne-0-23</link>
            <guid>https://ariadnegraphql.org/blog/2024/03/18/ariadne-0-23</guid>
            <pubDate>Mon, 18 Mar 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Ariadne 0.23 is now out.]]></description>
            <content:encoded><![CDATA[<p>Ariadne 0.23 is now out.</p>
<p>Ariadne 0.23 is a maintenance release that adds opt-in support for executing <code>query</code> operations over <code>GET</code> requests, bumps Apollo Federation support to 2.6 and addresses two small bugs.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="support-for-executing-queries-made-with-get-requests">Support for executing queries made with GET requests<a href="https://ariadnegraphql.org/blog/2024/03/18/ariadne-0-23#support-for-executing-queries-made-with-get-requests" class="hash-link" aria-label="Direct link to Support for executing queries made with GET requests" title="Direct link to Support for executing queries made with GET requests">​</a></h2>
<p>Ariadne 0.23 brings support for query execution made with GET HTTP requests. Only “query” type operations are executed, “mutation” and “subscription” operations will raise errors.</p>
<p>This is useful for clients retrieving data from the GraphQL API that could be cached over the HTTP using solutions like Varnish.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="added-support-for-the-apollo-federation-versions-up-to-26">Added support for the Apollo Federation versions up to 2.6<a href="https://ariadnegraphql.org/blog/2024/03/18/ariadne-0-23#added-support-for-the-apollo-federation-versions-up-to-26" class="hash-link" aria-label="Direct link to Added support for the Apollo Federation versions up to 2.6" title="Direct link to Added support for the Apollo Federation versions up to 2.6">​</a></h2>
<p>Our amazing community has contributed a patch for Ariadne that increases support for Apollo Federation up to version 2.6.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="fixed-deprecation-warnings-in-apollo-tracing-extension">Fixed deprecation warnings in Apollo Tracing extension<a href="https://ariadnegraphql.org/blog/2024/03/18/ariadne-0-23#fixed-deprecation-warnings-in-apollo-tracing-extension" class="hash-link" aria-label="Direct link to Fixed deprecation warnings in Apollo Tracing extension" title="Direct link to Fixed deprecation warnings in Apollo Tracing extension">​</a></h2>
<p>For those few who are using Apollo Tracing extension for utility of seeing resolvers execution time in response’s JSON payload, we have fixed the deprecation warnings.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="blocked-subscription-execution-in-post-requests">Blocked <code>subscription</code> execution in POST requests<a href="https://ariadnegraphql.org/blog/2024/03/18/ariadne-0-23#blocked-subscription-execution-in-post-requests" class="hash-link" aria-label="Direct link to blocked-subscription-execution-in-post-requests" title="Direct link to blocked-subscription-execution-in-post-requests">​</a></h2>
<p>It was possible to send a “subscription” operation to Ariadne over POST HTTP request, and the query executor would attempt to execute it, skipping the <code>source</code> call and thus producing an error in a resolver expecting some payload.</p>
<p>Ariadne 0.23 includes an extra validation step that raises a dedicated error when this is attempted.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="changelog">CHANGELOG<a href="https://ariadnegraphql.org/blog/2024/03/18/ariadne-0-23#changelog" class="hash-link" aria-label="Direct link to CHANGELOG" title="Direct link to CHANGELOG">​</a></h2>
<ul>
<li>Added <code>execute_get_queries</code> setting to the <code>GraphQL</code> apps that controls execution of the GraphQL "query" operations made with GET requests. Defaults to <code>False</code>.</li>
<li>Added support for the Apollo Federation versions up to 2.6.</li>
<li>Fixed deprecation warnings in Apollo Tracing extension.</li>
<li>Added a check to prevent <code>subscription</code> operation execution when a query is made with POST request.</li>
</ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Ariadne Codegen 0.13]]></title>
            <link>https://ariadnegraphql.org/blog/2024/03/04/ariadne-codegen-0-13</link>
            <guid>https://ariadnegraphql.org/blog/2024/03/04/ariadne-codegen-0-13</guid>
            <pubDate>Mon, 04 Mar 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Ariadne Codegen 0.13 is now available. This is a bugfix release that addresses reported issues.]]></description>
            <content:encoded><![CDATA[<p>Ariadne Codegen 0.13 is now available. This is a bugfix release that addresses reported issues.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="re-added-model_rebuild-calls">Re-added <code>model_rebuild</code> calls<a href="https://ariadnegraphql.org/blog/2024/03/04/ariadne-codegen-0-13#re-added-model_rebuild-calls" class="hash-link" aria-label="Direct link to re-added-model_rebuild-calls" title="Direct link to re-added-model_rebuild-calls">​</a></h2>
<p>Ariadne Codegen 0.11 removed <code>model_rebuild</code> calls from the generated code on the basis of Pydantic v2's self-healing capabilities.</p>
<p>Sadly reality verified this feature, making it necessary for us to mostly revert the change from 0.11.</p>
<p>Ariadne Codegen 0.13 scans generated models for forward references and includes <code>model_rebuild</code> calls for models that contain those.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="fixed-potential-name-conflicts-between-field-args-and-generated-clients-method-code">Fixed potential name conflicts between field args and generated client's method code<a href="https://ariadnegraphql.org/blog/2024/03/04/ariadne-codegen-0-13#fixed-potential-name-conflicts-between-field-args-and-generated-clients-method-code" class="hash-link" aria-label="Direct link to Fixed potential name conflicts between field args and generated client's method code" title="Direct link to Fixed potential name conflicts between field args and generated client's method code">​</a></h2>
<p>Naming a field argument <code>query</code>, <code>variables</code>, <code>data</code> or <code>result</code> would prevent the generated method to work or produce type errors for variable redefinition with different type.</p>
<p>Ariadne Codegen 0.13 detects name collisions and then prefixes its own names with <code>_</code> in generated client's methods.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="changelog">CHANGELOG<a href="https://ariadnegraphql.org/blog/2024/03/04/ariadne-codegen-0-13#changelog" class="hash-link" aria-label="Direct link to CHANGELOG" title="Direct link to CHANGELOG">​</a></h2>
<ul>
<li>Fixed <code>str_to_snake_case</code> utility to capture fully capitalized words followed by an underscore.</li>
<li>Re-added <code>model_rebuild</code> calls for models with forward references.</li>
<li>Fixed potential name conflicts between field args and generated client's method code.</li>
</ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Ariadne GraphQL Modules 0.8]]></title>
            <link>https://ariadnegraphql.org/blog/2024/02/21/ariadne-graphql-modules-0-8</link>
            <guid>https://ariadnegraphql.org/blog/2024/02/21/ariadne-graphql-modules-0-8</guid>
            <pubDate>Wed, 21 Feb 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Ariadne GraphQL Modules 0.8 is now available.]]></description>
            <content:encoded><![CDATA[<p>Ariadne GraphQL Modules 0.8 is now available.</p>
<p>This release updates library to work with Ariadne 0.22.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Ariadne Codegen 0.12]]></title>
            <link>https://ariadnegraphql.org/blog/2024/02/05/ariadne-codegen-0-12</link>
            <guid>https://ariadnegraphql.org/blog/2024/02/05/ariadne-codegen-0-12</guid>
            <pubDate>Mon, 05 Feb 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Ariadne Codegen 0.12 has been released!]]></description>
            <content:encoded><![CDATA[<p>Ariadne Codegen 0.12 has been released!</p>
<p>This is a maintenance release that fixes reported bugs in Pydantic models creation, subscriptions, plugins and adds support for saving schema to <code>graphql</code> file.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="fixed-graphql-transport-ws-protocol-implementation-not-waiting-for-the-connection_ack-message-on-new-connection">Fixed <code>graphql-transport-ws</code> protocol implementation not waiting for the <code>connection_ack</code> message on new connection<a href="https://ariadnegraphql.org/blog/2024/02/05/ariadne-codegen-0-12#fixed-graphql-transport-ws-protocol-implementation-not-waiting-for-the-connection_ack-message-on-new-connection" class="hash-link" aria-label="Direct link to fixed-graphql-transport-ws-protocol-implementation-not-waiting-for-the-connection_ack-message-on-new-connection" title="Direct link to fixed-graphql-transport-ws-protocol-implementation-not-waiting-for-the-connection_ack-message-on-new-connection">​</a></h2>
<p>Async client for <code>graphql-transport-ws</code> protocol didn't await for the <code>connection_ack</code> message on the new connection to the GraphQL server.</p>
<p>This has been addressed in Ariadne Codegen 0.12.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="fixed-get_client_settings-mutating-config_dict-instance">Fixed <code>get_client_settings</code> mutating <code>config_dict</code> instance<a href="https://ariadnegraphql.org/blog/2024/02/05/ariadne-codegen-0-12#fixed-get_client_settings-mutating-config_dict-instance" class="hash-link" aria-label="Direct link to fixed-get_client_settings-mutating-config_dict-instance" title="Direct link to fixed-get_client_settings-mutating-config_dict-instance">​</a></h2>
<p>Ariadne Codegen mutated <code>config_dict</code> on initialization, which caused errors when plugins attempted to access changed or removed keys in the configuration dict.</p>
<p>In 0.12 <code>config_dict</code> is first copied before being changed, preserving the original dict for plugins.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="restored-model_rebuild-calls-for-top-level-fragment-models">Restored <code>model_rebuild</code> calls for top level fragment models<a href="https://ariadnegraphql.org/blog/2024/02/05/ariadne-codegen-0-12#restored-model_rebuild-calls-for-top-level-fragment-models" class="hash-link" aria-label="Direct link to restored-model_rebuild-calls-for-top-level-fragment-models" title="Direct link to restored-model_rebuild-calls-for-top-level-fragment-models">​</a></h2>
<p><code>model_rebuild</code> calls were previously removed from Ariadne Codegen to improve the generated client's initialization performance.</p>
<p>This caused an issue where lazy references were not completed by Pydantic on initialization, breaking those in the client.</p>
<p>0.12 attempts to detect scenarios where <code>model_rebuild</code> are necessary and includes them in the generated client.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="added-support-to-graphqlschema-for-saving-schema-as-a-graphql-file">Added support to <code>graphqlschema</code> for saving schema as a GraphQL file<a href="https://ariadnegraphql.org/blog/2024/02/05/ariadne-codegen-0-12#added-support-to-graphqlschema-for-saving-schema-as-a-graphql-file" class="hash-link" aria-label="Direct link to added-support-to-graphqlschema-for-saving-schema-as-a-graphql-file" title="Direct link to added-support-to-graphqlschema-for-saving-schema-as-a-graphql-file">​</a></h2>
<p>Ariadne Codegen provides the <code>graphqlschema</code> command which creates a local copy of specified schema.</p>
<p>Previously this copy was always a Python declaration of the <code>GraphQLSchema</code> instance, but since 0.12 it is now possible to create a copy in GraphQL Schema Definition Language.</p>
<p>Output format is controlled by the file extension used in the <code>target_file_path</code> configuration option:</p>
<ul>
<li><code>.py</code> will produce a Python file with <code>GraphQLSchema</code> instance.</li>
<li><code>.graphql</code> and <code>.gql</code> will produce a GraphQL file with SDL schema definition.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="changelog">Changelog<a href="https://ariadnegraphql.org/blog/2024/02/05/ariadne-codegen-0-12#changelog" class="hash-link" aria-label="Direct link to Changelog" title="Direct link to Changelog">​</a></h2>
<ul>
<li>Fixed <code>graphql-transport-ws</code> protocol implementation not waiting for the <code>connection_ack</code> message on a new connection.</li>
<li>Fixed <code>get_client_settings</code> mutating <code>config_dict</code> instance.</li>
<li>Added support to <code>graphqlschema</code> for saving schema as a GraphQL file.</li>
<li>Restored <code>model_rebuild</code> calls for top level fragment models.</li>
</ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Ariadne 0.22]]></title>
            <link>https://ariadnegraphql.org/blog/2024/01/31/ariadne-0-22-0</link>
            <guid>https://ariadnegraphql.org/blog/2024/01/31/ariadne-0-22-0</guid>
            <pubDate>Wed, 31 Jan 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Ariadne 0.22 has been released!]]></description>
            <content:encoded><![CDATA[<p>Ariadne 0.22 has been released!</p>
<p>This release fixes the invalid error message being returned from the <code>GraphQLTransportWSHandler</code> if the GraphQL error occurred for the query or mutation operations. It also improves implementation of enums handling.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="fixed-graphqltransportwshandler-error-responses">Fixed <code>GraphQLTransportWSHandler</code> error responses<a href="https://ariadnegraphql.org/blog/2024/01/31/ariadne-0-22-0#fixed-graphqltransportwshandler-error-responses" class="hash-link" aria-label="Direct link to fixed-graphqltransportwshandler-error-responses" title="Direct link to fixed-graphqltransportwshandler-error-responses">​</a></h2>
<p><code>GraphQLTransportWSHandler</code> would return an incorrect error payload for <code>query</code> and <code>mutation</code> operations that errored. <code>payload</code> for <code>error</code> message should be a list of GraphQL errors, but due to a bug in implementation, it would be a list with single <code>{errors: [...]}</code> result.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="improvements-to-enum-handling">Improvements to enum handling<a href="https://ariadnegraphql.org/blog/2024/01/31/ariadne-0-22-0#improvements-to-enum-handling" class="hash-link" aria-label="Direct link to Improvements to enum handling" title="Direct link to Improvements to enum handling">​</a></h2>
<p>GraphQL comes with a number of quirks when it comes to enums behavior, especially converting their GraphQL values to Python, and vice-versa.</p>
<p>Previously Ariadne relied on the logic implemented by the <code>EnumType</code> bindable for handling this behavior, but Ariadne 0.22 moves this logic from <code>EnumType.bind_to_default_values</code> into a new <code>repair_schema_default_enum_values</code> utility. <code>validate_schema_enum_values</code> utility has been replaced with new <code>validate_schema_default_enum_values</code> utility.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="changelog">Changelog<a href="https://ariadnegraphql.org/blog/2024/01/31/ariadne-0-22-0#changelog" class="hash-link" aria-label="Direct link to Changelog" title="Direct link to Changelog">​</a></h2>
<ul>
<li>Deprecated <code>EnumType.bind_to_default_values</code> method. It will be removed in a future release.</li>
<li>Added <code>repair_schema_default_enum_values</code> to public API.</li>
<li>Removed <code>validate_schema_enum_values</code> and introduced <code>validate_schema_default_enum_values</code> in its place. This is a breaking change.</li>
<li>Fixed an invalid error message returned by the <code>GraphQLTransportWSHandler</code> for <code>query</code> and <code>mutation</code> operations.</li>
</ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Ariadne Codegen 0.11]]></title>
            <link>https://ariadnegraphql.org/blog/2023/12/05/ariadne-codegen-0-11</link>
            <guid>https://ariadnegraphql.org/blog/2023/12/05/ariadne-codegen-0-11</guid>
            <pubDate>Tue, 05 Dec 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Ariadne Codegen 0.11 is now available!]]></description>
            <content:encoded><![CDATA[<p>Ariadne Codegen 0.11 is now available!</p>
<p>This release brings performance improvements and new options for default base clients.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="removed-model_rebuild-calls">Removed <code>model_rebuild</code> calls<a href="https://ariadnegraphql.org/blog/2023/12/05/ariadne-codegen-0-11#removed-model_rebuild-calls" class="hash-link" aria-label="Direct link to removed-model_rebuild-calls" title="Direct link to removed-model_rebuild-calls">​</a></h2>
<p>Pydantic v2 has changed the way forward refs are handled during model class initialisation. If an annotation couldn't be resolved, an auto-rebuild is performed during the first validation attempt. Because of this, we're removing all <code>model_rebuild</code> calls from the generated package.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="generating-only-used-inputs-and-enums">Generating only used inputs and enums<a href="https://ariadnegraphql.org/blog/2023/12/05/ariadne-codegen-0-11#generating-only-used-inputs-and-enums" class="hash-link" aria-label="Direct link to Generating only used inputs and enums" title="Direct link to Generating only used inputs and enums">​</a></h2>
<p>Version 0.11 introduces 2 new configuration flags that can be used to reduce the number of unused generated models:</p>
<ul>
<li>
<p><code>include_all_inputs</code> (defaults to <code>true</code>) - when set to <code>true</code> the generated package will include a model for every input defined in the schema, otherwise it will only generate inputs used by defined operations.</p>
</li>
<li>
<p><code>include_all_enums</code> (defaults to <code>true</code>) - specifies whether to include all enums defined in the schema, or only those used in operations.</p>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="noreimportsplugin"><code>NoReimportsPlugin</code><a href="https://ariadnegraphql.org/blog/2023/12/05/ariadne-codegen-0-11#noreimportsplugin" class="hash-link" aria-label="Direct link to noreimportsplugin" title="Direct link to noreimportsplugin">​</a></h2>
<p>In 0.11, we are adding <code>NoReimportsPlugin</code> to the <code>ariadne_codegen.contrib</code> package. It removes the contents of the generated <code>__init__.py</code>. This is useful in scenarios where the generated package contains so many Pydantic models that the client's eager initialisation of the entire package on first import is very slow.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="including-operationname-in-payload">Including <code>operationName</code> in payload<a href="https://ariadnegraphql.org/blog/2023/12/05/ariadne-codegen-0-11#including-operationname-in-payload" class="hash-link" aria-label="Direct link to including-operationname-in-payload" title="Direct link to including-operationname-in-payload">​</a></h2>
<p>The generated client methods will now pass the name of the operation as the <code>operation_name</code> argument to the <code>execute</code> and <code>execute_ws</code> methods of the base client. For example:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">list_all_users</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">**</span><span class="token plain">kwargs</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Any</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> ListAllUsers</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    query </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> gql</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:#e3116c">"""</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">        query ListAllUsers {</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">          users {</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">            id</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">          }</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    variables</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Dict</span><span class="token punctuation" style="color:#393A34">[</span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token builtin">object</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    response </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">execute</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        query</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">query</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> operation_name</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"ListAllUsers"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> variables</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">variables</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">**</span><span class="token plain">kwargs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">get_data</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">response</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> ListAllUsers</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">model_validate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre></div></div>
<p>Default base clients will also include the given <code>operation_name</code> as <code>operationName</code> in the sent payload.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="payload-without-data-but-with-errors-key">Payload without <code>data</code>, but with <code>errors</code> key<a href="https://ariadnegraphql.org/blog/2023/12/05/ariadne-codegen-0-11#payload-without-data-but-with-errors-key" class="hash-link" aria-label="Direct link to payload-without-data-but-with-errors-key" title="Direct link to payload-without-data-but-with-errors-key">​</a></h2>
<p>We have changed the base clients to raise <code>GraphQLClientGraphQLMultiError</code> instead of <code>GraphQLClientInvalidResponseError</code> for payloads without <code>data</code> but with <code>errors</code> key.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="renamed-invalid-response-error">Renamed invalid response error<a href="https://ariadnegraphql.org/blog/2023/12/05/ariadne-codegen-0-11#renamed-invalid-response-error" class="hash-link" aria-label="Direct link to Renamed invalid response error" title="Direct link to Renamed invalid response error">​</a></h2>
<p>To match the convention of other exceptions included with the base default clients, we have renamed <code>GraphQLClientInvalidResponseError</code> to <code>GraphQLClientInvalidResponseError</code> (with a capital <code>L</code>).</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="changelog">Changelog<a href="https://ariadnegraphql.org/blog/2023/12/05/ariadne-codegen-0-11#changelog" class="hash-link" aria-label="Direct link to Changelog" title="Direct link to Changelog">​</a></h2>
<ul>
<li>Removed <code>model_rebuild</code> calls for generated input, fragment and result models.</li>
<li>Added <code>NoReimportsPlugin</code> that makes the <code>__init__.py</code> of generated client package empty.</li>
<li>Added <code>include_all_inputs</code> config flag to generate only inputs used in supplied operations.</li>
<li>Added <code>include_all_enums</code> config flag to generate only enums used in supplied operations.</li>
<li>Added <code>operationName</code> to payload sent by generated client's methods.</li>
<li>Fixed base clients to pass <code>mypy --strict</code> without installed optional dependencies.</li>
<li>Renamed <code>GraphQlClientInvalidResponseError</code> to <code>GraphQLClientInvalidResponseError</code> (breaking change).</li>
<li>Changed base clients to raise <code>GraphQLClientGraphQLMultiError</code> for payloads with <code>errors</code> key but no <code>data</code> (breaking change).</li>
</ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Ariadne Codegen 0.10]]></title>
            <link>https://ariadnegraphql.org/blog/2023/11/15/ariadne-codegen-0-10</link>
            <guid>https://ariadnegraphql.org/blog/2023/11/15/ariadne-codegen-0-10</guid>
            <pubDate>Wed, 15 Nov 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Ariadne Codegen 0.10 has been released!]]></description>
            <content:encoded><![CDATA[<p>Ariadne Codegen 0.10 has been released!</p>
<p>This release improves the snake case conversion of operation names, adds opt-in support for Open Telemetry tracing, introduces the <code>ExtractOperationsPlugin</code> plugin, adds Python 3.12 to the supported versions, and brings other features and fixes.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="converting-capitalized-names-and-digits-to-snake-case-breaking-change">Converting capitalized names and digits to snake case (breaking change)<a href="https://ariadnegraphql.org/blog/2023/11/15/ariadne-codegen-0-10#converting-capitalized-names-and-digits-to-snake-case-breaking-change" class="hash-link" aria-label="Direct link to Converting capitalized names and digits to snake case (breaking change)" title="Direct link to Converting capitalized names and digits to snake case (breaking change)">​</a></h2>
<p>Codegen converts given operation name to snake case. Result will later be used as name of a file containing generated models for operation, optionally (if <code>convert_to_snake_case</code> is set to <code>true</code>) also as client's method name. This release introduces changes to how numbers and capitalised names are handled in the conversion process, e.g:</p>
<table><thead><tr><th>operation name</th><th>old snake case</th><th>new snake case</th></tr></thead><tbody><tr><td>name</td><td>name</td><td>name</td></tr><tr><td>operationName</td><td>operation_name</td><td>operation_name</td></tr><tr><td>operationNAME</td><td>operation_n_a_m_e</td><td>operation_name</td></tr><tr><td>OPERATIONName</td><td>o_p_e_r_a_t_i_o_n_name</td><td>operation_name</td></tr><tr><td>operationName123</td><td>operation_name123</td><td>operation_name_123</td></tr><tr><td>operationNAME123</td><td>operation_n_a_m_e123</td><td>operation_name_123</td></tr></tbody></table>
<p>This is potentially a breaking change and may require changes in code using generated client.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="open-telemetry-tracing">Open Telemetry tracing<a href="https://ariadnegraphql.org/blog/2023/11/15/ariadne-codegen-0-10#open-telemetry-tracing" class="hash-link" aria-label="Direct link to Open Telemetry tracing" title="Direct link to Open Telemetry tracing">​</a></h2>
<p><code>0.10</code> ships with two additional base clients that support the Open Telemetry tracing. When the <code>opentelemetry_client</code> configuration option is set to <code>true</code>, the default included base client is replaced with one that implements the opt-in Open Telemetry support - <code>BaseClientOpenTelemetry</code>/<code>AsyncBaseClientOpenTelemetry</code>. By default this support does nothing, but if the <code>opentelemetry-api</code> package is installed and the <code>tracer</code> argument is provided, then the client will create spans with data about requests made.</p>
<p>Tracing arguments accepted by <code>BaseClientOpenTelemetry</code>:</p>
<ul>
<li><code>tracer</code>: <code>Optional[Union[str, Tracer]] = None</code> - tracer object or name to pass to the <code>get_tracer</code> method</li>
<li><code>root_context</code>: <code>Optional[Context] = None</code> - optional context added to the root span</li>
<li><code>root_span_name</code>: <code>str = "GraphQL Operation"</code> - name of the root span</li>
</ul>
<p><code>AsyncBaseClientOpenTelemetry</code> supports the same arguments as <code>BaseClientOpenTelemetry</code>, but also accepts additional arguments regarding websockets:</p>
<ul>
<li><code>ws_root_context</code>: <code>Optional[Context] = None</code> - optional context added to root span for websocket connection</li>
<li><code>ws_root_span_name</code>: <code>str = "GraphQL Subscription"</code> - name of root span for websocket connection</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="included-comments">Included comments<a href="https://ariadnegraphql.org/blog/2023/11/15/ariadne-codegen-0-10#included-comments" class="hash-link" aria-label="Direct link to Included comments" title="Direct link to Included comments">​</a></h2>
<p>In <code>0.10</code> we changed the <code>include_comments</code> option to allow selection of the style of comments to be included at the top of each generated file. Available options:</p>
<ul>
<li><code>"timestamp"</code> - comment with generation timestamp</li>
<li><code>"stable"</code> - comment with message that this is a generated file (new default)</li>
<li><code>"none"</code> - no comments</li>
</ul>
<p>Previous boolean support is deprecated and will be dropped in future releases, but for now <code>false</code> is mapped to <code>"none"</code> and <code>true</code> to <code>"timestamp"</code>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="extractoperationsplugin"><code>ExtractOperationsPlugin</code><a href="https://ariadnegraphql.org/blog/2023/11/15/ariadne-codegen-0-10#extractoperationsplugin" class="hash-link" aria-label="Direct link to extractoperationsplugin" title="Direct link to extractoperationsplugin">​</a></h2>
<p>Version <code>0.10</code> adds <code>ExtractOperationsPlugin</code> to the <code>ariadne_codegen.contrib</code> package. It moves query strings from the generated client's methods into a separate <code>operations.py</code> module and changes the generated client to import these definitions instead. The generated module name can be customized by adding <code>operations_module_name="custom_name"</code> to the <code>[tool.ariadne-codegen.operations]</code> section in config. E.g:</p>
<div class="language-gql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-gql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># queries.graphql</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">query getName {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<p><code>pyproject.toml</code>:</p>
<div class="language-toml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-toml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[tool.ariadne-codegen]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">queries_path = "..../queries.graphql"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">plugins = ["ariadne_codegen.contrib.extract_operations.ExtractOperationsPlugin"]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[tool.ariadne-codegen.extract_operations]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">operations_module_name = "custom_operations"</span><br></span></code></pre></div></div>
<p>Using the above configuration will result in the <code>custom_operations.py</code> being generated with following contents:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">__all__ </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"GET_NAME"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">GET_NAME </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token triple-quoted-string string" style="color:#e3116c">"""</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">query getName {</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">  name</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">"""</span><br></span></code></pre></div></div>
<p>The generated client imports <code>GET_NAME</code> and uses it instead of defining it's own operation string:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">custom_operations </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> GET_NAME</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">get_name </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> GetName</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">gql</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">q</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> q</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">Client</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">AsyncBaseClient</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">get_name</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">**</span><span class="token plain">kwargs</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Any</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> GetName</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        variables</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Dict</span><span class="token punctuation" style="color:#393A34">[</span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token builtin">object</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        response </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">execute</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">query</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">GET_NAME</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> variables</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">variables</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">**</span><span class="token plain">kwargs</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">get_data</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">response</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> GetName</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">model_validate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="overloading-arguments-per-call">Overloading arguments per call<a href="https://ariadnegraphql.org/blog/2023/11/15/ariadne-codegen-0-10#overloading-arguments-per-call" class="hash-link" aria-label="Direct link to Overloading arguments per call" title="Direct link to Overloading arguments per call">​</a></h2>
<p>Each generated client's method now accepts <code>**kwargs</code> and passes them to the <code>http_client.post</code>/<code>ws_connect</code> call made in the base client.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="escaping-enum-values-which-are-python-keywords">Escaping enum values which are Python keywords<a href="https://ariadnegraphql.org/blog/2023/11/15/ariadne-codegen-0-10#escaping-enum-values-which-are-python-keywords" class="hash-link" aria-label="Direct link to Escaping enum values which are Python keywords" title="Direct link to Escaping enum values which are Python keywords">​</a></h2>
<p>GraphQL enum values that are Python reserved keywords will now be suffixed with <code>_</code> in generated code, just like this is the case with generated field names for models, e.g:</p>
<div class="language-gql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-gql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">enum CustomEnum {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  valid</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  import</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># enums.py</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> enum </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> Enum</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">CustomEnum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> Enum</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    valid </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"valid"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    import_ </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"import"</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="adding-__typename-to-all-models-generated-from-unions-and-interfaces">Adding <code>__typename</code> to all models generated from unions and interfaces<a href="https://ariadnegraphql.org/blog/2023/11/15/ariadne-codegen-0-10#adding-__typename-to-all-models-generated-from-unions-and-interfaces" class="hash-link" aria-label="Direct link to adding-__typename-to-all-models-generated-from-unions-and-interfaces" title="Direct link to adding-__typename-to-all-models-generated-from-unions-and-interfaces">​</a></h2>
<p>In previous versions, models created from single-member unions or from interfaces that were queried without inline fragments didn't have a <code>__typename</code> field added. Now <code>0.10</code> includes this special field in all models generated from abstract types.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="nullable-fields-with-nullable-directives">Nullable fields with nullable directives<a href="https://ariadnegraphql.org/blog/2023/11/15/ariadne-codegen-0-10#nullable-fields-with-nullable-directives" class="hash-link" aria-label="Direct link to Nullable fields with nullable directives" title="Direct link to Nullable fields with nullable directives">​</a></h2>
<p><code>0.10</code> fixes behaviour when the default <code>None</code> was not added to a nullable field with a <code>@skip</code>/<code>@include</code> directive.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="ignored-enums_module_name">Ignored <code>enums_module_name</code><a href="https://ariadnegraphql.org/blog/2023/11/15/ariadne-codegen-0-10#ignored-enums_module_name" class="hash-link" aria-label="Direct link to ignored-enums_module_name" title="Direct link to ignored-enums_module_name">​</a></h2>
<p>Codegen now correctly reads <code>enums_module_name</code> and uses its value instead of always generating <code>enums.py</code>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="changelog">Changelog<a href="https://ariadnegraphql.org/blog/2023/11/15/ariadne-codegen-0-10#changelog" class="hash-link" aria-label="Direct link to Changelog" title="Direct link to Changelog">​</a></h2>
<ul>
<li>Fixed generating results for nullable fields with nullable directives.</li>
<li>Changed <code>include_comments</code> option to accept enum value, changed default to <code>"stable"</code>, deprecated boolean support. Added <code>get_file_comment</code> plugin hook.</li>
<li>Changed <code>str_to_snake_case</code> utility to correctly handle capitalized words.</li>
<li>Digits in Python names are now preceded by an underscore (breaking change).</li>
<li>Fixed parsing of unions and interfaces to always add <code>__typename</code> to generated result models.</li>
<li>Added escaping of enum values which are Python keywords by appending <code>_</code> to them.</li>
<li>Fixed <code>enums_module_name</code> option not being passed to generators.</li>
<li>Added additional base clients supporting the Open Telemetry tracing. Added <code>opentelemetry_client</code> config option.</li>
<li>Changed generated client's methods to pass <code>**kwargs</code> to base client's <code>execute</code> and <code>execute_ws</code> methods (breaking change for custom base clients).</li>
<li>Added <code>operation_definition</code> argument to <code>generate_client_method</code> plugin hook.</li>
<li>Added <code>ExtractOperationsPlugin</code> that extracts operation strings from client methods to separate module.</li>
<li>Added Python 3.12 to tested versions.</li>
</ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Ariadne 0.21]]></title>
            <link>https://ariadnegraphql.org/blog/2023/11/08/ariadne-0-21-0</link>
            <guid>https://ariadnegraphql.org/blog/2023/11/08/ariadne-0-21-0</guid>
            <pubDate>Wed, 08 Nov 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Ariadne 0.21 is now available.]]></description>
            <content:encoded><![CDATA[<p>Ariadne 0.21 is now available.</p>
<p>This is a maintenance release that updates Ariadne's dependencies and adds Python 3.12 to supported versions.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="subscriptions-support-in-graphiql-explorer">Subscriptions support in GraphiQL explorer<a href="https://ariadnegraphql.org/blog/2023/11/08/ariadne-0-21-0#subscriptions-support-in-graphiql-explorer" class="hash-link" aria-label="Direct link to Subscriptions support in GraphiQL explorer" title="Direct link to Subscriptions support in GraphiQL explorer">​</a></h2>
<p>Ariadne's GraphiQL explorer template has been updated with configuration necessary for GraphQL subscriptions.</p>
<p>You will still need to add subscriptions support to your server in order for those to work, but you will no longer have to rely on custom <code>GraphiQL</code> configuration to enable those in explorer.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="changelog">Changelog<a href="https://ariadnegraphql.org/blog/2023/11/08/ariadne-0-21-0#changelog" class="hash-link" aria-label="Direct link to Changelog" title="Direct link to Changelog">​</a></h2>
<ul>
<li>Added Python 3.12 to tested versions.</li>
<li>Updated integration tests to run against FastAPI 0.104, Flask 3.0 and Starlette 0.32.</li>
<li>Updated GraphiQL explorer to initialize with support for subscriptions.</li>
</ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Ariadne Codegen 0.9]]></title>
            <link>https://ariadnegraphql.org/blog/2023/09/11/ariadne-codegen-0-9</link>
            <guid>https://ariadnegraphql.org/blog/2023/09/11/ariadne-codegen-0-9</guid>
            <pubDate>Mon, 11 Sep 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Ariadne Codegen 0.9 is now available!]]></description>
            <content:encoded><![CDATA[<p>Ariadne Codegen 0.9 is now available!</p>
<p>This release includes a number of fixes and improvements related to Pydantic v2.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="custom-scalars">Custom scalars<a href="https://ariadnegraphql.org/blog/2023/09/11/ariadne-codegen-0-9#custom-scalars" class="hash-link" aria-label="Direct link to Custom scalars" title="Direct link to Custom scalars">​</a></h2>
<p>In the last refactoring of custom scalars, we introduced a bug that caused custom <code>parse</code> to be called on already correct objects within generated input models. To fix this, we are again changing the way custom scalars are represented in the generated package. We are removing <code>scalars.py</code>, the related option and plugin hooks. Instead, scalars will be represented directly as provided types.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="custom-scalar-without-custom-parse-and-serialize">Custom scalar without custom parse and serialize<a href="https://ariadnegraphql.org/blog/2023/09/11/ariadne-codegen-0-9#custom-scalar-without-custom-parse-and-serialize" class="hash-link" aria-label="Direct link to Custom scalar without custom parse and serialize" title="Direct link to Custom scalar without custom parse and serialize">​</a></h3>
<div class="language-toml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-toml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[tool.ariadne-codegen.scalars.SCALARA]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">type = "str"</span><br></span></code></pre></div></div>
<p>Each occurrence of <code>SCALARA</code> is represented as <code>str</code>.</p>
<div class="language-toml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-toml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[tool.ariadne-codegen.scalars.DATETIME]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">type = "datetime.datetime"</span><br></span></code></pre></div></div>
<p>In this case, <code>DATETIME</code> is treated in the same way, but the necessary import is added: <code>from datetime import datetime</code>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="custom-scalar-with-custom-parse-and-serialize">Custom scalar with custom parse and serialize<a href="https://ariadnegraphql.org/blog/2023/09/11/ariadne-codegen-0-9#custom-scalar-with-custom-parse-and-serialize" class="hash-link" aria-label="Direct link to Custom scalar with custom parse and serialize" title="Direct link to Custom scalar with custom parse and serialize">​</a></h3>
<div class="language-toml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-toml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[tool.ariadne-codegen]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">files_to_include = [".../type_b.py"]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[tool.ariadne-codegen.scalars.SCALARB]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">type = ".type_b.TypeB"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">parse = ".type_b.parse_b"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">serialize = ".type_b.serialize_b"</span><br></span></code></pre></div></div>
<p><code>SCALARB</code> is represented as <code>TypeB</code>, but annotated according to its specific usage.</p>
<p>In models representing input types it will be annotated with <code>PlainSerializer</code>. This allows the user to create an input model with an existing <code>TypeB</code> instance, and serialization will take place automatically during query execution.</p>
<div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># inputs.py</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">TestInput</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">BaseModel</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    value_b</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Annotated</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">TypeB</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> PlainSerializer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">serialize_b</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre></div></div>
<div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">b </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> TypeB</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test_input </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> TestInput</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">value_b</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">b</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre></div></div>
<p>In result models <code>TypeB</code> will be annotated with <code>BeforeValidator</code>, which will use <code>parse_b</code> to deserialize <code>TypeB</code>`s data from the server.</p>
<div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># get_b.py</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">GetB</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">BaseModel</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    query_b</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Annotated</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">TypeB</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> BeforeValidator</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">parse_b</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre></div></div>
<div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">with</span><span class="token plain"> Client</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> client</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    b_data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> client</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">get_b</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">assert</span><span class="token plain"> </span><span class="token builtin">isinstance</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">b_data</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">query_b</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> TypeB</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre></div></div>
<p>If <code>SCALARB</code> is used as the type of the operation argument, it will be represented as an unannotated <code>TypeB</code>, but <code>serialize_b</code> will still be used in <code>variables</code> dict.</p>
<div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># client.py</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">Client</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">AsyncBaseClient</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">test_mutation</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> TypeB</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> TestMutation</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        variables</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Dict</span><span class="token punctuation" style="color:#393A34">[</span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token builtin">object</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token string" style="color:#e3116c">"value"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> serialize_b</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">value</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="pydantics-warnings">Pydantic`s warnings<a href="https://ariadnegraphql.org/blog/2023/09/11/ariadne-codegen-0-9#pydantics-warnings" class="hash-link" aria-label="Direct link to Pydantic`s warnings" title="Direct link to Pydantic`s warnings">​</a></h2>
<p>By default, Pydantic gives a warning if the name of a field starts with <code>model_</code>, but throws an error if there is a collision with an existing attribute. In the last release we took care of the collisions and now we are changing the configuration of <code>BaseModel</code> to not give these warnings.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="nullable-directives">Nullable directives<a href="https://ariadnegraphql.org/blog/2023/09/11/ariadne-codegen-0-9#nullable-directives" class="hash-link" aria-label="Direct link to Nullable directives" title="Direct link to Nullable directives">​</a></h2>
<p>Codegen detects <code>@skip' and </code>@include' directives and marks fields with them as <code>Optional</code>, even if the type is not nullable. With pydantic v1 this worked fine, but with v2 there is an error if the response does not include a key for such a field. To maintain previous functionality, we will add an explicit <code>None</code> default for fields with one of these directives.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="operation-string-with-nested-inline-fragments">Operation string with nested inline fragments<a href="https://ariadnegraphql.org/blog/2023/09/11/ariadne-codegen-0-9#operation-string-with-nested-inline-fragments" class="hash-link" aria-label="Direct link to Operation string with nested inline fragments" title="Direct link to Operation string with nested inline fragments">​</a></h2>
<p>Version <code>0.9</code> fixes the way we generate the operation string for the case where fragments are only used within an inline fragment. From now on we include these nested fragments.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="changelog">Changelog<a href="https://ariadnegraphql.org/blog/2023/09/11/ariadne-codegen-0-9#changelog" class="hash-link" aria-label="Direct link to Changelog" title="Direct link to Changelog">​</a></h2>
<ul>
<li>Fixed generating operation string for nested inline fragments.</li>
<li>Removed scalars module. Changed generated models and client to use annotated types for custom scalars. Removed <code>scalars_module_name</code> option. Removed <code>generate_scalars_module</code>, <code>generate_scalars_cod</code>, <code>generate_scalar_annotation</code> and <code>generate_scalar_imports</code> plugin hooks.</li>
<li>Removed pydantic warnings for fields with <code>model_</code> prefix.</li>
<li>Fixed generating result types with nullable directives.</li>
</ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Ariadne Codegen 0.8]]></title>
            <link>https://ariadnegraphql.org/blog/2023/08/22/ariadne-codegen-0-8</link>
            <guid>https://ariadnegraphql.org/blog/2023/08/22/ariadne-codegen-0-8</guid>
            <pubDate>Tue, 22 Aug 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Ariadne Codegen 0.8 has been released!]]></description>
            <content:encoded><![CDATA[<p>Ariadne Codegen 0.8 has been released!</p>
<p>This release brings support for file uploads, pydantic v2 compliance, improved custom scalars handling, and few other features and fixes.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="file-uploads">File uploads<a href="https://ariadnegraphql.org/blog/2023/08/22/ariadne-codegen-0-8#file-uploads" class="hash-link" aria-label="Direct link to File uploads" title="Direct link to File uploads">​</a></h2>
<p>From now on, the default base client (sync or async) checks if any part of <code>variables</code> is an instance of <code>Upload</code>. If such an instance is found, the client sends a multipart request according to <a href="https://github.com/jaydenseric/graphql-multipart-request-spec" target="_blank" rel="noopener noreferrer">GraphQL multipart request specification</a>. <code>Upload</code> is a class that stores necessary data about the file:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">Upload</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">__init__</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> filename</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> content</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> IOBase</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> content_type</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">filename </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> filename</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">content </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> content</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">content_type </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> content_type</span><br></span></code></pre></div></div>
<p>It is part of the generated client, and can be imported from it:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">target_package_name</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> Upload</span><br></span></code></pre></div></div>
<p>By default, this class represents the graphql scalar <code>Upload</code>, but using custom scalar configuration, it can also be used for other scalars, e.g:</p>
<div class="language-toml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-toml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[tool.ariadne-codegen.scalars.OTHERSCALAR]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">type = "Upload"</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="pydantic-v2">Pydantic v2<a href="https://ariadnegraphql.org/blog/2023/08/22/ariadne-codegen-0-8#pydantic-v2" class="hash-link" aria-label="Direct link to Pydantic v2" title="Direct link to Pydantic v2">​</a></h2>
<p>Version <code>0.8</code> changes the supported version of <code>pydantic</code> to <code>&gt;=2.0.0,&lt;3.0.0</code>. List of changes in the generated client:</p>
<ul>
<li>Renamed <code>parse_obj</code> to <code>model_validate</code>.</li>
<li>Renamed <code>dict</code> to <code>model_dump</code>.</li>
<li>Preconfigured <code>BaseModel</code> uses <code>model_config</code> attribute instead of <code>Config</code> class.</li>
<li>Renamed <code>update_forward_refs</code> to <code>model_rebuild</code>.</li>
<li>Changed json encoder used by default base clients from <code>pydantic.json.pydantic_encoder</code> to <code>pydantic_core.to_jsonable_python</code>.</li>
<li>Optional input fields now have an explicit default <code>None</code> value (if the schema doesn't specify another value).</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="improved-custom-scalars">Improved custom scalars<a href="https://ariadnegraphql.org/blog/2023/08/22/ariadne-codegen-0-8#improved-custom-scalars" class="hash-link" aria-label="Direct link to Improved custom scalars" title="Direct link to Improved custom scalars">​</a></h2>
<p>In <code>0.8</code>, we removed custom scalar logic from the preconfigured <code>BaseModel</code>, instead using pydantic's <code>BeforeValidator</code> and <code>PlainSerializer</code>. Now for every custom scalar provided in <code>pyproject.toml</code>, we generate an annotation that is used in generated arguments, results, and input models.</p>
<p>Example of generated annotations:</p>
<div class="language-toml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-toml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[tool.ariadne-codegen]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">files_to_include = [".../type_b.py"]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[tool.ariadne-codegen.scalars.SCALARA]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">type = "str"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[tool.ariadne-codegen.scalars.DATETIME]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">type = "datetime.datetime"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[tool.ariadne-codegen.scalars.SCALARB]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">type = ".type_b.TypeB"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">parse = ".type_b.parse_b"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">serialize = ".type_b.serialize_b"</span><br></span></code></pre></div></div>
<div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># scalars.py</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> datetime </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> datetime</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> typing </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> Annotated</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> pydantic </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> BeforeValidator</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> PlainSerializer</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">type_b </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> TypeB</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> parse_b</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> serialize_b</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SCALARA </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">DATETIME </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> datetime</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SCALARB </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Annotated</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">TypeB</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> PlainSerializer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">serialize_b</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> BeforeValidator</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">parse_b</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre></div></div>
<p><code>BaseModel</code> no longer depends on <code>scalars.py</code>, so now we can customize file name through the <code>scalars_module_name</code> option.</p>
<p>Scalars file has complellty different structure, so we removed <code>generate_scalars_parse_dict</code> and <code>generate_scalars_serialize_dict</code> plugin hooks. Instead, we introduced <code>generate_scalar_annotation</code> and <code>generate_scalar_imports</code> hooks.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="mixin-directive">Mixin directive<a href="https://ariadnegraphql.org/blog/2023/08/22/ariadne-codegen-0-8#mixin-directive" class="hash-link" aria-label="Direct link to Mixin directive" title="Direct link to Mixin directive">​</a></h2>
<p>Ariadne Codegen 0.8 brings support for using the <code>mixin</code> directive on fragment definitions.</p>
<p>For example, given this fragment definition:</p>
<div class="language-gql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-gql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">fragment fragmentA on TypeA @mixin(from: ".mixins", import: "MixinA") {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  fieldA</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<p>Generated <code>FragmentA</code> will inherit from <code>MixinA</code>:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># fragments.py</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">base_model </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> BaseModel</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">mixins </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> MixinA</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">FragmentA</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">BaseModel</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> MixinA</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    field_a</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">int</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Field</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">alias</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"fieldA"</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre></div></div>
<p>Additionally, from now on, the <code>mixin</code> directive will be excluded from the operation string, which is sent to a graphql server.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="field-names">Field names<a href="https://ariadnegraphql.org/blog/2023/08/22/ariadne-codegen-0-8#field-names" class="hash-link" aria-label="Direct link to Field names" title="Direct link to Field names">​</a></h2>
<p>Version <code>0.8</code> introduces improvements in generating field names. It will append <code>_</code> to generated field name that would be already reserved by pydantic <code>BaseModel</code>'s methods and attributes.</p>
<p>We also added handling of field names which consist only of underscores. It will be generated as <code>underscore_named_field_</code>. This behavior has the lowest priority in our name processing, so such a field's name can be altered by using an alias or utilizing <code>process_name</code> plugin hook.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="unified-annotations">Unified annotations<a href="https://ariadnegraphql.org/blog/2023/08/22/ariadne-codegen-0-8#unified-annotations" class="hash-link" aria-label="Direct link to Unified annotations" title="Direct link to Unified annotations">​</a></h2>
<p>We changed the generated client to use <code>typing.Dict</code> and <code>typing.List</code> instead of <code>dict</code> and <code>list</code>. That way, used annotations don't prevent using a generated client with older versions of Python.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="changelog">Changelog<a href="https://ariadnegraphql.org/blog/2023/08/22/ariadne-codegen-0-8#changelog" class="hash-link" aria-label="Direct link to Changelog" title="Direct link to Changelog">​</a></h2>
<ul>
<li>Added support for <code>Upload</code> scalar. Added support for file uploads to <code>AsyncBaseClient</code> and <code>BaseClient</code>.</li>
<li>Added validation of defined operations against the schema.</li>
<li>Removed <code>mixin</code> directive from fragment string included in operation string sent to server.</li>
<li>Added support for <code>mixin</code> directive on fragments definitions.</li>
<li>Added support for fragments defined on subtype of field's type.</li>
<li>Added default representation for a field name consisting only of underscores.</li>
<li>Changed generated client and models to use pydantic v2.</li>
<li>Changed custom scalars implementation to utilize pydantic's <code>BeforeValidator</code> and <code>PlainSerializer</code>. Added <code>scalars_module_name</code> option. Replaced <code>generate_scalars_parse_dict</code> and <code>generate_scalars_serialize_dict</code> with <code>generate_scalar_annotation</code> and <code>generate_scalar_imports</code> plugin hooks.</li>
<li>Unified annotations in generated client to be compatible with python &lt; 3.9.</li>
<li>Fixed generating default values of input types from remote schemas.</li>
<li>Changed generating of input and result field names to add <code>_</code> to names reserved by pydantic.</li>
</ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[GraphQL Gathering EU in Berlin]]></title>
            <link>https://ariadnegraphql.org/blog/2023/07/10/graphql-gathering</link>
            <guid>https://ariadnegraphql.org/blog/2023/07/10/graphql-gathering</guid>
            <pubDate>Mon, 10 Jul 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[On the 4th of July Mirumee organized the GraphQL Gathering EU event together with The Guild, Saleor, Stellate, Escape and Hasura and support from the GraphQL Foundation.]]></description>
            <content:encoded><![CDATA[<p>On the 4th of July Mirumee organized the GraphQL Gathering EU event together with The Guild, Saleor, Stellate, Escape and Hasura and support from the GraphQL Foundation.</p>
<p>This event took place in Spielfeld Digital Hub in Berlin. It used the unconference format where instead of a series of talks the attendees first submit the topics for discussion, then those topics are divided between three time slots, and people join the designated tables to discuss those based on their own interests.</p>
<p>Between those tables and talks in corridors, we've got a few takeaways that we've found relevant to the Ariadne and GraphQL developers using it.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="performance-metrics">Performance metrics<a href="https://ariadnegraphql.org/blog/2023/07/10/graphql-gathering#performance-metrics" class="hash-link" aria-label="Direct link to Performance metrics" title="Direct link to Performance metrics">​</a></h2>
<p>Ariadne out of the box provides extensions for enabling the Open Telemetry and Open Tracing metrics. Those extensions work by wrapping in telemetry spans all calls of custom resolvers by the GraphQL engine.</p>
<p>During the Gathering and and even before we've heard an opinion that this approach to GraphQL metrics is not good, as it fills the APM software with tons of data which can be best described as noise. Better approach postulated is having developers themselves implement those traces explicitly in resolvers they like to track performance of.</p>
<p>We are not planning to drop OpenTelemetry (or OpenTracing) extensions from Ariadne, but we may consider updating the existing documentation with a short note that the out of the box approach may not be what they want. Maybe the solution to the issue of having a lot of noise in metrics would be the <code>fields</code> option on extensions, enabling developers to limit them only to selected fields?</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="persisted-queries">Persisted queries<a href="https://ariadnegraphql.org/blog/2023/07/10/graphql-gathering#persisted-queries" class="hash-link" aria-label="Direct link to Persisted queries" title="Direct link to Persisted queries">​</a></h2>
<p>One of GraphQL's selling points is getting only the data you've queried for. But what about situations when this control should be reversed, and it's the server which should decide on fields to return it? One could go about implementing a separate REST or RPC API on the side, but now they need to maintain two separate APIs which can be considered grossly suboptimal.</p>
<p>One proposed solution to this issue is introduction of persisted queries to GraphQL. The idea is if GraphQL server received <code>operationName</code> within its payload, but not <code>query</code>, it would look up the list of predefined operations on its side using the name received. It would then either return an error, or run a query from persisted operation. This enables GraphQL to act as both the GraphQL API, but also, when needed, an RPC server.</p>
<p>This idea requires further development as there are still questions that need answering like how should stored procedures be discoverable by the clients in introspections.</p>
<p>Ariadne could provide limited support for persisted queries inside the <code>ariadne.contrib</code> package.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="query-complexity-and-cost-checks">Query complexity and cost checks<a href="https://ariadnegraphql.org/blog/2023/07/10/graphql-gathering#query-complexity-and-cost-checks" class="hash-link" aria-label="Direct link to Query complexity and cost checks" title="Direct link to Query complexity and cost checks">​</a></h2>
<p>One discussion we've had at the Gathering was about the query complexity and validation. Ariadne implements a query cost validator that will calculate query cost and prevent query execution when a predefined limit is exceeded. However this topic is little more, well, complex than setting those costs limits:</p>
<ul>
<li>The biggest offenders are deep queries exploiting cycles within schema. Queries like products list -&gt; category -&gt; category products list -&gt; reviewers -&gt; reviewed products list. Prevent those from happening by avoiding fields returning lists outside of <code>Query</code> and <code>Mutation</code> results types.</li>
<li>When in doubt, make fields returning lists paginated.</li>
<li>Consider writing a GraphQL validator that limits the number of fields from <code>Query</code> or <code>Mutation</code> that can be queried in a single operation.</li>
<li>Understand your users. Slow queries may not be the end of the world when they happen rarely. Maybe clients are looking for an easy way to pull a bunch of data to avoid waterfalls and you can improve the schema for them? Or maybe those clients are maintained by people sitting in the next room in the office and the issue may be resolved by asking nicely? Not every problem must be an engineering one.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="combining-and-composing-apis-in-single-graphql-schema">Combining and composing APIs in single GraphQL schema<a href="https://ariadnegraphql.org/blog/2023/07/10/graphql-gathering#combining-and-composing-apis-in-single-graphql-schema" class="hash-link" aria-label="Direct link to Combining and composing APIs in single GraphQL schema" title="Direct link to Combining and composing APIs in single GraphQL schema">​</a></h2>
<p>Few weeks ago we launched the Ariadne GraphQL Proxy - our (prototype) solution for the problem of combining multiple APIs under a single GraphQL endpoint.</p>
<p>During the Gathering we've participated in a few discussions on the subject that gave us both ideas for future improvements to the API, but also understanding of priorities people have when implementing GraphQL gateways. We understand now people expect to be able to deploy those solutions as part of their CDN layer (like CloudFlare workers), to easily repackage OpenAPI compliant APIs as GraphQL, and to be able to quickly enable caching for hot paths.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Ariadne 0.20.1]]></title>
            <link>https://ariadnegraphql.org/blog/2023/06/27/ariadne-0-20-1</link>
            <guid>https://ariadnegraphql.org/blog/2023/06/27/ariadne-0-20-1</guid>
            <pubDate>Tue, 27 Jun 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Ariadne 0.20.1 has been released.]]></description>
            <content:encoded><![CDATA[<p>Ariadne 0.20.1 has been released.</p>
<p>0.20.1 is a bugfix release that updates the GraphiQL template to use new URL for explorer plugin, if its enabled through the <code>explorer_plugin=True</code> option.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Ariadne 0.20]]></title>
            <link>https://ariadnegraphql.org/blog/2023/06/21/ariadne-0-20-0</link>
            <guid>https://ariadnegraphql.org/blog/2023/06/21/ariadne-0-20-0</guid>
            <pubDate>Wed, 21 Jun 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Ariadne 0.20 has been released!]]></description>
            <content:encoded><![CDATA[<p>Ariadne 0.20 has been released!</p>
<p>This release removes support for Python 3.7, adds Open Telemetry extension, deprecates Open Tracing and Apollo Tracing extensions.</p>
<p>It also includes bugfixes, new configuration options and updated GraphQL extensions that should perform better than previous ones in asynchronous servers.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="dropped-python-37-support">Dropped Python 3.7 support<a href="https://ariadnegraphql.org/blog/2023/06/21/ariadne-0-20-0#dropped-python-37-support" class="hash-link" aria-label="Direct link to Dropped Python 3.7 support" title="Direct link to Dropped Python 3.7 support">​</a></h2>
<p>Python 3.7 reaches end of life on 27 June 2023, but we are already experiencing some of Ariadne's tests failing for it due to the dependencies being ahead of us in dropping support.</p>
<p>Ariadne 0.20 drops support for Python 3.7. It may still work on Python 3.7, we will not test against it anymore and bugs and crashes specific to it will not be addressed.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="new-extensions-implementation">New extensions implementation<a href="https://ariadnegraphql.org/blog/2023/06/21/ariadne-0-20-0#new-extensions-implementation" class="hash-link" aria-label="Direct link to New extensions implementation" title="Direct link to New extensions implementation">​</a></h2>
<blockquote>
<p><strong>Note:</strong> This is a breaking change. See the <a href="https://ariadnegraphql.org/server/middleware">middleware</a> document for new guide for developers.</p>
</blockquote>
<p>In the past Ariadne shipped with both synchronous and asynchronous GraphQL extensions. Our users reported that asynchronous extensions suffered from performance issues, which we've attempted to resolve together with the community through extra configuration options enabling exclusion of specified fields from tracing, but this didn't lead to noticeable improvements.</p>
<p>We've received an important tip from Christoph Zwerschke, developer of the <code>GraphQL-core 3</code> library which powers Ariadne's GraphQL implementation. In short, using asynchronous middleware resulted in every GraphQL field becoming asynchronous, even those excluded from tracing. Async/await in Python is generally fast enough, but it's overhead is non-negligible, especially for thousands of calls that happen during GraphQL query execution.</p>
<p>Ariadne 0.20 adds a benchmarks suite to the project. This suite allowed us to measure the performance hit on no-op asynchronous GraphQL extension (around 1.66 times slower than baseline query execution on Python 3.11).</p>
<p>In this release we have also dropped separate implementations for asynchronous and synchronous extensions. Ariadne's GraphQL extensions are now always synchronous, but in scenarios where the GraphQL resolver or its return value is asynchronous, those extensions return asynchronous closure for GraphQL's query executor to evaluate.</p>
<p>Quick results from last benchmarks are:</p>
<ul>
<li>1x: GraphQL query execution without any extensions enabled.</li>
<li>1.1x slower: GraphQL query execution with single no-op extension enabled.</li>
<li>1.31x slower: GraphQL query execution with single extension enabled, using the <code>OpenTelemetry</code> extension.</li>
</ul>
<p>We are happy with those gains and hope that our community will share our optimism at this change, even if the extensions system becomes more complex for extension developers.</p>
<p>Documentation for extensions and middleware was updated accordingly to explain the performance pitfall of using async extensions and new way to implement extensions that support both async and sync resolvers.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="migrating-existing-projects-to-new-extensions">Migrating existing projects to new extensions<a href="https://ariadnegraphql.org/blog/2023/06/21/ariadne-0-20-0#migrating-existing-projects-to-new-extensions" class="hash-link" aria-label="Direct link to Migrating existing projects to new extensions" title="Direct link to Migrating existing projects to new extensions">​</a></h3>
<p>To update your project to use new extensions:</p>
<ul>
<li>replace <code>OpenTracingSync</code> with <code>OpenTracing</code>.</li>
<li>replace <code>opentracing_extension_sync</code> with <code>opentracing_extension</code>.</li>
<li>replace <code>ApolloTracingSync</code> with <code>ApolloTracing</code>.</li>
</ul>
<p><code>ExtensionSync</code> base class was also removed from Ariadne. Please use <code>Extension</code> as base class for custom extensions. See the <a href="https://ariadnegraphql.org/server/middleware">middleware</a> document for the guide for new middlewares what support both async and sync execution.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="deprecated-open-tracing-and-apollo-tracing">Deprecated Open Tracing and Apollo Tracing<a href="https://ariadnegraphql.org/blog/2023/06/21/ariadne-0-20-0#deprecated-open-tracing-and-apollo-tracing" class="hash-link" aria-label="Direct link to Deprecated Open Tracing and Apollo Tracing" title="Direct link to Deprecated Open Tracing and Apollo Tracing">​</a></h2>
<p>The Open Tracing standard has been deprecated and is superseded by the Open Telemetry.</p>
<p>Apollo Tracing was deprecated by Apollo, with new a APM solution available but not supported by Ariadne.</p>
<p>Both of those extensions will be dropped in future release of Ariadne.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="new-features">New features<a href="https://ariadnegraphql.org/blog/2023/06/21/ariadne-0-20-0#new-features" class="hash-link" aria-label="Direct link to New features" title="Direct link to New features">​</a></h2>
<p>Ariadne's <code>ASGI</code> and <code>WSGI</code> applications now implement new <code>query_validator</code> option that enables customization of GraphQL query validation process.</p>
<p>Added <code>OpenTelemetry</code> and <code>opentelemetry_extension</code> extensions for enabling the Open Telemetry APM for GraphQL servers. Those are importable from <code>ariadne.tracing.opentelemetry</code>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="bugs-fixed">Bugs fixed<a href="https://ariadnegraphql.org/blog/2023/06/21/ariadne-0-20-0#bugs-fixed" class="hash-link" aria-label="Direct link to Bugs fixed" title="Direct link to Bugs fixed">​</a></h2>
<p>Fixed <code>ERROR</code> message in GraphQL-WS protocol having invalid payload type. This error occurred in a limited number of cases but was still a pain point for scenarios where Ariadne was used for GraphQL subscriptions.</p>
<p>Ariadne's GraphQL query cost validator did not handle the inline fragments. This was reported and fixed by our amazing friends at <a href="https://saleor.io/" target="_blank" rel="noopener noreferrer">Saleor</a>!</p>
<p><code>make_executable_schema</code> would raise an error if GraphQL SDL passed to it contained <code>field(arg: InputType = null)</code>. This was corrected.</p>
<p>GraphiQL2's default template shipped with Ariadne used development builds of React.js. This template was updated to use production builds instead.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="changelog">Changelog<a href="https://ariadnegraphql.org/blog/2023/06/21/ariadne-0-20-0#changelog" class="hash-link" aria-label="Direct link to Changelog" title="Direct link to Changelog">​</a></h2>
<ul>
<li>Dropped support for Python 3.7.</li>
<li>Added <code>OpenTelemetry</code> and <code>opentelemetry_extension</code> extension, importable form <code>ariadne.tracing.opentelemetry</code>.</li>
<li>Added <code>query_validator</code> option to ASGI and WSGI <code>GraphQL</code> applications that enables customization of query validation step.</li>
<li>Fixed <code>ERROR</code> message in GraphQL-WS protocol having invalid payload type.</li>
<li>Fixed query cost validator incorrect handling of inline fragments.</li>
<li>Fixed <code>make_executable_schema</code> error when <code>null</code> is used as default value for <code>input</code> typed field argument.</li>
<li>Updated default GraphiQL2 template to use production build of React.js.</li>
<li>Removed <code>ExtensionSync</code>. <code>Extension</code> now supports both async and sync contexts.</li>
<li>Removed <code>OpenTracingSync</code> and <code>opentracing_extension_sync</code>. <code>OpenTracing</code> and <code>opentracing_extension</code> now support both async and sync contexts.</li>
<li>Removed <code>ApolloTracingSync</code>. <code>ApolloTracing</code> now supports both async and sync contexts.</li>
</ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Introducing Ariadne GraphQL Proxy]]></title>
            <link>https://ariadnegraphql.org/blog/2023/06/15/ariadne-graphql-proxy</link>
            <guid>https://ariadnegraphql.org/blog/2023/06/15/ariadne-graphql-proxy</guid>
            <pubDate>Thu, 15 Jun 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Ariadne GraphQL Proxy is now available!]]></description>
            <content:encoded><![CDATA[<p>Ariadne GraphQL Proxy is now available!</p>
<p>Ariadne GraphQL Proxy is a Python toolkit for implementing GraphQL APIs that can combine local and remote schemas into single graph.</p>
<p>While this is a 0.1 release, plenty of utilities are already implemented:</p>
<ul>
<li>Query router that splits GraphQL queries from clients into a valid subqueries for upstream GraphQL servers.</li>
<li>Foreign keys and relations between schemas.</li>
<li>Caching framework for both resolvers and parts of queries.</li>
<li>Functions for schema manipulation that enable adding, replacing and removing existing GraphQL types, fields and resolvers.</li>
</ul>
<p>Please note that Ariadne GraphQL Proxy is currently in technology preview stage.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="getting-the-code">Getting the code<a href="https://ariadnegraphql.org/blog/2023/06/15/ariadne-graphql-proxy#getting-the-code" class="hash-link" aria-label="Direct link to Getting the code" title="Direct link to Getting the code">​</a></h2>
<p>Ariadne GraphQL Proxy from PyPi:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">pip install ariadne-graphql-proxy</span><br></span></code></pre></div></div>
<p>Source code is hosted on <a href="https://github.com/mirumee/ariadne-graphql-proxy/tree/main" target="_blank" rel="noopener noreferrer">GitHub</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="minimal-proxy-example">Minimal proxy example<a href="https://ariadnegraphql.org/blog/2023/06/15/ariadne-graphql-proxy#minimal-proxy-example" class="hash-link" aria-label="Direct link to Minimal proxy example" title="Direct link to Minimal proxy example">​</a></h2>
<p>Following code uses Ariadne and Ariadne GraphQL Proxy to create simple pass-through proxy for remote GraphQL API:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> ariadne</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">asgi </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> GraphQL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> ariadne_graphql_proxy </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> ProxySchema</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> get_context_value</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">proxy_schema </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ProxySchema</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">proxy_schema</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">add_remote_schema</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"https://example.com/first-graphql/"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">final_schema </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> proxy_schema</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">get_final_schema</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">app </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> GraphQL</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    final_schema</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    context_value</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">get_context_value</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    root_value</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">proxy_schema</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">root_resolver</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="combining-schemas">Combining schemas<a href="https://ariadnegraphql.org/blog/2023/06/15/ariadne-graphql-proxy#combining-schemas" class="hash-link" aria-label="Direct link to Combining schemas" title="Direct link to Combining schemas">​</a></h2>
<p>If multiple schemas are added to <code>ProxySchema</code>, those are combined with latter fields replacing former's:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> ariadne</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">asgi </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> GraphQL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> ariadne_graphql_proxy </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> ProxySchema</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> get_context_value</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> myapp</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">schema </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> local_schema</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">proxy_schema </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ProxySchema</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">proxy_schema</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">add_remote_schema</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"https://example.com/first-graphql/"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">proxy_schema</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">add_remote_schema</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"https://example.com/other-graphql/"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">proxy_schema</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">add_schema</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">local_schema</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">final_schema </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> proxy_schema</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">get_final_schema</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">app </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> GraphQL</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    final_schema</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    context_value</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">get_context_value</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    root_value</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">proxy_schema</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">root_resolver</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre></div></div>
<p>Ariadne GraphQL Proxy will split root GraphQL query received from clients into separate queries it then will route to other services.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="caching-fields">Caching fields<a href="https://ariadnegraphql.org/blog/2023/06/15/ariadne-graphql-proxy#caching-fields" class="hash-link" aria-label="Direct link to Caching fields" title="Direct link to Caching fields">​</a></h2>
<p>Ariadne GraphQL Proxy implements two caching strategies for GraphQL resolvers:</p>
<ul>
<li>simple strategy where resolver's return value is cached based on its arguments.</li>
<li>strategy where resolver's return value is cached based on its arguments and queried subfields.</li>
</ul>
<p>Additional cache schemes based on contents of GraphQL context are also supported.</p>
<p>Basic caching framework with swap-able cache backends is implemented, with example in-memory backend.</p>
<p>See <a href="https://github.com/mirumee/ariadne-graphql-proxy/blob/main/GUIDE.md#cache-framework" target="_blank" rel="noopener noreferrer">cache guide</a> for more detailed information.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="relations">Relations<a href="https://ariadnegraphql.org/blog/2023/06/15/ariadne-graphql-proxy#relations" class="hash-link" aria-label="Direct link to Relations" title="Direct link to Relations">​</a></h2>
<p>Ariadne GraphQL Proxy supports relations spanning multiple schemas. Those relations enable one schema to define mutation returning a type which's definition lives in other schema.</p>
<p>See the <a href="https://github.com/mirumee/ariadne-graphql-proxy/blob/main/GUIDE.md#foreign-keys" target="_blank" rel="noopener noreferrer">foreign keys guide</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="further-reading">Further reading<a href="https://ariadnegraphql.org/blog/2023/06/15/ariadne-graphql-proxy#further-reading" class="hash-link" aria-label="Direct link to Further reading" title="Direct link to Further reading">​</a></h2>
<p>No full documentation for Ariadne GraphQL Proxy currently exists, but for available use cases see the <a href="https://github.com/mirumee/ariadne-graphql-proxy/blob/main/GUIDE.md" target="_blank" rel="noopener noreferrer">developer guide document</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="future-plans">Future plans<a href="https://ariadnegraphql.org/blog/2023/06/15/ariadne-graphql-proxy#future-plans" class="hash-link" aria-label="Direct link to Future plans" title="Direct link to Future plans">​</a></h2>
<p>This is only a beginning of the Ariadne GraphQL Proxy's story. We've got plenty of new ideas and insights from the experience of building the 0.1 version alone. In coming weeks and months we will experiment with different scenarios and setups to see what improvements and new features can be added to project.</p>
<p>We would also like to invite other Python developers to join us. We welcome feedback, bug reports and feature requests on <a href="https://github.com/mirumee/ariadne-graphql-proxy/issues" target="_blank" rel="noopener noreferrer">our GitHub</a>.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Ariadne Codegen 0.7]]></title>
            <link>https://ariadnegraphql.org/blog/2023/06/01/ariadne-codegen-0-7</link>
            <guid>https://ariadnegraphql.org/blog/2023/06/01/ariadne-codegen-0-7</guid>
            <pubDate>Thu, 01 Jun 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Ariadne Codegen 0.7 is now available!]]></description>
            <content:encoded><![CDATA[<p>Ariadne Codegen 0.7 is now available!</p>
<p>This release brings support for subscriptions, changes how fragments are represented in generated code, introduces the <code>ShorterResultsPlugin</code> plugin developed by our amazing community, and more features and fixes.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="subscriptions">Subscriptions<a href="https://ariadnegraphql.org/blog/2023/06/01/ariadne-codegen-0-7#subscriptions" class="hash-link" aria-label="Direct link to Subscriptions" title="Direct link to Subscriptions">​</a></h2>
<p>Version <code>0.7</code> introduces support for subscriptions. We generate them as async generators, which means that we don't support subscriptions when the generated client is not async (<code>async_client</code> is set to <code>false</code>).</p>
<p>For example, given the following operation:</p>
<div class="language-gql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-gql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">subscription GetUsersCounter {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  usersCounter</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<p>Generated client will have following method:</p>
<div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">get_users_counter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> AsyncIterator</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">GetUsersCounter</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        query </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> gql</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token triple-quoted-string string" style="color:#e3116c">"""</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">            subscription GetUsersCounter {</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">              usersCounter</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">            """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        variables</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">dict</span><span class="token punctuation" style="color:#393A34">[</span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token builtin">object</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> data </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">execute_ws</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">query</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">query</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> variables</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">variables</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">yield</span><span class="token plain"> GetUsersCounter</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">parse_obj</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre></div></div>
<p>Our default async base client uses <a href="https://github.com/python-websockets/websockets" target="_blank" rel="noopener noreferrer">websockets</a> package and implements <a href="https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md" target="_blank" rel="noopener noreferrer">graphql-transport-ws</a> subprotocol.</p>
<p>Required dependencies can be installed with pip:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ pip install ariadne-codegen[subscriptions]</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="fragments">Fragments<a href="https://ariadnegraphql.org/blog/2023/06/01/ariadne-codegen-0-7#fragments" class="hash-link" aria-label="Direct link to Fragments" title="Direct link to Fragments">​</a></h2>
<p>In previous versions of Codegen fragments were "unpacked" in queries. For example, given the following operations:</p>
<div class="language-gql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-gql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">query GetA {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  getTypeA {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ...FragmentA</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">query ListA {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  listTypeA {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ...FragmentA</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fragment FragmentA on TypeA {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  id</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<p>Generated <code>get_a.py</code> and <code>list_a.py</code> files had types looking like this:</p>
<div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># get_a.py</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">GetA</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">BaseModel</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    get_type_a</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"GetAGetTypeA"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Field</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">alias</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"GetTypeA"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">GetAGetTypeA</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">BaseModel</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token builtin">id</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><br></span></code></pre></div></div>
<div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># list_a.py</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">ListA</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">BaseModel</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    list_type_a</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> List</span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"ListAListTypeA"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Field</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">alias</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"ListTypeA"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">ListAListTypeA</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">BaseModel</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token builtin">id</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><br></span></code></pre></div></div>
<p>Both of these operations use the same <code>FragmentA</code> to represent <code>TypeA</code>, but generated models didn't reflect that.</p>
<p>To make working with fragments easier, in Ariadne Codegen 0.7 we are changing this behavior. Instead of unpacking fragments, we generate separate models from them and use those as mixins. The above operation will now result in 3 files being generated: <code>get_a.py</code>, <code>list_a.py</code>, and <code>fragments.py</code></p>
<div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># get_a.py</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">GetA</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">BaseModel</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    get_type_a</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"GetAGetTypeA"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Field</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">alias</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"GetTypeA"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">GetAGetTypeA</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">FragmentA</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">pass</span><br></span></code></pre></div></div>
<div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># list_a.py</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">ListA</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">BaseModel</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    list_type_a</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> List</span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"ListAListTypeA"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Field</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">alias</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"ListTypeA"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">ListAListTypeA</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">FragmentA</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">pass</span><br></span></code></pre></div></div>
<div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># fragments.py</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">FragmentA</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">BaseModel</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token builtin">id</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><br></span></code></pre></div></div>
<p>With this change you can use fragments as reusable types in your Python logic using the client, eg. <code>def process_a(a: FragmentA)...</code>. New <code>fragments.py</code> consists of fragments collected from all parsed operations.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="unions-and-interfaces">Unions and Interfaces<a href="https://ariadnegraphql.org/blog/2023/06/01/ariadne-codegen-0-7#unions-and-interfaces" class="hash-link" aria-label="Direct link to Unions and Interfaces" title="Direct link to Unions and Interfaces">​</a></h3>
<p>There is an exception from new fragments behaviour. If a fragment represents <code>Union</code> then we unpack it as before:</p>
<div class="language-gql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-gql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">query getAnimal {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  animal {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ...AnimalData</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fragment AnimalData on AnimalInterface {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ... on Dog {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dogField</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ... on Cat {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    catField</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<p>For the above fragment, this Python code will be generated:</p>
<div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">GetAnimal</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">BaseModel</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    animal</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Union</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string" style="color:#e3116c">"GetAnimalAnimalAnimalInterface"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"GetAnimalAnimalDog"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"GetAnimalAnimalCat"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Field</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">discriminator</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"typename__"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">GetAnimalAnimalAnimalInterface</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">BaseModel</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    typename__</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Literal</span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"AnimalInterface"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Fish"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Field</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">alias</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"__typename"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">GetAnimalAnimalDog</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">BaseModel</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    typename__</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Literal</span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"Dog"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Field</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">alias</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"__typename"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dog_field</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Field</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">alias</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"dogField"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">GetAnimalAnimalCat</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">BaseModel</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    typename__</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Literal</span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"Cat"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Field</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">alias</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"__typename"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    cat_field</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Field</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">alias</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"catField"</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="shorterresultsplugin"><code>ShorterResultsPlugin</code><a href="https://ariadnegraphql.org/blog/2023/06/01/ariadne-codegen-0-7#shorterresultsplugin" class="hash-link" aria-label="Direct link to shorterresultsplugin" title="Direct link to shorterresultsplugin">​</a></h2>
<p>In version 0.7 we are including <code>ShorterResultsPlugin</code> developed by our community. It can be used when operations have only one top-level field. For example, given the following operation:</p>
<div class="language-gql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-gql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">query GetUser($userId: ID!) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  user(id: $userId) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    id</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<p>From this operation, the generated method looks like this:</p>
<div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">get_user</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> user_id</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> GetUser</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    query </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> gql</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:#e3116c">"""</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">        query GetUser($userId: ID!) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">            user(id: $userId) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">                id</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token triple-quoted-string string" style="color:#e3116c">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    variables</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">dict</span><span class="token punctuation" style="color:#393A34">[</span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token builtin">object</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token string" style="color:#e3116c">"userId"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> user_id</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    response </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">execute</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">query</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">query</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> variables</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">variables</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">get_data</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">response</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> GetUser</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">parse_obj</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre></div></div>
<p>To get the value of <code>user</code>, we need to always get it by attribute, eg. <code>await get_user("1").user</code>. By using <code>ShorterResultsPlugin</code> our <code>get_user</code> returns the value of <code>user</code> directly.</p>
<div class="language-toml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-toml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[tool.ariadne-codegen]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">plugins = ["ariadne_codegen.contrib.shorter_results.ShorterResultsPlugin"]</span><br></span></code></pre></div></div>
<div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">get_user</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> user_id</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> GetUserUser</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> GetUser</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">parse_obj</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">user</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="discriminated-unions">Discriminated unions<a href="https://ariadnegraphql.org/blog/2023/06/01/ariadne-codegen-0-7#discriminated-unions" class="hash-link" aria-label="Direct link to Discriminated unions" title="Direct link to Discriminated unions">​</a></h2>
<p>To ensure that data is represented as a correct class we use pydantic's <a href="https://docs.pydantic.dev/dev-v2/usage/types/unions/#discriminated-unions-aka-tagged-unions" target="_blank" rel="noopener noreferrer">discriminated unions</a>. We add <code>__typename</code> to queries with unions and then use its value as <code>discriminator</code>. Let's take an example schema and query:</p>
<div class="language-gql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-gql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">type Query {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  animal: Animal!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">interface Animal {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name: String!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">type Dog implements Animal {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name: String!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  dogField: String!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">type Cat implements Animal {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name: String!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  catField: String!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">type Fish implements Animal {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name: String!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<div class="language-gql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-gql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">query GetAnimal {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  animal {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ... on Dog {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      dogField</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ... on Cat {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      catField</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<p>From this query and operation, we generate following types:</p>
<div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">GetAnimal</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">BaseModel</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    animal</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Union</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string" style="color:#e3116c">"GetAnimalAnimalAnimal"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"GetAnimalAnimalDog"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"GetAnimalAnimalCat"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Field</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">discriminator</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"typename__"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">GetAnimalAnimalAnimal</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">BaseModel</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    typename__</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Literal</span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"Animal"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Fish"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Field</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">alias</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"__typename"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">GetAnimalAnimalDog</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">BaseModel</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    typename__</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Literal</span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"Dog"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Field</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">alias</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"__typename"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dog_field</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Field</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">alias</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"dogField"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">GetAnimalAnimalCat</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">BaseModel</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    typename__</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Literal</span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"Cat"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Field</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">alias</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"__typename"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    cat_field</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Field</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">alias</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"catField"</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre></div></div>
<p>We added <code>typename__</code> to this query, and by its value pydantic determines which model to choose.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="leading-underscores">Leading underscores<a href="https://ariadnegraphql.org/blog/2023/06/01/ariadne-codegen-0-7#leading-underscores" class="hash-link" aria-label="Direct link to Leading underscores" title="Direct link to Leading underscores">​</a></h2>
<p>Ariadne Codegen 0.7 will remove leading <code>_</code> from field names. Fields with <code>_</code> are ignored by pydantic and it is impossible to save the value of such fields.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="removal-of-mixin-directive-from-operation-sent-to-a-server">Removal of <code>mixin</code> directive from operation sent to a server<a href="https://ariadnegraphql.org/blog/2023/06/01/ariadne-codegen-0-7#removal-of-mixin-directive-from-operation-sent-to-a-server" class="hash-link" aria-label="Direct link to removal-of-mixin-directive-from-operation-sent-to-a-server" title="Direct link to removal-of-mixin-directive-from-operation-sent-to-a-server">​</a></h2>
<p>We support a custom <code>mixin</code> directive, which allows extending of generated types. In 0.7 we are removing it from the operation string included in generated client's methods. This directive is only used in the process of generation and caused servers to return errors because of an unknown directive.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="process_schema-plugin-hook"><code>process_schema</code> plugin hook<a href="https://ariadnegraphql.org/blog/2023/06/01/ariadne-codegen-0-7#process_schema-plugin-hook" class="hash-link" aria-label="Direct link to process_schema-plugin-hook" title="Direct link to process_schema-plugin-hook">​</a></h2>
<p>Plugins can now define a <code>process_schema</code> hook to change schema before Codegen uses it for generation. From now on we allow invalid schemas to be parsed from files or URLs, and then we call this plugin hook. After <code>process_schema</code> is finished, the processed schema must pass <code>graphql.assert_valid_schema</code> validation.</p>
<p>For example, it can be used to add Apollo Federation directives definitions:</p>
<div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">MyPlugin</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">process_schema</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> schema</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> GraphQLSchema</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> GraphQLSchema</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        extends_directive_def </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> GraphQLDirective</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        schema</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">directives </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">extends_directive_def</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> schema</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="changelog">Changelog<a href="https://ariadnegraphql.org/blog/2023/06/01/ariadne-codegen-0-7#changelog" class="hash-link" aria-label="Direct link to Changelog" title="Direct link to Changelog">​</a></h2>
<ul>
<li>Added support for subscriptions as async generators.</li>
<li>Changed how fragments are handled to generate separate module with fragments as mixins.</li>
<li>Fixed <code>ResultTypesGenerator</code> to trigger <code>generate_result_class</code> for each result model.</li>
<li>Changed processing of models fields to trim leading underscores.</li>
<li>Added <code>ShorterResultsPlugin</code> to standard plugins.</li>
<li>Fixed handling of inline fragments inside other fragments.</li>
<li>Changed generated unions to use pydantic's discriminated unions feature.</li>
<li>Replaced HTTPX's <code>json=</code> serializer for query payloads with pydantic's <code>pydantic_encoder</code>.</li>
<li>Removed <code>mixin</code> directive from operation string sent to server.</li>
<li>Fixed <code>ShorterResultsPlugin</code> that generated faulty code for discriminated unions.</li>
<li>Changed generator to ignore unused fragments which should be unpacked in queries.</li>
<li>Changed type hints for parse and serialize methods of scalars to <code>typing.Any</code>.</li>
<li>Added <code>process_schema</code> plugin hook.</li>
</ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Ariadne Codegen 0.6]]></title>
            <link>https://ariadnegraphql.org/blog/2023/04/18/ariadne-codegen-0-6</link>
            <guid>https://ariadnegraphql.org/blog/2023/04/18/ariadne-codegen-0-6</guid>
            <pubDate>Tue, 18 Apr 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Ariadne Codegen 0.6 has been released!]]></description>
            <content:encoded><![CDATA[<p>Ariadne Codegen 0.6 has been released!</p>
<p>This release brings further improvements and fixes to issues reported to us by our amazing community. It also adds <code>process_name</code> plugin hook as an escape hatch for developers not happy with Python names created for GraphQL schema items.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="changed-scalars-setting">Changed scalars setting<a href="https://ariadnegraphql.org/blog/2023/04/18/ariadne-codegen-0-6#changed-scalars-setting" class="hash-link" aria-label="Direct link to Changed scalars setting" title="Direct link to Changed scalars setting">​</a></h2>
<p>In previous versions of Codegen custom scalars were configured using two callables and a a module to import them from:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">serialize = "serialize_datetime"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">parse = "parse_datetime"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import = "datetime_scalar"</span><br></span></code></pre></div></div>
<p>Codegen 0.6 simplifies this to two full paths to callables:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">serialize = "datetime_scalar.serialize_datetime"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">parse = "datetime_scalar.parse_datetime"</span><br></span></code></pre></div></div>
<p>Old approach is still supported but is considered deprecated and will stop working in future release.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="support-for-graphql-names-that-are-python-keywords">Support for GraphQL names that are Python keywords<a href="https://ariadnegraphql.org/blog/2023/04/18/ariadne-codegen-0-6#support-for-graphql-names-that-are-python-keywords" class="hash-link" aria-label="Direct link to Support for GraphQL names that are Python keywords" title="Direct link to Support for GraphQL names that are Python keywords">​</a></h2>
<p>Ariadne Codegen 0.6 will append <code>_</code> to generated Python names that would be valid Python keywords otherwise.</p>
<p>For example, given following type:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">type Example {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    in: String</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<p>The <code>in</code> field will be represented as following declaration in generated Python code:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">MyExampleResult</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    in_</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Optional</span><span class="token punctuation" style="color:#393A34">[</span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Field</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">alias</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"in"</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="unset-and-none">Unset and <code>None</code><a href="https://ariadnegraphql.org/blog/2023/04/18/ariadne-codegen-0-6#unset-and-none" class="hash-link" aria-label="Direct link to unset-and-none" title="Direct link to unset-and-none">​</a></h2>
<p>A lot of GraphQL servers differentiate between inputs fields not being set and them being set to empty value (<code>None</code>/<code>null</code>).</p>
<p>Ariadne Codegen 0.6 introduces new <code>Unset</code> type and defaults to not setting optional fields on inputs sent in queries <code>variables</code>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="process_name-plugin-hook"><code>process_name</code> plugin hook<a href="https://ariadnegraphql.org/blog/2023/04/18/ariadne-codegen-0-6#process_name-plugin-hook" class="hash-link" aria-label="Direct link to process_name-plugin-hook" title="Direct link to process_name-plugin-hook">​</a></h2>
<p>Plugins can now define <code>process_name</code> hook to customize the generation of Python names for schema items:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> typing </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> Optional</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> graphql </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> Node</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ObjectTypeDefinitionNode</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">MyPlugin</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">process_name</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> node</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Optional</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">Node</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">None</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token builtin">isinstance</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">node</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ObjectTypeDefinitionNode</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic"># return custom name for object type</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> name  </span><span class="token comment" style="color:#999988;font-style:italic"># return name generated by from Ariadne Codegen</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="changelog">Changelog<a href="https://ariadnegraphql.org/blog/2023/04/18/ariadne-codegen-0-6#changelog" class="hash-link" aria-label="Direct link to Changelog" title="Direct link to Changelog">​</a></h2>
<ul>
<li>Changed logic how custom scalar imports are generated. Deprecated <code>import_</code> key.</li>
<li>Added escaping of GraphQL names which are Python keywords by appending <code>_</code> to them.</li>
<li>Fixed parsing of list variables.</li>
<li>Changed base clients to remove unset arguments and input fields from variables payload.</li>
<li>Added <code>process_name</code> plugin hook.</li>
</ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Ariadne Codegen 0.5]]></title>
            <link>https://ariadnegraphql.org/blog/2023/04/05/ariadne-codegen-0-5</link>
            <guid>https://ariadnegraphql.org/blog/2023/04/05/ariadne-codegen-0-5</guid>
            <pubDate>Wed, 05 Apr 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Ariadne Codegen 0.5 is now available!]]></description>
            <content:encoded><![CDATA[<p>Ariadne Codegen 0.5 is now available!</p>
<p>This release brings multiple bunch of new options and improvements to the <code>ariande-codegen</code> command.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="disabling-ssl-verification-for-remote-schemas">Disabling SSL verification for remote schemas<a href="https://ariadnegraphql.org/blog/2023/04/05/ariadne-codegen-0-5#disabling-ssl-verification-for-remote-schemas" class="hash-link" aria-label="Direct link to Disabling SSL verification for remote schemas" title="Direct link to Disabling SSL verification for remote schemas">​</a></h2>
<p>New <code>remote_schema_verify_ssl</code> option can now be used to control SSL certificate verification during the remote schema download.</p>
<p>This option is enabled by default and should only be disabled with good reasons, like when you are running calls over the internal network that uses self-signed certificates.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="support-for-custom-names-of-operation-types">Support for custom names of operation types<a href="https://ariadnegraphql.org/blog/2023/04/05/ariadne-codegen-0-5#support-for-custom-names-of-operation-types" class="hash-link" aria-label="Direct link to Support for custom names of operation types" title="Direct link to Support for custom names of operation types">​</a></h2>
<p><code>ariadne-codegen</code> previously assumed that root types in GraphQL schema are always named <code>Query</code> and <code>Mutation</code>, but we were informed that this is not always the case as for example <a href="https://hasura.io/" target="_blank" rel="noopener noreferrer">Hasura</a> defaults to <code>query_root</code> and <code>mutation_root</code> instead.</p>
<p>Starting with 0.5 release operation roots are instead resolved from <code>Schema</code> types's <code>query</code> and <code>mutation</code> fields.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="generating-python-declarations-for-graphql-schemas">Generating Python declarations for GraphQL schemas<a href="https://ariadnegraphql.org/blog/2023/04/05/ariadne-codegen-0-5#generating-python-declarations-for-graphql-schemas" class="hash-link" aria-label="Direct link to Generating Python declarations for GraphQL schemas" title="Direct link to Generating Python declarations for GraphQL schemas">​</a></h2>
<p><code>ariadne-codegen</code> has new <code>graphqlschema</code> mode which generates a Python file containing complete declaration of GraphQL schema as <code>graphql.GraphQLSchema</code> instance.</p>
<p>This schema can be further converted into a string using the <code>graphql.print_schema</code> utility.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="unlocked-dependencies-used-in-development">Unlocked dependencies used in development<a href="https://ariadnegraphql.org/blog/2023/04/05/ariadne-codegen-0-5#unlocked-dependencies-used-in-development" class="hash-link" aria-label="Direct link to Unlocked dependencies used in development" title="Direct link to Unlocked dependencies used in development">​</a></h2>
<p>Versions of <code>black</code>, <code>isort</code>, <code>autoflake</code> and other dependencies used by code generation logic as final processing step were previously pinned, forcing projects that used <code>ariadne-codegen</code> as their dependency to pin those themselves.</p>
<p>We've unpinned those packages versions in <code>ariadne-codegen</code>, assuming that its better for project owners do use <code>ariadne-codegen</code> version used by them compatible with their dev deps than for us to force them into specific versions.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="changelog">Changelog<a href="https://ariadnegraphql.org/blog/2023/04/05/ariadne-codegen-0-5#changelog" class="hash-link" aria-label="Direct link to Changelog" title="Direct link to Changelog">​</a></h2>
<ul>
<li>Added generation of GraphQL schema's Python representation.</li>
<li>Fixed annotations for lists.</li>
<li>Fixed support of custom operation types names.</li>
<li>Unlocked versions of black, isort, autoflake and dev dependencies</li>
<li>Added <code>remote_schema_verify_ssl</code> option.</li>
<li>Changed how default values for inputs are generated to handle potential cycles.</li>
<li>Fixed <code>BaseModel</code> incorrectly calling <code>parse</code> and <code>serialize</code> methods on entire list instead of its items for <code>List[Scalar]</code>.</li>
</ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Ariadne 0.19.1]]></title>
            <link>https://ariadnegraphql.org/blog/2023/03/28/ariadne-0-19-1</link>
            <guid>https://ariadnegraphql.org/blog/2023/03/28/ariadne-0-19-1</guid>
            <pubDate>Tue, 28 Mar 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Ariadne 0.19.1 has been released.]]></description>
            <content:encoded><![CDATA[<p>Ariadne 0.19.1 has been released.</p>
<p>0.19.1 is a bugfix release that includes <code>graphql</code> files with definitions required by Apollo Federation component, which were missing from 0.19 release.</p>]]></content:encoded>
        </item>
    </channel>
</rss>