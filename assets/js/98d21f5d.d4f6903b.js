"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["81577"],{73409:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>r,toc:()=>c,default:()=>m,metadata:()=>s,assets:()=>l,contentTitle:()=>a});var s=JSON.parse('{"id":"extensions","title":"Extension system","description":"Ariadne implements simple extension system that allows developers to inject custom python logic into the query execution process.","source":"@site/server_versioned_docs/version-0.9.0/extensions.md","sourceDirName":".","slug":"/extensions","permalink":"/server/0.9.0/extensions","draft":false,"unlisted":false,"tags":[],"version":"0.9.0","frontMatter":{"id":"extensions","title":"Extension system"},"sidebar":"tutorialSidebar","previous":{"title":"Other technologies","permalink":"/server/0.9.0/other-integrations"},"next":{"title":"Middleware","permalink":"/server/0.9.0/middleware"}}'),i=t(74848),o=t(84429);let r={id:"extensions",title:"Extension system"},a,l={},c=[{value:"Enabling extensions",id:"enabling-extensions",level:2},{value:"Custom extension example",id:"custom-extension-example",level:2},{value:"WSGI extension implementation",id:"wsgi-extension-implementation",level:2}];function d(e){let n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Ariadne implements simple extension system that allows developers to inject custom python logic into the query execution process."}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"At the moment adding extensions to subscriptions is not supported."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"enabling-extensions",children:"Enabling extensions"}),"\n",(0,i.jsxs)(n.p,{children:["To enable extensions, initialize ",(0,i.jsx)(n.code,{children:"GraphQL"})," app with ",(0,i.jsx)(n.code,{children:"extensions"})," parameter. This parameter accepts list of ",(0,i.jsx)(n.a,{href:"/server/0.9.0/types-reference#extension",children:"extensions"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from ariadne.asgi import GraphQL\n\nfrom .schema import schema\nfrom .extensions import MyExtension\n\n\napp = GraphQL(\n    schema,\n    extensions=[MyExtension]\n)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Alternatively, if your extension depends on request or should be enabled conditionally, you can provide callable that will return extensions that should be used:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from ariadne.asgi import GraphQL\n\nfrom .schema import schema\nfrom .extensions import MyExtension\n\n\ndef get_extensions(request, context):\n    if request.headers.get("x-enable-my-extension"):\n        return [MyExtension]\n    return None\n\n\napp = GraphQL(\n    schema,\n    extensions=get_extensions\n)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"custom-extension-example",children:"Custom extension example"}),"\n",(0,i.jsx)(n.p,{children:"Let's create simple extension that measures query execution time, and appends this time to query's result."}),"\n",(0,i.jsxs)(n.p,{children:["All extensions should extend special base class named ",(0,i.jsx)(n.a,{href:"/server/0.9.0/types-reference#extension",children:(0,i.jsx)(n.code,{children:"Extension"})}),", importable from ",(0,i.jsx)(n.code,{children:"ariadne.types"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from ariadne.types import Extension\n\n\nclass QueryExecutionTimeExtension(Extension):\n    ...\n"})}),"\n",(0,i.jsx)(n.p,{children:"Our extension will measure the query execution time. This means we need to measure the time of two events, request start and finish:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import time\n\nfrom ariadne.types import Extension\n\n\nclass QueryExecutionTimeExtension(Extension):\n    def __init__(self):\n        self.start_timestamp = None\n        self.end_timestamp = None\n\n    def request_started(self, context):\n        self.start_timestamp = time.perf_counter_ns()\n\n    def request_finished(self, context):\n        self.end_timestamp = time.perf_counter_ns()\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["See ",(0,i.jsx)(n.a,{href:"/server/0.9.0/types-reference#extension",children:(0,i.jsx)(n.code,{children:"Extension"})})," reference for the list of available events."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Lastly, extension has to define the ",(0,i.jsx)(n.code,{children:"format"})," method that will be called by the extension system to obtain data that should be included in GraphQL result:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import time\n\nfrom ariadne.types import Extension\n\n\nclass QueryExecutionTimeExtension(Extension):\n    def __init__(self):\n        self.start_timestamp = None\n        self.end_timestamp = None\n\n    def request_started(self, context):\n        self.start_timestamp = time.perf_counter_ns()\n\n    def request_finished(self, context):\n        self.end_timestamp = time.perf_counter_ns()\n\n    def format(self, context):\n        if self.start_timestamp and self.end_timestamp:\n            return {\n                "execution": self.start_timestamp - self.end_timestamp\n            }\n'})}),"\n",(0,i.jsx)(n.h2,{id:"wsgi-extension-implementation",children:"WSGI extension implementation"}),"\n",(0,i.jsxs)(n.p,{children:["If your GraphQL server is deployed using WSGI, you can't use ",(0,i.jsx)(n.code,{children:"Extension"})," as base class for your extensions. Use ",(0,i.jsx)(n.code,{children:"ExtensionSync"})," which implements a synchronous ",(0,i.jsx)(n.code,{children:"resolve"})," instead:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from ariadne.types import ExtensionSync as Extension\n\n\nclass QueryExecutionTimeExtension(Extension):\n    ...\n"})})]})}function m(e={}){let{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},84429:function(e,n,t){t.d(n,{R:()=>r,x:()=>a});var s=t(96540);let i={},o=s.createContext(i);function r(e){let n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);