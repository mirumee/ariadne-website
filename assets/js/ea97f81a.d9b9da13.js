"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["13294"],{81549:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>a,toc:()=>h,default:()=>d,metadata:()=>s,assets:()=>l,contentTitle:()=>o});var s=JSON.parse('{"id":"enums","title":"Enumeration types","description":"Ariadne supports GraphQL enumeration types which by default are represented as strings in Python logic:","source":"@site/server_versioned_docs/version-0.23/enums.md","sourceDirName":".","slug":"/enums","permalink":"/server/0.23/enums","draft":false,"unlisted":false,"tags":[],"version":"0.23","frontMatter":{"id":"enums","title":"Enumeration types"},"sidebar":"tutorialSidebar","previous":{"title":"Custom scalars","permalink":"/server/0.23/scalars"},"next":{"title":"Union types","permalink":"/server/0.23/unions"}}'),r=t(74848),i=t(84429);let a={id:"enums",title:"Enumeration types"},o,l={},h=[{value:"Associating GraphQL and Python enums",id:"associating-graphql-and-python-enums",level:2},{value:"Mapping Python enums by custom name",id:"mapping-python-enums-by-custom-name",level:2},{value:"Mapping GraphQL enums to dicts",id:"mapping-graphql-enums-to-dicts",level:2}];function u(e){let n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Ariadne supports GraphQL ",(0,r.jsx)(n.a,{href:"https://graphql.org/learn/schema/#enumeration-types",children:"enumeration types"})," which by default are represented as strings in Python logic:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from ariadne import QueryType\nfrom db import get_users\n\ntype_defs = """\n    type Query{\n        users(status: UserStatus): [User]!\n    }\n\n    enum UserStatus{\n        ACTIVE\n        INACTIVE\n        BANNED\n    }\n"""\n\nquery = QueryType()\n\n@query.field("users")\ndef resolve_users(*_, status):\n    # Value of UserStatus passed to resolver is represented as Python string\n    if status == "ACTIVE":\n        return get_users(is_active=True)\n    if status == "INACTIVE":\n        return get_users(is_active=False)\n    if status == "BANNED":\n        return get_users(is_banned=True)\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The above example defines a resolver that returns a list of users based on user status, defined using the ",(0,r.jsx)(n.code,{children:"UserStatus"})," enumerable from the schema."]}),"\n",(0,r.jsxs)(n.p,{children:["There is no need for resolver to validate if ",(0,r.jsx)(n.code,{children:"status"})," value belongs to the enum. This is done by GraphQL during query execution. Below query will produce an error:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-graphql",children:"{\n    users(status: TEST)\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["GraphQL failed to find ",(0,r.jsx)(n.code,{children:"TEST"})," in ",(0,r.jsx)(n.code,{children:"UserStatus"}),", and returned an error without calling ",(0,r.jsx)(n.code,{children:"resolve_users"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "error": {\n        "errors": [\n            {\n                "message": "Argument \\"status\\" has invalid value TEST.\\nExpected type \\"UserStatus\\", found TEST.",\n                "locations": [\n                    {\n                        "line": 2,\n                        "column": 14\n                    }\n                ]\n            }\n        ]\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"associating-graphql-and-python-enums",children:"Associating GraphQL and Python enums"}),"\n",(0,r.jsx)(n.p,{children:"By default enum values are represented as Python strings, but Ariadne also supports associating GraphQL enums with their Python counterparts."}),"\n",(0,r.jsx)(n.p,{children:'Imagine posts on a social site that can have weights like "standard", "pinned" and "promoted":'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-graphql",children:"type Post {\n    weight: PostWeight\n}\n\nenum PostWeight {\n    STANDARD\n    PINNED\n    PROMOTED\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"In the database, the application may store those weights as integers from 0 to 2. You can implement a custom resolver logic transforming GraphQL representation to the integer but you would have to remember to use this boilerplate in every resolver."}),"\n",(0,r.jsxs)(n.p,{children:["Instead, you can define Python version of this enum, and pass it directly to the ",(0,r.jsx)(n.code,{children:"make_executable_schema"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import enum\n\nfrom ariadne import QueryType, gql, make_executable_schema\n\ntype_defs = gql(\n    """\n    type Query = {\n        post: Post!\n    }\n\n    type Post {\n        weight: PostWeight\n    }\n\n    enum PostWeight {\n        STANDARD\n        PINNED\n        PROMOTED\n    }\n    """\n)\n\n\n# Python enum sharing name with GraphQL enum\nclass PostWeight(enum.IntEnum):\n    STANDARD = 0\n    PINNED = 1\n    PROMOTED = 2\n\n\n# Simple query type that returns post with only weight field\nquery_type = QueryType()\n\n@query_type.field("post")\ndef resolve_post(*_):\n    return {"weight": PostWeight.PINNED}\n\n\nschema = make_executable_schema(type_defs, query_type, PostWeight)\n'})}),"\n",(0,r.jsxs)(n.p,{children:["This will make the GraphQL server automatically translate ",(0,r.jsx)(n.code,{children:"PostWeight"})," between their GraphQL and Python values:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If ",(0,r.jsx)(n.code,{children:"PostWeight"})," enum's value is passed in argument to the GraphQL field, Python resolver will be called with ",(0,r.jsx)(n.code,{children:"PostWeight"})," member, like ",(0,r.jsx)(n.code,{children:"PostWeight.PINNED"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["If Python resolver for field returning GraphQL enum returns Enum member this value will be converted into GraphQL enum. Eg. returning ",(0,r.jsx)(n.code,{children:"PostWeight.PROMOTED"})," from resolver will appear as ",(0,r.jsx)(n.code,{children:'"PROMOTED"'})," in GraphQL result)."]}),"\n",(0,r.jsxs)(n.li,{children:["If Python resolver for field returning GraphQL enum returns a value that's valid value of enum's member, this value will be converted into enum. Eg. returning ",(0,r.jsx)(n.code,{children:"1"})," from resolver will appear as ",(0,r.jsx)(n.code,{children:'"PINNED"'})," in GraphQL result)."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["In this example we've used ",(0,r.jsx)(n.code,{children:"IntEnum"}),", but custom enum can be any subtype of ",(0,r.jsx)(n.code,{children:"Enum"})," type."]}),"\n",(0,r.jsx)(n.h2,{id:"mapping-python-enums-by-custom-name",children:"Mapping Python enums by custom name"}),"\n",(0,r.jsxs)(n.p,{children:["In above example we've used Python enum ",(0,r.jsx)(n.code,{children:"PostWeight"})," to set Python values for GraphQL enum named ",(0,r.jsx)(n.code,{children:"PostWeight"}),". This worked because Ariadne tries to associate Python objects with their schema counterparts by their name."]}),"\n",(0,r.jsxs)(n.p,{children:["But what if enums names differ between GraphQL schema and Python? This is where ",(0,r.jsx)(n.code,{children:"EnumType"})," utility from ariadne becomes useful:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import enum\n\nfrom ariadne import EnumType, QueryType, gql, make_executable_schema\n\ntype_defs = gql(\n    """\n    type Query = {\n        post: Post!\n    }\n\n    type Post {\n        weight: PostWeightEnum\n    }\n\n    enum PostWeightEnum {\n        STANDARD\n        PINNED\n        PROMOTED\n    }\n    """\n)\n\n\n# Python enum sharing name with GraphQL enum\nclass PostWeight(enum.IntEnum):\n    STANDARD = 0\n    PINNED = 1\n    PROMOTED = 2\n\n\n# Simple query type that returns post with only weight field\nquery_type = QueryType()\n\n@query_type.field("post")\ndef resolve_post(*_):\n    return {"weight": PostWeight.PINNED}\n\n\nschema = make_executable_schema(\n    type_defs,\n    query_type,\n    # Wrap Python enum in EnumType to give it explicit name in GraphQL schema\n    EnumType("PostWeightEnum", PostWeight),\n)\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Ariadne will now know that ",(0,r.jsx)(n.code,{children:"PostWeightEnum"})," in GraphQL schema and ",(0,r.jsx)(n.code,{children:"PostWeight"})," enum in Python are the same type."]}),"\n",(0,r.jsx)(n.h2,{id:"mapping-graphql-enums-to-dicts",children:"Mapping GraphQL enums to dicts"}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.code,{children:"Enum"})," type is not available for your GraphQL enum, you can pass ",(0,r.jsx)(n.code,{children:"dict"})," to ",(0,r.jsx)(n.code,{children:"EnumType"}),"'s second argument:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from ariadne import EnumType\n\npost_weight = EnumType(\n    "PostWeight",\n    {\n        "STANDARD": 0,\n        "PINNED": 1,\n        "PROMOTED": 2,\n    },\n)\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import enum\n\nfrom ariadne import EnumType, QueryType, gql, make_executable_schema\n\ntype_defs = gql(\n    """\n    type Query = {\n        post: Post!\n    }\n\n    type Post {\n        weight: PostWeightEnum\n    }\n\n    enum PostWeightEnum {\n        STANDARD\n        PINNED\n        PROMOTED\n    }\n    """\n)\n\n\n# Python dict with Python values for GraphQL members\npost_weights = {\n    "STANDARD": 0,\n    "PINNED": 1,\n    "PROMOTED": 2,\n}\n\n\n# Simple query type that returns post with only weight field\nquery_type = QueryType()\n\n@query_type.field("post")\ndef resolve_post(*_):\n    return {"weight": 2}  # 2 will be returned as PROMOTED by GraphQL\n\n\nschema = make_executable_schema(\n    type_defs,\n    query_type,\n    # Wrap Python dict in EnumType to assignt its values to GraphQL dict\n    EnumType("PostWeightEnum", post_weights),\n)\n'})}),"\n",(0,r.jsx)(n.p,{children:"Conversion logic is mostly same as in case of Python enums:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If ",(0,r.jsx)(n.code,{children:"PostWeightEnum"})," value is passed in argument to the GraphQL field, Python resolver will be called with corresponding value from ",(0,r.jsx)(n.code,{children:"post_weights"})," dictionary, like ",(0,r.jsx)(n.code,{children:"2"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["If Python resolver for field returning GraphQL enum returns integer that is valid value in ",(0,r.jsx)(n.code,{children:"post_weights"}),", it will be converted into GraphQL enum. Eg. returning ",(0,r.jsx)(n.code,{children:"1"})," from resolver will appear as ",(0,r.jsx)(n.code,{children:'"PINNED"'})," in GraphQL result)."]}),"\n"]})]})}function d(e={}){let{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},84429:function(e,n,t){t.d(n,{R:()=>a,x:()=>o});var s=t(96540);let r={},i=s.createContext(r);function a(e){let n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);