"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["75336"],{2101:function(e,n,s){s.r(n),s.d(n,{frontMatter:()=>a,toc:()=>c,default:()=>u,metadata:()=>t,assets:()=>o,contentTitle:()=>l});var t=JSON.parse('{"id":"step-by-step-example","title":"Step-by-step example","description":"This example shows how ariadne-codegen can take a GraphQL schema and a set of queries, generate a fully typed Python client, and produce ready-to-use models for queries, mutations, and subscriptions.","source":"@site/client_versioned_docs/version-0.15.3/04-step-by-step-example.md","sourceDirName":".","slug":"/step-by-step-example","permalink":"/client/step-by-step-example","draft":false,"unlisted":false,"tags":[],"version":"0.15.3","sidebarPosition":4,"frontMatter":{"title":"Step-by-step example"},"sidebar":"tutorialSidebar","previous":{"title":"Using generated client","permalink":"/client/using-generated-client"},"next":{"title":"Custom operation builder","permalink":"/client/custom-operation-builder"}}'),i=s(74848),r=s(84429);let a={title:"Step-by-step example"},l="Step-by-Step example",o={},c=[{value:"Schema file",id:"schema-file",level:2},{value:"Queries/mutations/subscriptions file",id:"queriesmutationssubscriptions-file",level:2},{value:"Running",id:"running",level:2},{value:"Result",id:"result",level:2},{value:"Generated files",id:"generated-files",level:3},{value:"Client class",id:"client-class",level:3},{value:"Base client",id:"base-client",level:3},{value:"Base model",id:"base-model",level:3},{value:"Input types",id:"input-types",level:3},{value:"Enums",id:"enums",level:3},{value:"Query/mutation/subscription types",id:"querymutationsubscription-types",level:3},{value:"Fragments file",id:"fragments-file",level:3},{value:"Init file",id:"init-file",level:3},{value:"Using the generated client",id:"using-the-generated-client",level:2}];function d(e){let n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"step-by-step-example",children:"Step-by-Step example"})}),"\n",(0,i.jsxs)(n.p,{children:["This example shows how ",(0,i.jsx)(n.strong,{children:"ariadne-codegen"})," can take a GraphQL schema and a set of queries, generate a fully typed Python client, and produce ready-to-use models for queries, mutations, and subscriptions."]}),"\n",(0,i.jsx)(n.h2,{id:"schema-file",children:"Schema file"}),"\n",(0,i.jsxs)(n.p,{children:["We start with a GraphQL schema that defines queries, mutations, and subscriptions.\nThis schema includes ",(0,i.jsx)(n.code,{children:"User"})," types, input objects for creating users and setting preferences, and a ",(0,i.jsx)(n.code,{children:"Color"})," enum. It also shows how to use default values in input objects."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:'schema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\ntype Query {\n  users(country: String): [User!]!\n}\n\ntype Mutation {\n  userCreate(userData: UserCreateInput!): User\n  userPreferences(data: UserPreferencesInput): Boolean!\n  fileUpload(file: Upload!): Boolean!\n}\n\ntype Subscription {\n  usersCounter: Int!\n}\n\nscalar Upload\n\ninput UserCreateInput {\n  firstName: String\n  lastName: String\n  email: String!\n  favouriteColor: Color\n  location: LocationInput\n}\n\ninput LocationInput {\n  city: String\n  country: String\n}\n\ntype User {\n  id: ID!\n  firstName: String\n  lastName: String\n  email: String!\n  favouriteColor: Color\n  location: Location\n}\n\ntype Location {\n  city: String\n  country: String\n}\n\nenum Color {\n  BLACK\n  WHITE\n  RED\n  GREEN\n  BLUE\n  YELLOW\n}\n\ninput UserPreferencesInput {\n  luckyNumber: Int = 7\n  favouriteWord: String = "word"\n  colorOpacity: Float = 1.0\n  excludedTags: [String!] = ["offtop", "tag123"]\n  notificationsPreferences: NotificationsPreferencesInput! = {\n    receiveMails: true\n    receivePushNotifications: true\n    receiveSms: false\n    title: "Mr"\n  }\n}\n\ninput NotificationsPreferencesInput {\n  receiveMails: Boolean!\n  receivePushNotifications: Boolean!\n  receiveSms: Boolean!\n  title: String!\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"queriesmutationssubscriptions-file",children:"Queries/mutations/subscriptions file"}),"\n",(0,i.jsxs)(n.p,{children:["Next we define the operations we want to use: a mutation to create a user, queries to fetch all users or filter them by country, a subscription to count users in real time, and a mutation to upload a file.\nNotice that we also define fragments (",(0,i.jsx)(n.code,{children:"BasicUser"})," and ",(0,i.jsx)(n.code,{children:"UserPersonalData"}),") to reuse fields across queries."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"mutation CreateUser($userData: UserCreateInput!) {\n  userCreate(userData: $userData) {\n    id\n  }\n}\n\nquery ListAllUsers {\n  users {\n    id\n    firstName\n    lastName\n    email\n    location {\n      country\n    }\n  }\n}\n\nquery ListUsersByCountry($country: String) {\n  users(country: $country) {\n    ...BasicUser\n    ...UserPersonalData\n    favouriteColor\n  }\n}\n\nfragment BasicUser on User {\n  id\n  email\n}\n\nfragment UserPersonalData on User {\n  firstName\n  lastName\n}\n\nsubscription GetUsersCounter {\n  usersCounter\n}\n\nmutation uploadFile($file: Upload!) {\n  fileUpload(file: $file)\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"running",children:"Running"}),"\n",(0,i.jsxs)(n.p,{children:["To generate Python code, add a ",(0,i.jsx)(n.code,{children:"[tool.ariadne-codegen]"})," section to your ",(0,i.jsx)(n.code,{children:"pyproject.toml"})," with paths to the schema and queries files."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",children:'[tool.ariadne-codegen]\nschema_path = "schema.graphql"\nqueries_path = "queries.graphql"\n'})}),"\n",(0,i.jsx)(n.p,{children:"Run the command:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ ariadne-codegen\n"})}),"\n",(0,i.jsx)(n.p,{children:"This generates a Python package with a typed client and models."}),"\n",(0,i.jsx)(n.h2,{id:"result",children:"Result"}),"\n",(0,i.jsx)(n.h3,{id:"generated-files",children:"Generated files"}),"\n",(0,i.jsx)(n.p,{children:"The generated package includes a client, base classes, type definitions, and models for each query, mutation, and subscription:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"graphql_client/\n    __init__.py\n    async_base_client.py\n    base_model.py\n    client.py\n    create_user.py\n    enums.py\n    exceptions.py\n    fragments.py\n    get_users_counter.py\n    input_types.py\n    list_all_users.py\n    list_users_by_country.py\n    scalars.py\n    upload_file.py\n"})}),"\n",(0,i.jsx)(n.h3,{id:"client-class",children:"Client class"}),"\n",(0,i.jsxs)(n.p,{children:["The generated client inherits from ",(0,i.jsx)(n.code,{children:"AsyncBaseClient"})," and has async methods for each query, mutation, and subscription you defined.\nFor example, here is how ",(0,i.jsx)(n.code,{children:"create_user"}),", ",(0,i.jsx)(n.code,{children:"list_all_users"}),", ",(0,i.jsx)(n.code,{children:"list_users_by_country"}),", ",(0,i.jsx)(n.code,{children:"get_users_counter"}),", and ",(0,i.jsx)(n.code,{children:"upload_file"})," are implemented:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# graphql_client/client.py\n...\nclass Client(AsyncBaseClient):\n    async def create_user(...): ...\n    async def list_all_users(...): ...\n    async def list_users_by_country(...): ...\n    async def get_users_counter(...): ...\n    async def upload_file(...): ...\n"})}),"\n",(0,i.jsx)(n.p,{children:"Each method executes the corresponding GraphQL operation and returns a typed Pydantic model."}),"\n",(0,i.jsx)(n.h3,{id:"base-client",children:"Base client"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"async_base_client.py"})," contains the networking logic. It is copied from the file path you specify in ",(0,i.jsx)(n.code,{children:"base_client_file_path"})," and has to define a class named as in ",(0,i.jsx)(n.code,{children:"base_client_name"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"base-model",children:"Base model"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"base_model.py"})," defines a Pydantic-based ",(0,i.jsx)(n.code,{children:"BaseModel"})," class. All generated models inherit from this, ensuring validation and serialization work out of the box."]}),"\n",(0,i.jsx)(n.h3,{id:"input-types",children:"Input types"}),"\n",(0,i.jsxs)(n.p,{children:["Models generated from GraphQL input objects (like ",(0,i.jsx)(n.code,{children:"UserCreateInput"}),") are strongly typed and used as parameters in client methods."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# graphql_client/input_types.py\nclass UserCreateInput(BaseModel):\n    first_name: Optional[str]\n    last_name: Optional[str]\n    email: str\n    favourite_color: Optional[Color]\n    location: Optional["LocationInput"]\n'})}),"\n",(0,i.jsx)(n.h3,{id:"enums",children:"Enums"}),"\n",(0,i.jsxs)(n.p,{children:["GraphQL enums are converted into Python ",(0,i.jsx)(n.code,{children:"Enum"})," classes. They can be used directly in input types and queries."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# graphql_client/enums.py\nclass Color(str, Enum):\n    BLACK = "BLACK"\n    WHITE = "WHITE"\n    RED = "RED"\n    GREEN = "GREEN"\n    BLUE = "BLUE"\n    YELLOW = "YELLOW"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"querymutationsubscription-types",children:"Query/mutation/subscription types"}),"\n",(0,i.jsxs)(n.p,{children:["For each query, mutation, or subscription, a model is generated that mirrors the return type.\nFor example, here is the type for the ",(0,i.jsx)(n.code,{children:"CreateUser"})," mutation:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# graphql_client/create_user.py\nclass CreateUser(BaseModel):\n    user_create: Optional["CreateUserUserCreate"]\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Other operations like ",(0,i.jsx)(n.code,{children:"ListAllUsers"}),", ",(0,i.jsx)(n.code,{children:"ListUsersByCountry"}),", and ",(0,i.jsx)(n.code,{children:"GetUsersCounter"})," have their own generated models."]}),"\n",(0,i.jsx)(n.h3,{id:"fragments-file",children:"Fragments file"}),"\n",(0,i.jsx)(n.p,{children:"Fragments defined in your operations are generated as reusable Pydantic models that can be inherited by other result models."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# graphql_client/fragments.py\nclass BasicUser(BaseModel):\n    id: str\n    email: str\n\nclass UserPersonalData(BaseModel):\n    first_name: Optional[str]\n    last_name: Optional[str]\n"})}),"\n",(0,i.jsx)(n.h3,{id:"init-file",children:"Init file"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"__init__.py"})," file re-exports all generated classes so they can be imported easily."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# graphql_client/__init__.py\nfrom .client import Client\nfrom .create_user import CreateUser\nfrom .enums import Color\nfrom .fragments import BasicUser, UserPersonalData\n...\n"})}),"\n",(0,i.jsx)(n.h2,{id:"using-the-generated-client",children:"Using the generated client"}),"\n",(0,i.jsx)(n.p,{children:"Here is how you can use the generated client in your Python application. This shows instantiating the client and calling one of the generated methods."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import asyncio\nfrom graphql_client.client import Client\n\nasync def main():\n    client = Client(url="http://localhost:8000/graphql")\n    users = await client.list_all_users()\n    for user in users.users:\n        print(user.id, user.first_name, user.last_name, user.email)\n\nasyncio.run(main())\n'})})]})}function u(e={}){let{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},84429:function(e,n,s){s.d(n,{R:()=>a,x:()=>l});var t=s(96540);let i={},r=t.createContext(i);function a(e){let n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);