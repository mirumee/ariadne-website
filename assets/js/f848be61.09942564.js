"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["56586"],{98447:function(e,n,r){r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>d});var t=r(32192),o=r(74848),i=r(84429);let a={title:"Ariadne 0.2.0"},s,l={authorsImageUrls:[]},d=[{value:"Wait a minute, what\u2019s Ariadne?",id:"wait-a-minute-whats-ariadne",level:2},{value:"Feature parity with GraphQL.js version 14.0.2",id:"feature-parity-with-graphqljs-version-1402",level:2},{value:"New API",id:"new-api",level:2},{value:"Better interoperability with Apollo tools for developers",id:"better-interoperability-with-apollo-tools-for-developers",level:2},{value:"Setting the scene for 2019",id:"setting-the-scene-for-2019",level:2},{value:"Thank you!",id:"thank-you",level:2}];function h(e){let n={a:"a",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Making Python GraphQL better one release at a time\u2026"}),"\n",(0,o.jsx)(n.h2,{id:"wait-a-minute-whats-ariadne",children:"Wait a minute, what\u2019s Ariadne?"}),"\n",(0,o.jsx)(n.p,{children:"Ariadne is a library we\u2019ve created that enables Python developers to implement GraphQL servers using SDL for defining schema and keeping the amount of boilerplate minimal. It\u2019s the new kid on the block, but it\u2019s the only Python library that offers this approach to developing GraphQL APIs. If you\u2019ve been envious of what Apollo Server can do, we are happy to let you know it\u2019s the main source of inspiration for what we are doing."}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Version 0.2.0 of Aridane is now available"})," for installation from ",(0,o.jsx)(n.a,{href:"https://pypi.org/project/ariadne/",children:"pypi.org"}),", bringing plenty of goodies and improvements with it! We are doubling down for a better developer experience."]}),"\n",(0,o.jsxs)(n.p,{children:["To find more about Ariadne, ",(0,o.jsx)(n.a,{href:"https://github.com/mirumee/ariadne",children:"grab the code at GitHub"}),", or ",(0,o.jsx)(n.a,{href:"https://ariadne.readthedocs.io/",children:"see the docs"}),". But for now, let\u2019s dive into version 0.2.0:"]}),"\n",(0,o.jsx)(n.h2,{id:"feature-parity-with-graphqljs-version-1402",children:"Feature parity with GraphQL.js version 14.0.2"}),"\n",(0,o.jsxs)(n.p,{children:["Ariadne now has feature parity with GraphQL.js 14.0.2\u200A\u2014\u200Athe latest release of GraphQL reference implementation. This was achieved by updating the library\u2019s codebase to use ",(0,o.jsx)(n.a,{href:"https://github.com/graphql-python/graphql-core-next",children:"GraphQL-core-next"})," instead of GraphQL-core as its GraphQL implementation."]}),"\n",(0,o.jsx)(n.p,{children:"This GraphQL implementation was build using modern Python features and relies on asyncio for asynchronous query execution, meaning you can now use \u201Casync\u201D with your resolvers."}),"\n",(0,o.jsx)(n.p,{children:"Due to this change we\u2019ve also dropped support for Python 3.5 in Ariadne 0.2.0, now requiring Python 3.6 or 3.7."}),"\n",(0,o.jsx)(n.h2,{id:"new-api",children:"New API"}),"\n",(0,o.jsx)(n.p,{children:"We are strong believers that library design should be simple to learn, but strict enough to not leave much room for developer error. In Ariadne 0.1.0 We relied on dicts for mapping resolvers to schema\u200A\u2014\u200Aan idea we\u2019ve took directly from the Apollo-Server:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"def resolve_users():\n    # \u2026\n\nresolvers = {\n    \u201CQuery\u201D: {\n        \u201Cusers\u201D: resolve_users\n    }\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"This looked like a good idea at first: the pattern is proven and widely adopted in software; it uses basic Python types and is easy to memorize."}),"\n",(0,o.jsx)(n.p,{children:"However, as soon as we moved to larger APIs, we found an issue in this approach; because Python doesn\u2019t allow functions to be declared inside dicts, developers quickly end up with a file containing a number of function definitions followed by one big dict mapping those resolvers to their schema. Because that dict was usually out of their focus, a pattern started to emerge in which a developer would declare resolvers but forget to update the dict, thus not adding those resolvers to schema and surprising/confusing the dev."}),"\n",(0,o.jsx)(n.p,{children:"Ariadne 0.2.0 does away with this by introducing dedicated objects for mapping resolvers to GraphQL types:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from ariadne import ResolverMap\n\nquery = ResolverMap(\u201CQuery\u201D)\n\n@query.field(\u201Cusers\u201D)\ndef resolve_users():\n    # \u2026\n"})}),"\n",(0,o.jsx)(n.p,{children:"In this new approach the resolver can be mapped to a declared sample field. This creates a more natural order of things: type -> field -> resolver."}),"\n",(0,o.jsx)(n.p,{children:"As a bonus, ResolverMap also implements simple validation logic and will raise an error if a type or field doesn\u2019t exist in the schema."}),"\n",(0,o.jsxs)(n.p,{children:["Make sure to check the ",(0,o.jsx)(n.a,{href:"/server/resolvers",children:"docs"})," for more examples and information about API changes."]}),"\n",(0,o.jsx)(n.h2,{id:"better-interoperability-with-apollo-tools-for-developers",children:"Better interoperability with Apollo tools for developers"}),"\n",(0,o.jsxs)(n.p,{children:["Ariadne now supports loading schema from *.graphql files, enabling developers to use an ",(0,o.jsx)(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=apollographql.vscode-apollo",children:"Apollo GraphQL plugin for VS Code"})," when writing schema for their API."]}),"\n",(0,o.jsxs)(n.p,{children:["We\u2019ve also created a PR (already merged and released!) that supports marking strings in Python code as GraphQL using a simple ",(0,o.jsx)(n.code,{children:"gql()"})," function:"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"GQL syntax coloring in action",src:r(27705).A+"",width:"1030",height:"616"})}),"\n",(0,o.jsx)(n.p,{children:"It\u2019s now not only an awesome GraphQL tooling and a first-class development experience for Python developers, it\u2019s also a single set of tools that can now be shared by backend and frontend developers while working on the same project."}),"\n",(0,o.jsx)(n.p,{children:"We consider this a game-changer for software projects where a Python backend is developed together with a GraphQL frontend."}),"\n",(0,o.jsx)(n.h2,{id:"setting-the-scene-for-2019",children:"Setting the scene for 2019"}),"\n",(0,o.jsx)(n.p,{children:"The latest Ariadne release already has all the features required by real-world GraphQL API implementations\u2026 but we are not stopping there."}),"\n",(0,o.jsx)(n.p,{children:"It is our goal to make the Python GraphQL experience as great as Node.js GraphQL. To achieve this end, we will continue improving Ariadne to offer a better developer experience and solve the ever-greater problem of space:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Iterate on our documentation to show you how to use Ariadne and how to develop GraphQL servers using good practices and patterns"}),"\n",(0,o.jsx)(n.li,{children:"Deliver better abstractions for integration with existing server and framework libraries"}),"\n",(0,o.jsx)(n.li,{children:"Implement solutions for patterns and problems not specific to the GraphQL core, like query cost validators or connection types"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"We have some great things in the pipeline we can\u2019t wait to show you!"}),"\n",(0,o.jsx)(n.h2,{id:"thank-you",children:"Thank you!"}),"\n",(0,o.jsxs)(n.p,{children:["Thanks so much for you response and engagement since the release; it has surprised and motivated us. Ariadne is open source and developed on ",(0,o.jsx)(n.a,{href:"https://github.com/mirumee/ariadne/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22",children:"GitHub"}),"; we invite folk to give it a look and check out the issues marked with \u201Chelp wanted\u201D. PRs are very welcome!"]})]})}function p(e={}){let{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},27705:function(e,n,r){r.d(n,{A:()=>t});let t=r.p+"assets/images/gql-colors-gif-fea92ed2767f4becbd729a9b68ec3cb7.gif"},84429:function(e,n,r){r.d(n,{R:()=>a,x:()=>s});var t=r(96540);let o={},i=t.createContext(o);function a(e){let n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(i.Provider,{value:n},e.children)}},32192:function(e){e.exports=JSON.parse('{"permalink":"/blog/2019/01/11/ariadne-0-2-0","source":"@site/blog/2019-01-11-ariadne-0-2-0.md","title":"Ariadne 0.2.0","description":"Making Python GraphQL better one release at a time\u2026","date":"2019-01-11T00:00:00.000Z","tags":[],"readingTime":4.16,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne 0.2.0"},"unlisted":false,"prevItem":{"title":"Ariadne 0.3.0","permalink":"/blog/2019/04/08/ariadne-0-3-0"},"nextItem":{"title":"Ariadne 0.1.0","permalink":"/blog/2018/10/31/ariadne-0-1-0"}}')}}]);