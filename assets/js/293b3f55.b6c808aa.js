"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["14291"],{95935:function(e,n,s){s.r(n),s.d(n,{frontMatter:()=>i,toc:()=>l,default:()=>p,metadata:()=>t,assets:()=>c,contentTitle:()=>o});var t=JSON.parse('{"id":"asgi","title":"ASGI application","description":"Ariadne provides a GraphQL class that implements a production-ready ASGI application.","source":"@site/server_versioned_docs/version-0.24/asgi.md","sourceDirName":".","slug":"/asgi","permalink":"/server/0.24/asgi","draft":false,"unlisted":false,"tags":[],"version":"0.24","frontMatter":{"id":"asgi","title":"ASGI application"},"sidebar":"tutorialSidebar","previous":{"title":"Continuous security testing","permalink":"/server/0.24/continuous-security-testing"},"next":{"title":"WSGI application","permalink":"/server/0.24/wsgi"}}'),r=s(74848),a=s(84429);let i={id:"asgi",title:"ASGI application"},o,c={},l=[{value:"Using with an ASGI server",id:"using-with-an-asgi-server",level:2},{value:"Configuration options",id:"configuration-options",level:2},{value:"The <code>request</code> instance",id:"the-request-instance",level:2},{value:"Customizing JSON responses",id:"customizing-json-responses",level:2}];function d(e){let n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Ariadne provides a ",(0,r.jsx)(n.code,{children:"GraphQL"})," class that implements a production-ready ASGI application."]}),"\n",(0,r.jsx)(n.h2,{id:"using-with-an-asgi-server",children:"Using with an ASGI server"}),"\n",(0,r.jsx)(n.p,{children:"First create an application instance pointing it to the schema to serve:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# in myasgi.py\nimport os\n\nfrom ariadne import make_executable_schema\nfrom ariadne.asgi import GraphQL\nfrom mygraphql import type_defs, resolvers\n\nschema = make_executable_schema(type_defs, resolvers)\napplication = GraphQL(schema)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Then point an ASGI server such as uvicorn at the above instance."}),"\n",(0,r.jsx)(n.p,{children:"Example using uvicorn:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"$ uvicorn myasgi:application\n"})}),"\n",(0,r.jsx)(n.h2,{id:"configuration-options",children:"Configuration options"}),"\n",(0,r.jsxs)(n.p,{children:["See the ",(0,r.jsx)(n.a,{href:"/server/0.24/asgi-reference#constructor",children:"reference"}),"."]}),"\n",(0,r.jsxs)(n.h2,{id:"the-request-instance",children:["The ",(0,r.jsx)(n.code,{children:"request"})," instance"]}),"\n",(0,r.jsxs)(n.p,{children:["The ASGI application creates its own ",(0,r.jsx)(n.code,{children:"request"})," object, an instance of the ",(0,r.jsx)(n.code,{children:"Request"})," class from the ",(0,r.jsx)(n.a,{href:"https://github.com/encode/starlette/blob/0.36.1/starlette/requests.py#L199",children:"Starlette"}),". It's ",(0,r.jsx)(n.code,{children:"scope"})," and ",(0,r.jsx)(n.code,{children:"receive"})," attributes are populated from the received request."]}),"\n",(0,r.jsxs)(n.p,{children:["When writing the ",(0,r.jsx)(n.a,{href:"https://asgi.readthedocs.io/en/latest/specs/main.html#middleware",children:"ASGI middleware"}),", remember to rely on the ",(0,r.jsx)(n.code,{children:"request.scope"})," dict for storing additional data on the request object, instead of mutating the request object directly (like it's done in Django). For example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# This is wrong\nrequest.app_data\n\n# This is correct\nrequest.scope["app_data"]\n'})}),"\n",(0,r.jsx)(n.h2,{id:"customizing-json-responses",children:"Customizing JSON responses"}),"\n",(0,r.jsxs)(n.p,{children:["Ariadne's ASGI application uses ",(0,r.jsxs)(n.a,{href:"https://github.com/encode/starlette/blob/0.36.1/starlette/responses.py#L169",children:["Starlette's ",(0,r.jsx)(n.code,{children:"JSONResponse"})]})," for its JSON responses."]}),"\n",(0,r.jsx)(n.p,{children:"You can customize response creation logic by implementing a custom HTTP handler strategy for your ASGI GraphQL app."}),"\n",(0,r.jsxs)(n.p,{children:["To star, create a custom class extending the ",(0,r.jsx)(n.code,{children:"GraphQLHTTPHandler"})," from ",(0,r.jsx)(n.code,{children:"ariadne.asgi.handlers"})," package:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from ariadne.asgi.handlers import GraphQLHTTPHandler\n\n\nclass CustomGraphQLHTTPHandler(GraphQLHTTPHandler):\n    pass\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Next, implement a customized version of the ",(0,r.jsx)(n.a,{href:"/server/0.24/asgi-handlers-reference#create_json_response",children:(0,r.jsx)(n.code,{children:"create_json_response"})})," method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import json\nfrom http import HTTPStatus\n\nfrom ariadne.asgi.handlers import GraphQLHTTPHandler\nfrom starlette.requests import Request\nfrom starlette.responses import Response\n\n\nclass CustomGraphQLHTTPHandler(GraphQLHTTPHandler):\n    async def create_json_response(\n        self,\n        request: Request,  # pylint: disable=unused-argument\n        result: dict,\n        success: bool,\n    ) -> Response:\n        status_code = HTTPStatus.OK if success else HTTPStatus.BAD_REQUEST\n        content = json.dumps(\n            result,\n            ensure_ascii=False,\n            allow_nan=False,\n            indent=None,\n            separators=(",", ":"),\n        ).encode("utf-8")\n\n        return Response(\n            content,\n            status_code=status_code,\n            media_type="application/json"\n        )\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Finally, update the ",(0,r.jsx)(n.code,{children:"GraphQL"})," instance used in your project to use the ",(0,r.jsx)(n.code,{children:"CustomGraphQLHTTPHandler"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from ariadne.asgi import GraphQL\n\n# Rest of code...\n\napp = GraphQL(\n    schema,\n    http_handler=CustomGraphQLHTTPHandler(),\n)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Your ",(0,r.jsx)(n.code,{children:"GraphQL"})," will now use the ",(0,r.jsx)(n.code,{children:"CustomGraphQLHTTPHandler"})," strategy that we've just implemented to create JSON responses."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note"}),": the ",(0,r.jsx)(n.code,{children:"GraphQLHTTPHandler"})," class implements many other methods that can be customized through inheritance."]}),"\n",(0,r.jsxs)(n.p,{children:["See the ",(0,r.jsx)(n.a,{href:"/server/0.24/asgi-handlers-reference#graphqlhttphandler",children:"API reference"})," for a completed list."]}),"\n"]})]})}function p(e={}){let{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},84429:function(e,n,s){s.d(n,{R:()=>i,x:()=>o});var t=s(96540);let r={},a=t.createContext(r);function i(e){let n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);