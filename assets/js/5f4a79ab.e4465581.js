"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["62983"],{48341:function(e,n,s){s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var r=s(38873),t=s(74848),o=s(84429);let i={title:"Ariadne Codegen 0.6"},a,d={authorsImageUrls:[]},l=[{value:"Changed scalars setting",id:"changed-scalars-setting",level:2},{value:"Support for GraphQL names that are Python keywords",id:"support-for-graphql-names-that-are-python-keywords",level:2},{value:"Unset and <code>None</code>",id:"unset-and-none",level:2},{value:"<code>process_name</code> plugin hook",id:"process_name-plugin-hook",level:2},{value:"Changelog",id:"changelog",level:2}];function c(e){let n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Ariadne Codegen 0.6 has been released!"}),"\n",(0,t.jsxs)(n.p,{children:["This release brings further improvements and fixes to issues reported to us by our amazing community. It also adds ",(0,t.jsx)(n.code,{children:"process_name"})," plugin hook as an escape hatch for developers not happy with Python names created for GraphQL schema items."]}),"\n",(0,t.jsx)(n.h2,{id:"changed-scalars-setting",children:"Changed scalars setting"}),"\n",(0,t.jsx)(n.p,{children:"In previous versions of Codegen custom scalars were configured using two callables and a a module to import them from:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'serialize = "serialize_datetime"\nparse = "parse_datetime"\nimport = "datetime_scalar"\n'})}),"\n",(0,t.jsx)(n.p,{children:"Codegen 0.6 simplifies this to two full paths to callables:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'serialize = "datetime_scalar.serialize_datetime"\nparse = "datetime_scalar.parse_datetime"\n'})}),"\n",(0,t.jsx)(n.p,{children:"Old approach is still supported but is considered deprecated and will stop working in future release."}),"\n",(0,t.jsx)(n.h2,{id:"support-for-graphql-names-that-are-python-keywords",children:"Support for GraphQL names that are Python keywords"}),"\n",(0,t.jsxs)(n.p,{children:["Ariadne Codegen 0.6 will append ",(0,t.jsx)(n.code,{children:"_"})," to generated Python names that would be valid Python keywords otherwise."]}),"\n",(0,t.jsx)(n.p,{children:"For example, given following type:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"type Example {\n    in: String\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"in"})," field will be represented as following declaration in generated Python code:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class MyExampleResult:\n    in_: Optional[str] = Field(alias="in")\n'})}),"\n",(0,t.jsxs)(n.h2,{id:"unset-and-none",children:["Unset and ",(0,t.jsx)(n.code,{children:"None"})]}),"\n",(0,t.jsxs)(n.p,{children:["A lot of GraphQL servers differentiate between inputs fields not being set and them being set to empty value (",(0,t.jsx)(n.code,{children:"None"}),"/",(0,t.jsx)(n.code,{children:"null"}),")."]}),"\n",(0,t.jsxs)(n.p,{children:["Ariadne Codegen 0.6 introduces new ",(0,t.jsx)(n.code,{children:"Unset"})," type and defaults to not setting optional fields on inputs sent in queries ",(0,t.jsx)(n.code,{children:"variables"}),"."]}),"\n",(0,t.jsxs)(n.h2,{id:"process_name-plugin-hook",children:[(0,t.jsx)(n.code,{children:"process_name"})," plugin hook"]}),"\n",(0,t.jsxs)(n.p,{children:["Plugins can now define ",(0,t.jsx)(n.code,{children:"process_name"})," hook to customize the generation of Python names for schema items:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from typing import Optional\n\nfrom graphql import Node, ObjectTypeDefinitionNode\n\n\nclass MyPlugin:\n    def process_name(self, name: str, node: Optional[Node] = None) -> str:\n        if isinstance(node, ObjectTypeDefinitionNode):\n            ...  # return custom name for object type\n\n        return name  # return name generated by from Ariadne Codegen\n"})}),"\n",(0,t.jsx)(n.h2,{id:"changelog",children:"Changelog"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Changed logic how custom scalar imports are generated. Deprecated ",(0,t.jsx)(n.code,{children:"import_"})," key."]}),"\n",(0,t.jsxs)(n.li,{children:["Added escaping of GraphQL names which are Python keywords by appending ",(0,t.jsx)(n.code,{children:"_"})," to them."]}),"\n",(0,t.jsx)(n.li,{children:"Fixed parsing of list variables."}),"\n",(0,t.jsx)(n.li,{children:"Changed base clients to remove unset arguments and input fields from variables payload."}),"\n",(0,t.jsxs)(n.li,{children:["Added ",(0,t.jsx)(n.code,{children:"process_name"})," plugin hook."]}),"\n"]})]})}function p(e={}){let{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},84429:function(e,n,s){s.d(n,{R:()=>i,x:()=>a});var r=s(96540);let t={},o=r.createContext(t);function i(e){let n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(o.Provider,{value:n},e.children)}},38873:function(e){e.exports=JSON.parse('{"permalink":"/blog/2023/04/18/ariadne-codegen-0-6","source":"@site/blog/2023-04-18-ariadne-codegen-0-6.md","title":"Ariadne Codegen 0.6","description":"Ariadne Codegen 0.6 has been released!","date":"2023-04-18T00:00:00.000Z","tags":[],"readingTime":1.55,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne Codegen 0.6"},"unlisted":false,"prevItem":{"title":"Ariadne Codegen 0.7","permalink":"/blog/2023/06/01/ariadne-codegen-0-7"},"nextItem":{"title":"Ariadne Codegen 0.5","permalink":"/blog/2023/04/05/ariadne-codegen-0-5"}}')}}]);