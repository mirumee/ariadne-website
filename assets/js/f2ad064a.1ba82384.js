"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["46884"],{51385:function(e,n,r){r.r(n),r.d(n,{frontMatter:()=>o,toc:()=>d,default:()=>l,metadata:()=>t,assets:()=>c,contentTitle:()=>s});var t=JSON.parse('{"id":"open-tracing","title":"OpenTracing","description":"Deprecation notice: OpenTracing standard was superseded by OpenTelemetry and is considered deprecated. OpenTracing extension will be delete in a future version of Ariadne.","source":"@site/docs/server/open-tracing.md","sourceDirName":".","slug":"/open-tracing","permalink":"/server/next/open-tracing","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"open-tracing","title":"OpenTracing"},"sidebar":"tutorialSidebar","previous":{"title":"OpenTelemetry","permalink":"/server/next/open-telemetry"},"next":{"title":"Apollo Tracing","permalink":"/server/next/apollo-tracing"}}'),i=r(74848),a=r(84429);let o={id:"open-tracing",title:"OpenTracing"},s,c={},d=[{value:"Enabling OpenTracing in the API",id:"enabling-opentracing-in-the-api",level:2},{value:"Configuration options",id:"configuration-options",level:2},{value:"Filtering sensitive arguments data",id:"filtering-sensitive-arguments-data",level:3},{value:"Customizing root span name",id:"customizing-root-span-name",level:3}];function p(e){let n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Deprecation notice:"})," OpenTracing standard was superseded by ",(0,i.jsx)(n.a,{href:"/server/next/open-telemetry",children:"OpenTelemetry"})," and is considered deprecated. OpenTracing extension will be delete in a future version of Ariadne."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Ariadne provides an extension that implements the ",(0,i.jsx)(n.a,{href:"https://opentracing.io/",children:"OpenTracing"})," specification, making it easy to monitor GraphQL API performance and errors using popular APM tools like ",(0,i.jsx)(n.a,{href:"https://www.datadoghq.com/",children:"Datadog"})," or ",(0,i.jsx)(n.a,{href:"https://www.jaegertracing.io/",children:"Jaeger"}),"."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," for performance reasons OpenTracing extension excludes default resolvers."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"enabling-opentracing-in-the-api",children:"Enabling OpenTracing in the API"}),"\n",(0,i.jsxs)(n.p,{children:["To enable OpenTracing in your API, import the ",(0,i.jsx)(n.code,{children:"OpenTracingExtension"})," class from ",(0,i.jsx)(n.code,{children:"ariadne.contrib.tracing.opentracing"})," and pass it to your server ",(0,i.jsx)(n.code,{children:"extensions"})," option:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from ariadne.asgi import GraphQL\nfrom ariadne.asgi.handlers import GraphQLHTTPHandler\nfrom ariadne.contrib.tracing.opentracing import OpenTracingExtension\n\napp = GraphQL(\n    schema,\n    debug=True,\n    http_handler=GraphQLHTTPHandler(\n        extensions=[OpenTracingExtension],\n    ),\n)\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," If you don't have OpenTracing already configured in your project, you will need to install the ",(0,i.jsx)(n.a,{href:"https://github.com/opentracing/opentracing-python",children:(0,i.jsx)(n.code,{children:"opentracing-python"})})," package and ",(0,i.jsx)(n.a,{href:"https://opentracing.io/guides/python/tracers/",children:"configure tracer"})," for your APM solution."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"configuration-options",children:"Configuration options"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"ariadne.contrib.tracing.opentracing"})," module exports ",(0,i.jsx)(n.code,{children:"opentracing_extension"})," utility function that can be used to setup ",(0,i.jsx)(n.code,{children:"OpenTracingExtension"})," with custom options:"]}),"\n",(0,i.jsx)(n.h3,{id:"filtering-sensitive-arguments-data",children:"Filtering sensitive arguments data"}),"\n",(0,i.jsx)(n.p,{children:"By default all arguments field was resolved with are sent to the APM service. If your API fields have arguments for sensitive data like passwords or tokens, you will need to filter those before sending tracking data to the service."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"OpenTracingExtension"})," has configuration option named ",(0,i.jsx)(n.code,{children:"arg_filter"})," which accepts a function that extension will call with the copy of the dict of arguments previously passed to field's resolver."]}),"\n",(0,i.jsxs)(n.p,{children:["Here is an example defining custom filtering function named ",(0,i.jsx)(n.code,{children:"my_arg_filter"})," and using ",(0,i.jsx)(n.code,{children:"opentracing_extension"})," to setup OpenTracing with it:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from ariadne.asgi import GraphQL\nfrom ariadne.asgi.handlers import GraphQLHTTPHandler\nfrom ariadne.contrib.tracing import opentracing_extension\n\ndef my_arg_filter(args, info):\n    if "password" in args:\n        args["password"] = "[redacted]"\n    if "secret" in args:\n        args["secret"] = "[redacted]"\n    for key, value in args.items():\n        if isinstance(value, dict):\n            args[key] = my_arg_filter(value)\n        if isinstance(value, list):\n            args[key] = [my_arg_filter(v) for v in value]\n    return args\n\n\nschema = make_executable_schema(type_def, [query, mutation])\napp = GraphQL(\n    schema,\n    debug=True,\n    extensions=[\n        opentracing_extension(arg_filter=my_arg_filter),\n    ],\n    http_handler=GraphQLHTTPHandler(\n        extensions=[\n            opentracing_extension(arg_filter=my_arg_filter),\n        ],\n    ),\n)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"customizing-root-span-name",children:"Customizing root span name"}),"\n",(0,i.jsxs)(n.p,{children:["Ariadne uses ",(0,i.jsx)(n.code,{children:"GraphQL Operation"})," for root span's name. You can customize this name using the ",(0,i.jsx)(n.code,{children:"root_span_name"})," option:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from ariadne.asgi import GraphQL\nfrom ariadne.asgi.handlers import GraphQLHTTPHandler\nfrom ariadne.contrib.tracing import opentracing_extension\n\n\nschema = make_executable_schema(type_def, [query, mutation])\napp = GraphQL(\n    schema,\n    debug=True,\n    extensions=[\n        opentracing_extension(arg_filter=my_arg_filter),\n    ],\n    http_handler=GraphQLHTTPHandler(\n        extensions=[\n            opentracing_extension(root_span_name="Admin GraphQL"),\n        ],\n    ),\n)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["You can also have a dynamic name by passing a function to the ",(0,i.jsx)(n.code,{children:"root_span_name"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from ariadne.asgi import GraphQL\nfrom ariadne.asgi.handlers import GraphQLHTTPHandler\nfrom ariadne.contrib.tracing import opentracing_extension\n\n\ndef get_root_span_name(context) -> str:\n    return context.get("operationName") or "GraphQL Mutation"\n\n\nschema = make_executable_schema(type_def, [query, mutation])\napp = GraphQL(\n    schema,\n    debug=True,\n    extensions=[\n        opentracing_extension(arg_filter=my_arg_filter),\n    ],\n    http_handler=GraphQLHTTPHandler(\n        extensions=[\n            opentracing_extension(root_span_name=get_root_span_name),\n        ],\n    ),\n)\n'})})]})}function l(e={}){let{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},84429:function(e,n,r){r.d(n,{R:()=>o,x:()=>s});var t=r(96540);let i={},a=t.createContext(i);function o(e){let n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);