"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["61659"],{55255:function(e,r,n){n.r(r),n.d(r,{frontMatter:()=>a,toc:()=>t,default:()=>h,metadata:()=>s,assets:()=>o,contentTitle:()=>d});var s=JSON.parse('{"id":"middleware","title":"Middleware","description":"GraphQL middleware are Python functions and callable objects that can be used to inject custom logic into query executor.","source":"@site/server_versioned_docs/version-0.18/middleware.md","sourceDirName":".","slug":"/middleware","permalink":"/server/0.18/middleware","draft":false,"unlisted":false,"tags":[],"version":"0.18","frontMatter":{"id":"middleware","title":"Middleware"},"sidebar":"tutorialSidebar","previous":{"title":"Extension system","permalink":"/server/0.18/extensions"},"next":{"title":"Query validators","permalink":"/server/0.18/query-validators"}}'),l=n(74848),i=n(84429);let a={id:"middleware",title:"Middleware"},d,o={},t=[{value:"Custom middleware example",id:"custom-middleware-example",level:2},{value:"Middleware managers",id:"middleware-managers",level:2},{value:"Middleware and extensions",id:"middleware-and-extensions",level:2},{value:"Performance impact",id:"performance-impact",level:2}];function c(e){let r={a:"a",blockquote:"blockquote",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(r.p,{children:"GraphQL middleware are Python functions and callable objects that can be used to inject custom logic into query executor."}),"\n",(0,l.jsxs)(r.p,{children:["Middlewares share most of their arguments with ",(0,l.jsx)(r.a,{href:"/server/0.18/types-reference#resolver",children:(0,l.jsx)(r.code,{children:"resolvers"})}),", but take one extra argument: ",(0,l.jsx)(r.code,{children:"resolver"})," callable that is resolver associated with currently resolved field:"]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"def lowercase_middleware(resolver, obj, info, **args)\n"})}),"\n",(0,l.jsxs)(r.blockquote,{children:["\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.strong,{children:"Note"})}),"\n",(0,l.jsx)(r.p,{children:"GraphQL middleware is sometimes confused with the ASGI or WSGI middleware, but its not the same thing!"}),"\n"]}),"\n",(0,l.jsxs)(r.blockquote,{children:["\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.strong,{children:"Note"})}),"\n",(0,l.jsx)(r.p,{children:"Middleware is not supported by subscriptions."}),"\n"]}),"\n",(0,l.jsx)(r.h2,{id:"custom-middleware-example",children:"Custom middleware example"}),"\n",(0,l.jsx)(r.p,{children:"Code below implements custom middleware that converts any strings returned by resolvers to lower case:"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"def lowercase_middleware(resolver, obj, info, **args):\n    value = resolver(obj, info, **args)\n    if isinstance(value, str):\n        return value.lower()\n    return value\n"})}),"\n",(0,l.jsxs)(r.p,{children:["To use this middleware in your queries, pass it to the ",(0,l.jsx)(r.code,{children:"middleware"})," option of the HTTP handler:"]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"from ariadne.asgi import GraphQL\nfrom ariadne.asgi.handlers import GraphQLHTTPHandler\n\n\ndef lowercase_middleware(resolver, obj, info, **args):\n    value = resolver(obj, info, **args)\n    if isinstance(value, str):\n        return value.lower()\n    return value\n\n\napp = GrapqhQL(\n    schema,\n    http_handler=GraphQLHTTPHandler(\n        middleware=[lowercase_middleware],\n    ),\n)\n"})}),"\n",(0,l.jsxs)(r.p,{children:["In case when more than one middleware is enabled on the server, the ",(0,l.jsx)(r.code,{children:"resolver"})," argument will point to the partial function constructed from the next middleware in the execution chain."]}),"\n",(0,l.jsx)(r.h2,{id:"middleware-managers",children:"Middleware managers"}),"\n",(0,l.jsxs)(r.p,{children:["Middleware are ran through special class implemented by GraphQL named ",(0,l.jsx)(r.code,{children:"MiddlewareManager"}),". If you want to replace this manager with custom one, you provide your own implementation using the ",(0,l.jsx)(r.code,{children:"middleware_manager_class"})," option:"]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:'from ariadne.asgi import GraphQL\nfrom ariadne.asgi.handlers import GraphQLHTTPHandler\nfrom graphql import GraphQLFieldResolver, MiddlewareManager\n\n\ndef lowercase_middleware(resolver, obj, info, **args):\n    value = resolver(obj, info, **args)\n    if isinstance(value, str):\n        return value.lower()\n    return value\n\n\nclass CustomMiddlewareManager(MiddlewareManager):\n    def get_field_resolver(\n        self, field_resolver: GraphQLFieldResolver\n    ) -> GraphQLFieldResolver:\n        """Wrap the provided resolver with the middleware.\n        Returns a function that chains the middleware functions with the provided\n        resolver function.\n        """\n        if self._middleware_resolvers is None:\n            return field_resolver\n        if field_resolver not in self._cached_resolvers:\n            self._cached_resolvers[field_resolver] = reduce(\n                lambda chained_fns, next_fn: partial(next_fn, chained_fns),\n                self._middleware_resolvers,\n                field_resolver,\n            )\n        return self._cached_resolvers[field_resolver]\n\n\napp = GrapqhQL(\n    schema,\n    http_handler=GraphQLHTTPHandler(\n        middleware=[lowercase_middleware],\n        middleware_manager_class=CustomMiddlewareManager,\n    ),\n)\n'})}),"\n",(0,l.jsx)(r.h2,{id:"middleware-and-extensions",children:"Middleware and extensions"}),"\n",(0,l.jsxs)(r.p,{children:["Extensions ",(0,l.jsx)(r.a,{href:"/server/0.18/types-reference#resolve",children:(0,l.jsx)(r.code,{children:"resolve"})})," hook is actually a middleware. In case when GraphQL server is configured to use both middleware and extensions, extensions ",(0,l.jsx)(r.code,{children:"resolve"})," hooks will be executed before the ",(0,l.jsx)(r.code,{children:"middleware"})," functions."]}),"\n",(0,l.jsx)(r.h2,{id:"performance-impact",children:"Performance impact"}),"\n",(0,l.jsxs)(r.p,{children:["Middlewares are called for ",(0,l.jsx)(r.strong,{children:"EVERY"})," resolver call."]}),"\n",(0,l.jsx)(r.p,{children:"Considering this query:"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-graphql",children:"{\n  users {\n    id\n    email\n    username\n  }\n}\n"})}),"\n",(0,l.jsxs)(r.p,{children:["If ",(0,l.jsx)(r.code,{children:"users"})," resolver returns 100 users, middleware function will be called 301 times:"]}),"\n",(0,l.jsxs)(r.ul,{children:["\n",(0,l.jsxs)(r.li,{children:["one time for ",(0,l.jsx)(r.code,{children:"Query.users"})," resolver"]}),"\n",(0,l.jsxs)(r.li,{children:["100 times for ",(0,l.jsx)(r.code,{children:"id"})]}),"\n",(0,l.jsxs)(r.li,{children:["100 times for ",(0,l.jsx)(r.code,{children:"email"})]}),"\n",(0,l.jsx)(r.li,{children:"100 times for username"}),"\n"]}),"\n",(0,l.jsxs)(r.p,{children:["Avoid implementing costful or slow logic in middlewares. Use python decorators applied explicitly to resolver functions or ASGI/WSGI middlewares combined with callable ",(0,l.jsx)(r.code,{children:"context_value"}),"."]})]})}function h(e={}){let{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,l.jsx)(r,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},84429:function(e,r,n){n.d(r,{R:()=>a,x:()=>d});var s=n(96540);let l={},i=s.createContext(l);function a(e){let r=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),s.createElement(i.Provider,{value:r},e.children)}}}]);