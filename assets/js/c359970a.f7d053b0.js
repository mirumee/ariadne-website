"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["44603"],{17187:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>o,toc:()=>p,default:()=>c,metadata:()=>r,assets:()=>i,contentTitle:()=>l});var r=JSON.parse('{"id":"flask-integration","title":"Flask integration","description":"The following example presents a basic GraphQL server built with Flask:","source":"@site/docs/server/flask-integration.md","sourceDirName":".","slug":"/flask-integration","permalink":"/server/next/flask-integration","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"flask-integration","title":"Flask integration","sidebar_label":"Flask"},"sidebar":"tutorialSidebar","previous":{"title":"FastAPI","permalink":"/server/next/fastapi-integration"},"next":{"title":"Starlette","permalink":"/server/next/starlette-integration"}}'),s=t(74848),a=t(84429);let o={id:"flask-integration",title:"Flask integration",sidebar_label:"Flask"},l,i={},p=[];function u(e){let n={code:"code",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"The following example presents a basic GraphQL server built with Flask:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from ariadne import QueryType, graphql_sync, make_executable_schema\nfrom ariadne.explorer import ExplorerGraphiQL\nfrom flask import Flask, jsonify, request\n\ntype_defs = """\n    type Query {\n        hello: String!\n    }\n"""\n\nquery = QueryType()\n\n\n@query.field("hello")\ndef resolve_hello(_, info):\n    request = info.context\n    user_agent = request.headers.get("User-Agent", "Guest")\n    return "Hello, %s!" % user_agent\n\n\nschema = make_executable_schema(type_defs, query)\n\napp = Flask(__name__)\n\n# Retrieve HTML for the GraphiQL.\n# If explorer implements logic dependant on current request,\n# change the html(None) call to the html(request)\n# and move this line to the graphql_explorer function.\nexplorer_html = ExplorerGraphiQL().html(None)\n\n\n@app.route("/graphql", methods=["GET"])\ndef graphql_explorer():\n    # On GET request serve the GraphQL explorer.\n    # You don\'t have to provide the explorer if you don\'t want to\n    # but keep on mind this will not prohibit clients from\n    # exploring your API using desktop GraphQL explorer app.\n    return explorer_html, 200\n\n\n@app.route("/graphql", methods=["POST"])\ndef graphql_server():\n    # GraphQL queries are always sent as POST\n    data = request.get_json()\n\n    # Note: Passing the request to the context is optional.\n    # In Flask, the current request is always accessible as flask.request\n    success, result = graphql_sync(\n        schema,\n        data,\n        context_value={"request": request},\n        debug=app.debug\n    )\n\n    status_code = 200 if success else 400\n    return jsonify(result), status_code\n\n\nif __name__ == "__main__":\n    app.run(debug=True)\n'})})]})}function c(e={}){let{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},84429:function(e,n,t){t.d(n,{R:()=>o,x:()=>l});var r=t(96540);let s={},a=r.createContext(s);function o(e){let n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);