"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["25713"],{61976:function(e,n,r){r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var s=r(51812),i=r(74848),o=r(84429);let a={title:"Ariadne 0.18"},t,d={authorsImageUrls:[]},l=[{value:"New GraphQL explorers",id:"new-graphql-explorers",level:2},{value:"GraphiQL 2 as default GraphQL explorer",id:"graphiql-2-as-default-graphql-explorer",level:3},{value:"Disabling the GraphQL explorer",id:"disabling-the-graphql-explorer",level:3},{value:"New approach for managing different name cases between Python and GraphQL",id:"new-approach-for-managing-different-name-cases-between-python-and-graphql",level:2},{value:"Better integration story for FastAPI and Starlette",id:"better-integration-story-for-fastapi-and-starlette",level:2},{value:"Dataloaders support for synchronous servers",id:"dataloaders-support-for-synchronous-servers",level:2},{value:"Updated reference documents",id:"updated-reference-documents",level:2},{value:"Backwards incompatible changes",id:"backwards-incompatible-changes",level:2},{value:"<code>context_value</code> function is now called with two arguments",id:"context_value-function-is-now-called-with-two-arguments",level:3},{value:"<code>root_value</code> function is now called with four arguments",id:"root_value-function-is-now-called-with-four-arguments",level:3},{value:"<code>middleware</code> option now expects a list of middlewares or callable returning list of middlewares",id:"middleware-option-now-expects-a-list-of-middlewares-or-callable-returning-list-of-middlewares",level:3},{value:"Other improvements",id:"other-improvements",level:2},{value:"Security guide",id:"security-guide",level:2},{value:"Changelog",id:"changelog",level:2}];function c(e){let n={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Ariadne shipped!",src:r(59231).A+"",width:"1980",height:"1040"})}),"\n",(0,i.jsx)(n.p,{children:"Ariadne 0.18 is now available! \u{1F680}"}),"\n",(0,i.jsx)(n.p,{children:"0.18 is a feature release bringing multiple new features and improvements to Ariadne."}),"\n",(0,i.jsx)(n.h2,{id:"new-graphql-explorers",children:"New GraphQL explorers"}),"\n",(0,i.jsxs)(n.p,{children:["In previous Ariadne versions GraphQL explorer was hardcoded into the ",(0,i.jsx)(n.code,{children:"GraphQL"})," server. To customize or replace the GraphQL Playground, one had to create custom class inheriting from ",(0,i.jsx)(n.code,{children:"GraphQL"})," and implement their own ",(0,i.jsx)(n.code,{children:"render_playground"})," method."]}),"\n",(0,i.jsxs)(n.p,{children:["In Ariadne 0.18 GraphQL explorers have been made into separate Python classes. To customize the explorer in your server, pass instance of ",(0,i.jsx)(n.code,{children:"Explorer"})," class implementing the GraphQL explorer UI you wish to use to the ",(0,i.jsx)(n.code,{children:"explorer"})," option of ",(0,i.jsx)(n.code,{children:"GraphQL"})," class."]}),"\n",(0,i.jsx)(n.p,{children:"Ariadne 0.18 ships with following GraphQL explorers out of the box:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"GraphiQL 2"}),"\n",(0,i.jsx)(n.li,{children:"Apollo Sandbox"}),"\n",(0,i.jsx)(n.li,{children:"GraphQL Playground"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"In addition to implementing GraphQL explorers, those classes also provide different configuration options specific to their explorer."}),"\n",(0,i.jsx)(n.p,{children:"Implementing custom explorers is also supported!"}),"\n",(0,i.jsxs)(n.p,{children:["See ",(0,i.jsx)(n.a,{href:"/server/explorers",children:"the explorers guide"})," for more details."]}),"\n",(0,i.jsx)(n.h3,{id:"graphiql-2-as-default-graphql-explorer",children:"GraphiQL 2 as default GraphQL explorer"}),"\n",(0,i.jsxs)(n.p,{children:["Because GraphQL Playground is officially no longer maintainer, ",(0,i.jsx)(n.a,{href:"https://github.com/graphql/graphiql",children:"GraphiQL 2"})," is now a default GraphQL explorer in Ariadne."]}),"\n",(0,i.jsx)(n.p,{children:"GraphQL Playground is still available as an option."}),"\n",(0,i.jsx)(n.h3,{id:"disabling-the-graphql-explorer",children:"Disabling the GraphQL explorer"}),"\n",(0,i.jsxs)(n.p,{children:["Ariadne now provides the ",(0,i.jsx)(n.code,{children:"ExplorerHttp405"})," GraphQL explorer which actually doesn't implement any UI at all, but instead triggers the ",(0,i.jsx)(n.code,{children:"405 not allowed"})," response from the GraphQL server when explorer is accessed."]}),"\n",(0,i.jsx)(n.p,{children:"This is now the official way for disabling the GraphQL explorer UI in Ariadne."}),"\n",(0,i.jsx)(n.h2,{id:"new-approach-for-managing-different-name-cases-between-python-and-graphql",children:"New approach for managing different name cases between Python and GraphQL"}),"\n",(0,i.jsxs)(n.p,{children:["Leading naming convention in Python is ",(0,i.jsx)(n.code,{children:"PascalCase"})," for types and ",(0,i.jsx)(n.code,{children:"snake_case"})," for attributes (and frequently dict keys). This causes conflict with GraphQL where fields are usually named using the ",(0,i.jsx)(n.code,{children:"camelCase"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Ariadne ships with ",(0,i.jsx)(n.code,{children:"snake_case_fallback_resolvers"})," and ",(0,i.jsx)(n.code,{children:"convert_kwargs_to_snake_case"})," utilities to create this convention automatically in places where no explicit convention was already specified by developer, namely in custom resolvers."]}),"\n",(0,i.jsxs)(n.p,{children:["Ariadne 0.18 adds ",(0,i.jsx)(n.code,{children:"convert_schema_names"})," option to ",(0,i.jsx)(n.code,{children:"make_executable_schema"})," that sets this conversion automatically for entire schema:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Fields without custom resolvers set on them"}),"\n",(0,i.jsx)(n.li,{children:"Fields arguments"}),"\n",(0,i.jsx)(n.li,{children:"Inputs fields"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["See the ",(0,i.jsx)(n.a,{href:"/server/case-conversion",children:"name case conversion guide"})," to learn more about this feature."]}),"\n",(0,i.jsxs)(n.p,{children:["See the ",(0,i.jsx)(n.a,{href:"/server/api-reference#convert_camel_case_to_snake",children:"reference"})," for details on algorithm used by Ariadne to convert ",(0,i.jsx)(n.code,{children:"camelCase"})," names to ",(0,i.jsx)(n.code,{children:"snake_cases"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"snake_case_fallback_resolvers"}),", ",(0,i.jsx)(n.code,{children:"convert_kwargs_to_snake_case"})," as well as ",(0,i.jsx)(n.code,{children:"FallbackResolversSetter"})," and ",(0,i.jsx)(n.code,{children:"fallback_resolvers"})," are now deprecated and will be removed from Ariadne in future version. We understand that migrating away from them may take a while for Ariadne's users, so we plan to keep those for few more months at least before announcing the final version those will be part of."]}),"\n",(0,i.jsx)(n.h2,{id:"better-integration-story-for-fastapi-and-starlette",children:"Better integration story for FastAPI and Starlette"}),"\n",(0,i.jsxs)(n.p,{children:["Instances of the ",(0,i.jsx)(n.code,{children:"asgi.GraphQL"})," class now expose the ",(0,i.jsx)(n.code,{children:"handle_request"})," and ",(0,i.jsx)(n.code,{children:"handle_websocket"})," methods which can be called from Starlette's and FastAPI's routes. This alternative approach to ",(0,i.jsx)(n.code,{children:"mount"}),"ing the ",(0,i.jsx)(n.code,{children:"GraphQL"})," as subapplication is intended to offer better integration in projects that rely heavily on other services or FastAPI's dependency injection."]}),"\n",(0,i.jsx)(n.p,{children:"Ariadne's documentation has been updated to show both of those use cases:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/server/fastapi-integration",children:"FastAPI"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/server/starlette-integration",children:"Starlette"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"dataloaders-support-for-synchronous-servers",children:"Dataloaders support for synchronous servers"}),"\n",(0,i.jsx)(n.p,{children:"Ariadne's public API was updated to support custom GraphQL execution contexts. This enables use of synchronous dataloaders in Ariadne."}),"\n",(0,i.jsxs)(n.p,{children:["See the ",(0,i.jsx)(n.a,{href:"/server/dataloaders",children:"dataloaders guide"})," to learn more about dataloaders and see the code examples."]}),"\n",(0,i.jsx)(n.h2,{id:"updated-reference-documents",children:"Updated reference documents"}),"\n",(0,i.jsx)(n.p,{children:'We have replaced all documents in existing "API Reference" section with new ones that are wholly generated from Ariadne\'s source code.'}),"\n",(0,i.jsx)(n.p,{children:"This makes them 100% accurate and much more useful to the developers already familiar with GraphQL development with Ariadne, but looking to learn about APIs and features not covered by other documents, or just to refresh their memory of the APIs."}),"\n",(0,i.jsx)(n.h2,{id:"backwards-incompatible-changes",children:"Backwards incompatible changes"}),"\n",(0,i.jsxs)(n.h3,{id:"context_value-function-is-now-called-with-two-arguments",children:[(0,i.jsx)(n.code,{children:"context_value"})," function is now called with two arguments"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"context_value"})," is now called with two arguments instead of one:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"request"}),": an representation of HTTP request specific to the framework used."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"data"}),": an unvalidated JSON which may be a valid GraphQL request payload."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Currently Ariadne supports both old and new functions, but it will show a warning when old function is used. To future-proof your function you can change it's signature from ",(0,i.jsx)(n.code,{children:"request"})," to ",(0,i.jsx)(n.code,{children:"request, *_"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["See the ",(0,i.jsxs)(n.a,{href:"/server/types-reference#contextvalue",children:[(0,i.jsx)(n.code,{children:"ContextValue"})," reference"]}),"."]}),"\n",(0,i.jsxs)(n.h3,{id:"root_value-function-is-now-called-with-four-arguments",children:[(0,i.jsx)(n.code,{children:"root_value"})," function is now called with four arguments"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"root_value"})," is now called with four arguments instead of one:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"context_value"}),": a context value specific to this GraphQL server."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"operation_name"}),": a str with name of operation to execute (or None)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"variables"}),": a dict with variables to pass to query's resolvers (or None)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"document"}),": a DocumentNode with parsed GraphQL query."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Currently Ariadne supports both old and new functions, but it will show a warning when old function is used. To future-proof your function you can change it's signature from ",(0,i.jsx)(n.code,{children:"context"})," to ",(0,i.jsx)(n.code,{children:"context, *_"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["See the ",(0,i.jsxs)(n.a,{href:"/server/types-reference#rootvalue",children:[(0,i.jsx)(n.code,{children:"RootValue"})," reference"]}),"."]}),"\n",(0,i.jsxs)(n.h3,{id:"middleware-option-now-expects-a-list-of-middlewares-or-callable-returning-list-of-middlewares",children:[(0,i.jsx)(n.code,{children:"middleware"})," option now expects a list of middlewares or callable returning list of middlewares"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"middleware"})," option now expects a list of middlewares or callable returning list of middlewares."]}),"\n",(0,i.jsx)(n.p,{children:"This is in line with documentation that always described this use."}),"\n",(0,i.jsxs)(n.p,{children:["If you relied on custom ",(0,i.jsx)(n.code,{children:"MiddlewareManager"}),", you can still pass it to Ariadne through the ",(0,i.jsx)(n.code,{children:"middleware_manager_class"})," option that was added as part of this change."]}),"\n",(0,i.jsx)(n.h2,{id:"other-improvements",children:"Other improvements"}),"\n",(0,i.jsx)(n.p,{children:"There are few other improvements that we've found noteworthy for Ariadne 0.18:"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"logger"})," option now supports ",(0,i.jsx)(n.code,{children:"Logger"})," and ",(0,i.jsx)(n.code,{children:"LoggerAdapter"})," instances in addition to ",(0,i.jsx)(n.code,{children:"str"})," with logger name."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"/server/api-reference#load_schema_from_path",children:(0,i.jsx)(n.code,{children:"load_schema_from_path"})})," now supports ",(0,i.jsx)(n.code,{children:"Path"}),"-like objects in addition to ",(0,i.jsx)(n.code,{children:"str"})," with path to schema."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"/server/types-reference#queryparser",children:(0,i.jsx)(n.code,{children:"query_parser"})})," option now enables replacement of default query parser used with custom one."]}),"\n",(0,i.jsx)(n.h2,{id:"security-guide",children:"Security guide"}),"\n",(0,i.jsxs)(n.p,{children:["Excellent folk from ",(0,i.jsx)(n.a,{href:"https://escape.tech/",children:"the Escape"})," have contributed the security guide for GraphQl to Ariadne's docs."]}),"\n",(0,i.jsxs)(n.p,{children:["You can find it ",(0,i.jsx)(n.a,{href:"/server/security-overview",children:"here"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"changelog",children:"Changelog"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"GraphiQL2 is now default API explorer."}),"\n",(0,i.jsxs)(n.li,{children:["Added ",(0,i.jsx)(n.code,{children:"explorer"})," option to ASGI and WSGI ",(0,i.jsx)(n.code,{children:"GraphQL"})," applications that enables API explorer customization."]}),"\n",(0,i.jsxs)(n.li,{children:["Added ",(0,i.jsx)(n.code,{children:"ExplorerHttp405"})," API explorer that returns ",(0,i.jsx)(n.code,{children:"405 Method Not Allowed"})," for GET HTTP requests."]}),"\n",(0,i.jsx)(n.li,{children:"Added implementations for GraphiQL2, GraphQL-Playground and Apollo Sandbox explorers."}),"\n",(0,i.jsxs)(n.li,{children:["Added ",(0,i.jsx)(n.code,{children:"convert_names_case"})," option to ",(0,i.jsx)(n.code,{children:"make_executable_schema"})," to convert all names in schema to Python case using default or custom strategy."]}),"\n",(0,i.jsxs)(n.li,{children:["Added support for ",(0,i.jsx)(n.code,{children:"Path"}),"-like objects to ",(0,i.jsx)(n.code,{children:"load_schema_from_path"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Changed ",(0,i.jsx)(n.code,{children:"logger"})," option to also support ",(0,i.jsx)(n.code,{children:"Logger"})," and ",(0,i.jsx)(n.code,{children:"LoggerAdapter"})," instance in addition to ",(0,i.jsx)(n.code,{children:"str"})," with logger name."]}),"\n",(0,i.jsxs)(n.li,{children:["Added support for ",(0,i.jsx)(n.code,{children:"@tag"})," directive used by Apollo Federation."]}),"\n",(0,i.jsxs)(n.li,{children:["Moved project configuration from ",(0,i.jsx)(n.code,{children:"setup.py"})," to ",(0,i.jsx)(n.code,{children:"pyproject.toml"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Changed ",(0,i.jsx)(n.code,{children:"context_value"})," option in ASGI and WSGI applications for callables to take query data as second argument."]}),"\n",(0,i.jsxs)(n.li,{children:["Changed ",(0,i.jsx)(n.code,{children:"root_value"})," option in ASGI and WSGI applications for callables to take operation and and variables in addition to context and parsed query."]}),"\n",(0,i.jsxs)(n.li,{children:["Added ",(0,i.jsx)(n.code,{children:"execution_context_class"})," option to ASGI and WSGI applications."]}),"\n",(0,i.jsxs)(n.li,{children:["Added ",(0,i.jsx)(n.code,{children:"query_parser"})," option to ASGI and WSGI ",(0,i.jsx)(n.code,{children:"GraphQL"})," applications that enables query parsing customization."]}),"\n",(0,i.jsxs)(n.li,{children:["Changed ",(0,i.jsx)(n.code,{children:"middleware"})," option to work with callable or list of middlewares instead of ",(0,i.jsx)(n.code,{children:"MiddlewareManager"})," instance."]}),"\n",(0,i.jsxs)(n.li,{children:["Added ",(0,i.jsx)(n.code,{children:"middleware_manager_class"})," option to ASGI and WSGI applications."]}),"\n",(0,i.jsxs)(n.li,{children:["Added ",(0,i.jsx)(n.code,{children:"handle_request"})," and ",(0,i.jsx)(n.code,{children:"handle_websocket"})," methods to ",(0,i.jsx)(n.code,{children:"ASGI"})," application that takes Starlette/FastAPI ",(0,i.jsx)(n.code,{children:"Request"})," and ",(0,i.jsx)(n.code,{children:"Websocket"})," objects."]}),"\n",(0,i.jsx)(n.li,{children:"Fixed type annotations for middlewares."}),"\n",(0,i.jsx)(n.li,{children:"Added docstrings to members of public API."}),"\n"]})]})}function h(e={}){let{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},59231:function(e,n,r){r.d(n,{A:()=>s});let s=r.p+"assets/images/ariadne-0-18-1237a45e7156c211d33bac147030f3ab.jpg"},84429:function(e,n,r){r.d(n,{R:()=>a,x:()=>t});var s=r(96540);let i={},o=s.createContext(i);function a(e){let n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(o.Provider,{value:n},e.children)}},51812:function(e){e.exports=JSON.parse('{"permalink":"/blog/2023/02/21/ariadne-0-18","source":"@site/blog/2023-02-21-ariadne-0-18.md","title":"Ariadne 0.18","description":"Ariadne shipped!","date":"2023-02-21T00:00:00.000Z","tags":[],"readingTime":5.8,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne 0.18"},"unlisted":false,"prevItem":{"title":"Ariadne 0.18.1","permalink":"/blog/2023/02/22/ariadne-0-18-1"},"nextItem":{"title":"Announcing Ariadne Codegen!","permalink":"/blog/2023/02/02/ariadne-codegen"}}')}}]);