"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["19804"],{80360:function(e,n,s){s.r(n),s.d(n,{frontMatter:()=>i,toc:()=>l,default:()=>h,metadata:()=>t,assets:()=>c,contentTitle:()=>o});var t=JSON.parse('{"id":"case-conversion","title":"Name case conversion","description":"Most common convention for naming fields and arguments in GraphQL is the camel case, where \\"user birth date\\" is represented as userBirthDate. This is different from Python where object attributes, function names and arguments use the snake case and same \\"user birth date\\" becomes userbirthdate.","source":"@site/server_versioned_docs/version-0.25/case-conversion.md","sourceDirName":".","slug":"/case-conversion","permalink":"/server/case-conversion","draft":false,"unlisted":false,"tags":[],"version":"0.25","frontMatter":{"id":"case-conversion","title":"Name case conversion"},"sidebar":"tutorialSidebar","previous":{"title":"Error messaging","permalink":"/server/error-messaging"},"next":{"title":"Fragments","permalink":"/server/fragments"}}'),r=s(74848),a=s(84429);let i={id:"case-conversion",title:"Name case conversion"},o,c={},l=[{value:"Setting automatic name case conversion for whole schema",id:"setting-automatic-name-case-conversion-for-whole-schema",level:2},{value:"Custom function for names conversion",id:"custom-function-for-names-conversion",level:3},{value:"Explicit name conversion",id:"explicit-name-conversion",level:2},{value:"Types fields",id:"types-fields",level:3},{value:"Fields arguments",id:"fields-arguments",level:3},{value:"Inputs fields",id:"inputs-fields",level:3}];function d(e){let n={blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:['Most common convention for naming fields and arguments in GraphQL is the camel case, where "user birth date" is represented as ',(0,r.jsx)(n.code,{children:"userBirthDate"}),'. This is different from Python where object attributes, function names and arguments use the snake case and same "user birth date" becomes ',(0,r.jsx)(n.code,{children:"user_birth_date"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"This difference introduces friction to schema-first GraphQL APIs implemented by Python, but there are ways to establish automatic conversion between the two conversions at near-zero performance cost."}),"\n",(0,r.jsx)(n.h2,{id:"setting-automatic-name-case-conversion-for-whole-schema",children:"Setting automatic name case conversion for whole schema"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"make_executable_schema"})," function can enable conversion of names case for entire schema when its created."]}),"\n",(0,r.jsxs)(n.p,{children:["To do this, add ",(0,r.jsx)(n.code,{children:"convert_names_case=True"})," to its arguments:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"schema = make_executable_schema(\n    type_defs,\n    my_type, my_other_type,\n    convert_names_case=True,\n)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Doing so will result in following changes being made to the GraphQL schema:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Types fields without resolver already set on them will be assigned a special resolver that seeks Python counterpart of camel case name in object's attributes or dicts keys. Eg. ",(0,r.jsx)(n.code,{children:"streetAddress2"})," field fill be resolved to ",(0,r.jsx)(n.code,{children:"street_address_2"})," attribute for objects and key for dicts."]}),"\n",(0,r.jsxs)(n.li,{children:["Fields arguments without ",(0,r.jsx)(n.code,{children:"out_name"})," already set will be new names"]}),"\n",(0,r.jsxs)(n.li,{children:["Inputs fields without ",(0,r.jsx)(n.code,{children:"out_name"})," already set will be set new names"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"custom-function-for-names-conversion",children:"Custom function for names conversion"}),"\n",(0,r.jsxs)(n.p,{children:["If you are not happy with default names conversion method used, you can set ",(0,r.jsx)(n.code,{children:"convert_names_case"})," to a function that should be used to convert the name instead."]}),"\n",(0,r.jsx)(n.p,{children:"This function will be called with three arguments:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"graphql_name"}),": a ",(0,r.jsx)(n.code,{children:"str"})," with name to convert."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"schema"}),": a ",(0,r.jsx)(n.code,{children:"GraphQLSchema"})," instance for which name conversion is done."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"path"}),": a ",(0,r.jsx)(n.code,{children:"Tuple[str, ...]"})," with a path to the schema item for which the name is converted (GraphQL type, field, argument)."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"It should return a string with a Python name."}),"\n",(0,r.jsx)(n.p,{children:"Example naive function that converts the name to snake case:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from typing import Tuple\n\nfrom graphql import GraphQLSchema\n\n\ndef custom_convert_schema_name(\n    graphql_name: str, schema: GraphQLSchema, path: Tuple[str, ...]\n) -> str:\n    converted_name = ""\n    for i, c in enumerate(graphql_name.lower()):\n        if i == 0:\n            converted_name += c\n            continue\n\n        if c != graphql_name[i]:\n            converted_name += "_"\n\n        converted_name += c\n    \n    return converted_name\n\n\nschema = make_executable_schema(\n    type_defs,\n    my_type, my_other_type,\n    convert_names_case=custom_convert_schema_name,\n)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"explicit-name-conversion",children:"Explicit name conversion"}),"\n",(0,r.jsxs)(n.p,{children:["If you prefer the ",(0,r.jsx)(n.em,{children:"explicit is better than implicit"})," approach, here's how to set those names manually:"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," Mutating ",(0,r.jsx)(n.code,{children:"resolve"})," and ",(0,r.jsx)(n.code,{children:"out_name"})," attributes is considered safe to do if their original value was ",(0,r.jsx)(n.code,{children:"None"})," and the GraphQL server has not started yet. Ariadne limits all mutations of Schema it performs to the ",(0,r.jsx)(n.code,{children:"make_executable_schema"}),", where its not yet available to rest of the application."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"types-fields",children:"Types fields"}),"\n",(0,r.jsxs)(n.p,{children:["Set Python names for types fields, use ",(0,r.jsx)(n.code,{children:"set_alias"})," method of ",(0,r.jsx)(n.code,{children:"ObjectType"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from ariadne import ObjectType, gql, make_executable_schema\n\ntype_defs = gql(\n    """\n    type User {\n        lastAction: Int\n    }\n    """\n)\n\nuser_type = ObjectType("User")\n\nuser_type.set_alias("lastAction", "last_action")\n\nschema = make_executable_schema(type_defs, user_type)\n'})}),"\n",(0,r.jsx)(n.p,{children:"Alternatively you can mutate the schema:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from ariadne import gql, make_executable_schema, resolve_to\n\nschema = make_executable_schema(\n    gql(\n        """\n        type Query {\n            lastUpdated: Int\n        }\n        """\n    )\n)\n\nschema.type_map["Query"].fields["lastUpdated"].resolve = resolve_to("last_updated")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"fields-arguments",children:"Fields arguments"}),"\n",(0,r.jsxs)(n.p,{children:["Set Python names on arguments by mutating their ",(0,r.jsx)(n.code,{children:"out_name"})," attribute:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from ariadne import gql, make_executable_schema\n\nschema = make_executable_schema(\n    gql(\n        """\n        type Query {\n            users(orderBy: str): [User!]!\n        }\n\n        type User {\n            id: ID!\n        }\n        """\n    )\n)\n\nschema.type_map["Query"].fields["users"].args["orderBy"].out_name = "order_by"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"inputs-fields",children:"Inputs fields"}),"\n",(0,r.jsxs)(n.p,{children:["Set Python names on input fields by mutating their ",(0,r.jsx)(n.code,{children:"out_name"})," attribute:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from ariadne import gql, make_executable_schema\n\nschema = make_executable_schema(\n    gql(\n        """\n        type Query {\n            users(filters: UserFilters): [User!]!\n        }\n\n        input UserFilters {\n            userName: String\n        }\n\n        type User {\n            id: ID!\n        }\n        """\n    )\n)\n\nschema.type_map["UserFilters"].fields["userName"].out_name = "user_name"\n'})})]})}function h(e={}){let{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},84429:function(e,n,s){s.d(n,{R:()=>i,x:()=>o});var t=s(96540);let r={},a=t.createContext(r);function i(e){let n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);