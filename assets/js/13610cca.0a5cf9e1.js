"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["6860"],{23017:function(e){e.exports=JSON.parse('{"version":{"pluginId":"server","version":"0.4.0","label":"0.4.0","banner":"unmaintained","badge":true,"noIndex":false,"className":"docs-version-0.4.0","isLast":false,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"Docs","items":[{"type":"link","label":"Introduction","href":"/server/0.4.0/intro","docId":"intro","unlisted":false},{"type":"link","label":"Resolvers","href":"/server/0.4.0/resolvers","docId":"resolvers","unlisted":false},{"type":"link","label":"Mutations","href":"/server/0.4.0/mutations","docId":"mutations","unlisted":false},{"type":"link","label":"Error messaging","href":"/server/0.4.0/error-messaging","docId":"error-messaging","unlisted":false},{"type":"link","label":"Custom scalars","href":"/server/0.4.0/scalars","docId":"scalars","unlisted":false},{"type":"link","label":"Enumeration types","href":"/server/0.4.0/enums","docId":"enums","unlisted":false},{"type":"link","label":"Union types","href":"/server/0.4.0/unions","docId":"unions","unlisted":false},{"type":"link","label":"Interface types","href":"/server/0.4.0/interfaces","docId":"interfaces","unlisted":false},{"type":"link","label":"Subscriptions","href":"/server/0.4.0/subscriptions","docId":"subscriptions","unlisted":false},{"type":"link","label":"Documenting schema","href":"/server/0.4.0/documenting-schema","docId":"documenting-schema","unlisted":false},{"type":"link","label":"Modularization","href":"/server/0.4.0/modularization","docId":"modularization","unlisted":false},{"type":"link","label":"Bindables","href":"/server/0.4.0/bindables","docId":"bindables","unlisted":false},{"type":"link","label":"Local development","href":"/server/0.4.0/local-development","docId":"local-development","unlisted":false},{"type":"link","label":"Logging","href":"/server/0.4.0/logging","docId":"logging","unlisted":false},{"type":"link","label":"Ariadne logo","href":"/server/0.4.0/logo","docId":"logo","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Servers","items":[{"type":"link","label":"ASGI application","href":"/server/0.4.0/asgi","docId":"asgi","unlisted":false},{"type":"link","label":"WSGI application","href":"/server/0.4.0/wsgi","docId":"wsgi","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Integrations","items":[{"type":"link","label":"Django","href":"/server/0.4.0/django-integration","docId":"django-integration","unlisted":false},{"type":"link","label":"Flask","href":"/server/0.4.0/flask-integration","docId":"flask-integration","unlisted":false},{"type":"link","label":"Starlette","href":"/server/0.4.0/starlette-integration","docId":"starlette-integration","unlisted":false},{"type":"link","label":"Other technologies","href":"/server/0.4.0/other-integrations","docId":"other-integrations","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"API reference","items":[{"type":"link","label":"ariadne","href":"/server/0.4.0/api-reference","docId":"api-reference","unlisted":false},{"type":"link","label":"ariadne.constants","href":"/server/0.4.0/constants-reference","docId":"constants-reference","unlisted":false}],"collapsed":true,"collapsible":true}]},"docs":{"api-reference":{"id":"api-reference","title":"API reference","description":"Following items are importable directly from ariadne package:","sidebar":"tutorialSidebar"},"asgi":{"id":"asgi","title":"ASGI application","description":"Ariadne provides a GraphQL class that implements a production-ready ASGI application.","sidebar":"tutorialSidebar"},"bindables":{"id":"bindables","title":"Bindables","description":"In Ariadne bindables are special types implementing the logic required for binding Python callables and values to the GraphQL schema.","sidebar":"tutorialSidebar"},"constants-reference":{"id":"constants-reference","title":"Constants reference","description":"Following constants are importable from ariadne.constants package:","sidebar":"tutorialSidebar"},"django-integration":{"id":"django-integration","title":"Django integration","description":"Ariadne ships with ariadne.contrib.django package that should be used as Django app and provides utilities for adding GraphQL server to Django projects.","sidebar":"tutorialSidebar"},"documenting-schema":{"id":"documenting-schema","title":"Documenting schema","description":"The GraphQL specification includes two features that make documentation and schema exploration easy and powerful.  Those features are descriptions and introspection queries.","sidebar":"tutorialSidebar"},"enums":{"id":"enums","title":"Enumeration types","description":"Ariadne supports GraphQL enumeration types which by default are represented as strings in Python logic:","sidebar":"tutorialSidebar"},"error-messaging":{"id":"error-messaging","title":"Error messaging","description":"If you\'ve experimented with GraphQL, you should be familiar that when things don\'t go according to plan, GraphQL servers include additional key errors to the returned response:","sidebar":"tutorialSidebar"},"flask-integration":{"id":"flask-integration","title":"Flask integration","description":"The following example presents a basic GraphQL server built with Flask:","sidebar":"tutorialSidebar"},"interfaces":{"id":"interfaces","title":"Interface types","description":"Interface is an abstract GraphQL type that defines certain set of fields and requires other types implementing it to also define same fields in order for schema to be correct.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Introduction","description":"Welcome to Ariadne!","sidebar":"tutorialSidebar"},"local-development":{"id":"local-development","title":"Local development","description":"Starting a local server","sidebar":"tutorialSidebar"},"logging":{"id":"logging","title":"Logging","description":"Ariadne logs all errors using default ariadne logger. To define custom logger instead, pass its name to logger option:","sidebar":"tutorialSidebar"},"logo":{"id":"logo","title":"Ariadne logo","description":"Ariadne logo is an \\"A\\" shaped labyrinth. If your project uses Ariadne and you want to share the love, feel free to place the logo somewhere on your site and link back to https","sidebar":"tutorialSidebar"},"modularization":{"id":"modularization","title":"Modularization","description":"Ariadne allows you to spread your GraphQL API implementation over multiple files, with different strategies being available for schema and resolvers.","sidebar":"tutorialSidebar"},"mutations":{"id":"mutations","title":"Mutations","description":"So far all examples in this documentation have dealt with Query type and reading the data. What about creating, updating or deleting?","sidebar":"tutorialSidebar"},"other-integrations":{"id":"other-integrations","title":"Other technologies","description":"Ariadne can be used to add GraphQL server to projects developed using any web framework that supports JSON responses.","sidebar":"tutorialSidebar"},"resolvers":{"id":"resolvers","title":"Resolvers","description":"In Ariadne, a resolver is any Python callable that accepts two positional arguments (obj and info):","sidebar":"tutorialSidebar"},"scalars":{"id":"scalars","title":"Custom scalars","description":"Custom scalars allow you to convert your Python objects to a JSON-serializable form in query results, as well as convert those JSON forms back to Python objects when they are passed as arguments or input values.","sidebar":"tutorialSidebar"},"starlette-integration":{"id":"starlette-integration","title":"Starlette integration","description":"Ariadne is an ASGI application that can be directly mounted under Starlette. It will support both HTTP and WebSocket traffic used by subscriptions:","sidebar":"tutorialSidebar"},"subscriptions":{"id":"subscriptions","title":"Subscriptions","description":"Let\'s introduce a third type of operation. While queries offer a way to query a server once, subscriptions offer a way for the server to notify the client each time new data is available and that no other data will be available for the given request.","sidebar":"tutorialSidebar"},"unions":{"id":"unions","title":"Union types","description":"When designing your API, you may run into a situation where you want your field to resolve to one of a few possible types. It may be an error field that can resolve to one of many error types, or an activity feed made up of different types.","sidebar":"tutorialSidebar"},"wsgi":{"id":"wsgi","title":"WSGI application","description":"Ariadne provides a GraphQL class that implements a production-ready WSGI application.","sidebar":"tutorialSidebar"}}}}')}}]);