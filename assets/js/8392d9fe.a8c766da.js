"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["20708"],{91136:function(e,n,i){i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>o});var d=i(75213),r=i(74848),l=i(84429);let s={title:"Ariadne Codegen 0.11"},t,a={authorsImageUrls:[]},o=[{value:"Removed <code>model_rebuild</code> calls",id:"removed-model_rebuild-calls",level:2},{value:"Generating only used inputs and enums",id:"generating-only-used-inputs-and-enums",level:2},{value:"<code>NoReimportsPlugin</code>",id:"noreimportsplugin",level:2},{value:"Including <code>operationName</code> in payload",id:"including-operationname-in-payload",level:2},{value:"Payload without <code>data</code>, but with <code>errors</code> key",id:"payload-without-data-but-with-errors-key",level:2},{value:"Renamed invalid response error",id:"renamed-invalid-response-error",level:2},{value:"Changelog",id:"changelog",level:2}];function c(e){let n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Ariadne Codegen 0.11 is now available!"}),"\n",(0,r.jsx)(n.p,{children:"This release brings performance improvements and new options for default base clients."}),"\n",(0,r.jsxs)(n.h2,{id:"removed-model_rebuild-calls",children:["Removed ",(0,r.jsx)(n.code,{children:"model_rebuild"})," calls"]}),"\n",(0,r.jsxs)(n.p,{children:["Pydantic v2 has changed the way forward refs are handled during model class initialisation. If an annotation couldn't be resolved, an auto-rebuild is performed during the first validation attempt. Because of this, we're removing all ",(0,r.jsx)(n.code,{children:"model_rebuild"})," calls from the generated package."]}),"\n",(0,r.jsx)(n.h2,{id:"generating-only-used-inputs-and-enums",children:"Generating only used inputs and enums"}),"\n",(0,r.jsx)(n.p,{children:"Version 0.11 introduces 2 new configuration flags that can be used to reduce the number of unused generated models:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"include_all_inputs"})," (defaults to ",(0,r.jsx)(n.code,{children:"true"}),") - when set to ",(0,r.jsx)(n.code,{children:"true"})," the generated package will include a model for every input defined in the schema, otherwise it will only generate inputs used by defined operations."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"include_all_enums"})," (defaults to ",(0,r.jsx)(n.code,{children:"true"}),") - specifies whether to include all enums defined in the schema, or only those used in operations."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"noreimportsplugin",children:(0,r.jsx)(n.code,{children:"NoReimportsPlugin"})}),"\n",(0,r.jsxs)(n.p,{children:["In 0.11, we are adding ",(0,r.jsx)(n.code,{children:"NoReimportsPlugin"})," to the ",(0,r.jsx)(n.code,{children:"ariadne_codegen.contrib"})," package. It removes the contents of the generated ",(0,r.jsx)(n.code,{children:"__init__.py"}),". This is useful in scenarios where the generated package contains so many Pydantic models that the client's eager initialisation of the entire package on first import is very slow."]}),"\n",(0,r.jsxs)(n.h2,{id:"including-operationname-in-payload",children:["Including ",(0,r.jsx)(n.code,{children:"operationName"})," in payload"]}),"\n",(0,r.jsxs)(n.p,{children:["The generated client methods will now pass the name of the operation as the ",(0,r.jsx)(n.code,{children:"operation_name"})," argument to the ",(0,r.jsx)(n.code,{children:"execute"})," and ",(0,r.jsx)(n.code,{children:"execute_ws"})," methods of the base client. For example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'async def list_all_users(self, **kwargs: Any) -> ListAllUsers:\n    query = gql(\n        """\n        query ListAllUsers {\n          users {\n            id\n          }\n        }\n        """\n    )\n    variables: Dict[str, object] = {}\n    response = await self.execute(\n        query=query, operation_name="ListAllUsers", variables=variables, **kwargs\n    )\n    data = self.get_data(response)\n    return ListAllUsers.model_validate(data)\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Default base clients will also include the given ",(0,r.jsx)(n.code,{children:"operation_name"})," as ",(0,r.jsx)(n.code,{children:"operationName"})," in the sent payload."]}),"\n",(0,r.jsxs)(n.h2,{id:"payload-without-data-but-with-errors-key",children:["Payload without ",(0,r.jsx)(n.code,{children:"data"}),", but with ",(0,r.jsx)(n.code,{children:"errors"})," key"]}),"\n",(0,r.jsxs)(n.p,{children:["We have changed the base clients to raise ",(0,r.jsx)(n.code,{children:"GraphQLClientGraphQLMultiError"})," instead of ",(0,r.jsx)(n.code,{children:"GraphQLClientInvalidResponseError"})," for payloads without ",(0,r.jsx)(n.code,{children:"data"})," but with ",(0,r.jsx)(n.code,{children:"errors"})," key."]}),"\n",(0,r.jsx)(n.h2,{id:"renamed-invalid-response-error",children:"Renamed invalid response error"}),"\n",(0,r.jsxs)(n.p,{children:["To match the convention of other exceptions included with the base default clients, we have renamed ",(0,r.jsx)(n.code,{children:"GraphQLClientInvalidResponseError"})," to ",(0,r.jsx)(n.code,{children:"GraphQLClientInvalidResponseError"})," (with a capital ",(0,r.jsx)(n.code,{children:"L"}),")."]}),"\n",(0,r.jsx)(n.h2,{id:"changelog",children:"Changelog"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Removed ",(0,r.jsx)(n.code,{children:"model_rebuild"})," calls for generated input, fragment and result models."]}),"\n",(0,r.jsxs)(n.li,{children:["Added ",(0,r.jsx)(n.code,{children:"NoReimportsPlugin"})," that makes the ",(0,r.jsx)(n.code,{children:"__init__.py"})," of generated client package empty."]}),"\n",(0,r.jsxs)(n.li,{children:["Added ",(0,r.jsx)(n.code,{children:"include_all_inputs"})," config flag to generate only inputs used in supplied operations."]}),"\n",(0,r.jsxs)(n.li,{children:["Added ",(0,r.jsx)(n.code,{children:"include_all_enums"})," config flag to generate only enums used in supplied operations."]}),"\n",(0,r.jsxs)(n.li,{children:["Added ",(0,r.jsx)(n.code,{children:"operationName"})," to payload sent by generated client's methods."]}),"\n",(0,r.jsxs)(n.li,{children:["Fixed base clients to pass ",(0,r.jsx)(n.code,{children:"mypy --strict"})," without installed optional dependencies."]}),"\n",(0,r.jsxs)(n.li,{children:["Renamed ",(0,r.jsx)(n.code,{children:"GraphQlClientInvalidResponseError"})," to ",(0,r.jsx)(n.code,{children:"GraphQLClientInvalidResponseError"})," (breaking change)."]}),"\n",(0,r.jsxs)(n.li,{children:["Changed base clients to raise ",(0,r.jsx)(n.code,{children:"GraphQLClientGraphQLMultiError"})," for payloads with ",(0,r.jsx)(n.code,{children:"errors"})," key but no ",(0,r.jsx)(n.code,{children:"data"})," (breaking change)."]}),"\n"]})]})}function h(e={}){let{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},84429:function(e,n,i){i.d(n,{R:()=>s,x:()=>t});var d=i(96540);let r={},l=d.createContext(r);function s(e){let n=d.useContext(l);return d.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),d.createElement(l.Provider,{value:n},e.children)}},75213:function(e){e.exports=JSON.parse('{"permalink":"/blog/2023/12/05/ariadne-codegen-0-11","source":"@site/blog/2023-12-05-ariadne-codegen-0-11.md","title":"Ariadne Codegen 0.11","description":"Ariadne Codegen 0.11 is now available!","date":"2023-12-05T00:00:00.000Z","tags":[],"readingTime":2.07,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne Codegen 0.11"},"unlisted":false,"prevItem":{"title":"Ariadne 0.22","permalink":"/blog/2024/01/31/ariadne-0-22-0"},"nextItem":{"title":"Ariadne Codegen 0.10","permalink":"/blog/2023/11/15/ariadne-codegen-0-10"}}')}}]);