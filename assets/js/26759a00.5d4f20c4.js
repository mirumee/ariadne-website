"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["2766"],{13688:function(e,n,s){s.r(n),s.d(n,{frontMatter:()=>o,toc:()=>c,default:()=>h,metadata:()=>r,assets:()=>a,contentTitle:()=>t});var r=JSON.parse('{"id":"types-reference","title":"Types reference","description":"Ariadne uses type annotations in its codebase.","source":"@site/server_versioned_docs/version-0.18/types-reference.md","sourceDirName":".","slug":"/types-reference","permalink":"/server/0.18/types-reference","draft":false,"unlisted":false,"tags":[],"version":"0.18","frontMatter":{"id":"types-reference","title":"Types reference","sidebar_label":"ariadne.types"},"sidebar":"tutorialSidebar","previous":{"title":"ariadne.exceptions","permalink":"/server/0.18/exceptions-reference"},"next":{"title":"ariadne.wsgi","permalink":"/server/0.18/wsgi-reference"}}'),l=s(74848),i=s(84429);let o={id:"types-reference",title:"Types reference",sidebar_label:"ariadne.types"},t,a={},c=[{value:"<code>ContextValue</code>",id:"contextvalue",level:2},{value:"Default context",id:"default-context",level:3},{value:"Dynamic context value",id:"dynamic-context-value",level:3},{value:"<code>ErrorFormatter</code>",id:"errorformatter",level:2},{value:"<code>Extension</code>",id:"extension",level:2},{value:"Methods",id:"methods",level:3},{value:"<code>request_started</code>",id:"request_started",level:4},{value:"<code>request_finished</code>",id:"request_finished",level:4},{value:"<code>resolve</code>",id:"resolve",level:4},{value:"Arguments",id:"arguments",level:5},{value:"<code>has_errors</code>",id:"has_errors",level:4},{value:"<code>format</code>",id:"format",level:4},{value:"<code>ExtensionList</code>",id:"extensionlist",level:2},{value:"<code>ExtensionSync</code>",id:"extensionsync",level:2},{value:"Methods",id:"methods-1",level:3},{value:"<code>resolve</code>",id:"resolve-1",level:4},{value:"Arguments",id:"arguments-1",level:5},{value:"<code>Extensions</code>",id:"extensions",level:2},{value:"<code>GraphQLResult</code>",id:"graphqlresult",level:2},{value:"<code>Middleware</code>",id:"middleware",level:2},{value:"<code>MiddlewareList</code>",id:"middlewarelist",level:2},{value:"<code>Middlewares</code>",id:"middlewares",level:2},{value:"<code>OnComplete</code>",id:"oncomplete",level:2},{value:"<code>OnConnect</code>",id:"onconnect",level:2},{value:"<code>OnDisconnect</code>",id:"ondisconnect",level:2},{value:"<code>OnOperation</code>",id:"onoperation",level:2},{value:"<code>Operation</code>",id:"operation",level:2},{value:"<code>QueryParser</code>",id:"queryparser",level:2},{value:"Default query parser",id:"default-query-parser",level:3},{value:"Custom parser",id:"custom-parser",level:3},{value:"Example parser",id:"example-parser",level:3},{value:"<code>Resolver</code>",id:"resolver",level:2},{value:"<code>RootValue</code>",id:"rootvalue",level:2},{value:"Default root value",id:"default-root-value",level:3},{value:"Dynamic root value",id:"dynamic-root-value",level:3},{value:"<code>SchemaBindable</code>",id:"schemabindable",level:2},{value:"Methods",id:"methods-2",level:3},{value:"<code>bind_to_schema</code>",id:"bind_to_schema",level:4},{value:"Example",id:"example",level:3},{value:"<code>Subscriber</code>",id:"subscriber",level:2},{value:"<code>SubscriptionResult</code>",id:"subscriptionresult",level:2},{value:"<code>ValidationRules</code>",id:"validationrules",level:2},{value:"<code>WebSocketConnectionError</code>",id:"websocketconnectionerror",level:2},{value:"Constructor",id:"constructor",level:3}];function d(e){let n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:["Ariadne uses ",(0,l.jsx)(n.a,{href:"https://www.python.org/dev/peps/pep-0484/",children:"type annotations"})," in its codebase."]}),"\n",(0,l.jsxs)(n.p,{children:["Many parts of its API share or rely on common types, importable from ",(0,l.jsx)(n.code,{children:"ariadne.types"})," module:"]}),"\n",(0,l.jsx)(n.h2,{id:"contextvalue",children:(0,l.jsx)(n.code,{children:"ContextValue"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"ContextValue = Union[Any, Callable[[Any], Any], Callable[[Any, dict], Any]]\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Type for ",(0,l.jsx)(n.code,{children:"context_value"})," option of GraphQL servers."]}),"\n",(0,l.jsxs)(n.p,{children:["Context value is accessible in GraphQL resolvers as ",(0,l.jsx)(n.code,{children:"context"})," attribute of second argument:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def resolve_example(_, info: GraphQLResolveInfo):\n    info.context  # Do something with context\n"})}),"\n",(0,l.jsx)(n.h3,{id:"default-context",children:"Default context"}),"\n",(0,l.jsxs)(n.p,{children:["Default context value passed to resolvers by Ariadne is a dictionary with single key, ",(0,l.jsx)(n.code,{children:"request"}),", which contains the HTTP framework specific representation of HTTP request:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'def resolve_example(_, info: GraphQLResolveInfo):\n    request = info.context["request"]  # Get request from context\n'})}),"\n",(0,l.jsx)(n.h3,{id:"dynamic-context-value",children:"Dynamic context value"}),"\n",(0,l.jsx)(n.p,{children:"If context value is a callable, it will be evaluated at the beginning of query execution."}),"\n",(0,l.jsx)(n.p,{children:"It's called with two arguments:"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"request"}),": an representation of HTTP request specific to the framework used."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"data"}),": an ",(0,l.jsx)(n.em,{children:"unvalidated"})," JSON which may be a valid GraphQL request payload."]}),"\n",(0,l.jsxs)(n.p,{children:["Callable can return any value which will then be passed to resolvers. Some implementations (like ",(0,l.jsx)(n.code,{children:"ariadne.asgi.GraphQL"}),") support this callable being asynchronous."]}),"\n",(0,l.jsx)(n.p,{children:"Here's an example callable that retrieves application settings from database, then uses them together with request to retrieve authenticated user. Finally it exposes all three of those to GraphQL resolvers:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from ariadne.asgi import GraphQL\nfrom starlette.requests import Request\n\nfrom .auth import get_authenticated_user\nfrom .settings import get_db_settings\nfrom .schema import schema\n\nasync def get_context_value(request: Request, _):\n    settings = await get_db_settings()\n    user = await get_authenticated_user(request, settings)\n\n    return {\n        "request"; request,\n        "settings": settings,\n        "user": user,\n    }\n\ngraphql_app = GraphQL(\n    schema,\n    context_value=get_context_value,\n)\n'})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"errorformatter",children:(0,l.jsx)(n.code,{children:"ErrorFormatter"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"ErrorFormatter = Callable[[GraphQLError, bool], dict]\n"})}),"\n",(0,l.jsx)(n.p,{children:"Type for custom error formatters."}),"\n",(0,l.jsxs)(n.p,{children:["Error formatter is a function called by Ariadne to convert ",(0,l.jsx)(n.code,{children:"GraphQLError"})," instance into JSON-serializable dict to return to client."]}),"\n",(0,l.jsx)(n.p,{children:"It receives two arguments:"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"GraphQLError"}),": an error to serialize."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"bool"}),": a ",(0,l.jsx)(n.code,{children:"debug"})," flag, which tells the formatter if it should (",(0,l.jsx)(n.code,{children:"True"}),") or shouldn't (",(0,l.jsx)(n.code,{children:"False"}),") include debugging information."]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"extension",children:(0,l.jsx)(n.code,{children:"Extension"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"class Extension(Protocol):\n    ...\n"})}),"\n",(0,l.jsx)(n.p,{children:"Base class for async extensions."}),"\n",(0,l.jsx)(n.p,{children:"Subclasses of this this class should override default methods to run\ncustom logic during Query execution."}),"\n",(0,l.jsx)(n.h3,{id:"methods",children:"Methods"}),"\n",(0,l.jsx)(n.h4,{id:"request_started",children:(0,l.jsx)(n.code,{children:"request_started"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def request_started(self, context: ContextValue) -> None:\n    ...\n"})}),"\n",(0,l.jsx)(n.p,{children:"Extension hook executed at request's start."}),"\n",(0,l.jsx)(n.h4,{id:"request_finished",children:(0,l.jsx)(n.code,{children:"request_finished"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def request_finished(self, context: ContextValue) -> None:\n    ...\n"})}),"\n",(0,l.jsx)(n.p,{children:"Extension hook executed at request's end."}),"\n",(0,l.jsx)(n.h4,{id:"resolve",children:(0,l.jsx)(n.code,{children:"resolve"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"async def resolve(\n    self,\n    next_: Resolver,\n    obj: Any,\n    info: GraphQLResolveInfo,\n    **kwargs,\n) -> Any:\n    ...\n"})}),"\n",(0,l.jsx)(n.p,{children:"Async extension hook wrapping field's value resolution."}),"\n",(0,l.jsx)(n.h5,{id:"arguments",children:"Arguments"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"next_"}),": a ",(0,l.jsx)(n.code,{children:"resolver"})," or next extension's ",(0,l.jsx)(n.code,{children:"resolve"})," method."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"obj"}),": a Python data structure to resolve value from."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"info"}),": a ",(0,l.jsx)(n.code,{children:"GraphQLResolveInfo"})," instance for executed resolver."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"**kwargs"}),": extra arguments from GraphQL to pass to resolver."]}),"\n",(0,l.jsx)(n.h4,{id:"has_errors",children:(0,l.jsx)(n.code,{children:"has_errors"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def has_errors(\n    self,\n    errors: List[GraphQLError],\n    context: ContextValue,\n) -> None:\n    ...\n"})}),"\n",(0,l.jsx)(n.p,{children:"Extension hook executed when GraphQL encountered errors."}),"\n",(0,l.jsx)(n.h4,{id:"format",children:(0,l.jsx)(n.code,{children:"format"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def format(self, context: ContextValue) -> Optional[dict]:\n    ...\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Extension hook executed to retrieve extra data to include in result's\n",(0,l.jsx)(n.a,{href:"/server/0.18/types-reference#extensions",children:(0,l.jsx)(n.code,{children:"extensions"})})," data."]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"extensionlist",children:(0,l.jsx)(n.code,{children:"ExtensionList"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"ExtensionList = Optional[List[Union[Type['Extension'], Callable[[], 'Extension']]]]\n"})}),"\n",(0,l.jsx)(n.p,{children:"List of extensions to use during GraphQL query execution."}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"extensionsync",children:(0,l.jsx)(n.code,{children:"ExtensionSync"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"class ExtensionSync(Extension):\n    ...\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Base class for sync extensions, extends ",(0,l.jsx)(n.code,{children:"Extension"}),"."]}),"\n",(0,l.jsx)(n.p,{children:"Subclasses of this this class should override default methods to run\ncustom logic during Query execution."}),"\n",(0,l.jsx)(n.h3,{id:"methods-1",children:"Methods"}),"\n",(0,l.jsx)(n.h4,{id:"resolve-1",children:(0,l.jsx)(n.code,{children:"resolve"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def resolve(\n    self,\n    next_: Resolver,\n    obj: Any,\n    info: GraphQLResolveInfo,\n    **kwargs,\n) -> Any:\n    ...\n"})}),"\n",(0,l.jsx)(n.p,{children:"Sync extension hook wrapping field's value resolution."}),"\n",(0,l.jsx)(n.h5,{id:"arguments-1",children:"Arguments"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"next_"}),": a ",(0,l.jsx)(n.code,{children:"resolver"})," or next extension's ",(0,l.jsx)(n.code,{children:"resolve"})," method."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"obj"}),": a Python data structure to resolve value from."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"info"}),": a ",(0,l.jsx)(n.code,{children:"GraphQLResolveInfo"})," instance for executed resolver."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"**kwargs"}),": extra arguments from GraphQL to pass to resolver."]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"extensions",children:(0,l.jsx)(n.code,{children:"Extensions"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Extensions = Union[Callable[[Any, Optional[ContextValue]], ExtensionList], ExtensionList]\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Type of ",(0,l.jsx)(n.a,{href:"/server/0.18/types-reference#extensions",children:(0,l.jsx)(n.code,{children:"extensions"})})," option of GraphQL servers."]}),"\n",(0,l.jsxs)(n.p,{children:["It's either a list of extensions (see ",(0,l.jsx)(n.a,{href:"/server/0.18/types-reference#extensionlist",children:(0,l.jsx)(n.code,{children:"ExtensionList"})}),"), or callable that returns this list."]}),"\n",(0,l.jsx)(n.p,{children:"Callable is evaluated with two arguments:"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Any"}),": the HTTP framework specific representation of HTTP request."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Optional[ContextValue]"}),": a context value for this request, or ",(0,l.jsx)(n.code,{children:"None"}),"."]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"graphqlresult",children:(0,l.jsx)(n.code,{children:"GraphQLResult"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"GraphQLResult = Tuple[bool, dict]\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Result type for ",(0,l.jsx)(n.code,{children:"graphql"})," and ",(0,l.jsx)(n.code,{children:"graphql_sync"})," functions."]}),"\n",(0,l.jsx)(n.p,{children:"It's a tuple of two elements:"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"bool"}),": ",(0,l.jsx)(n.code,{children:"True"})," when query was executed successfully (without any errors), ",(0,l.jsx)(n.code,{children:"False"})," otherwise."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"dict"}),": JSON-serializable query result."]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"middleware",children:(0,l.jsx)(n.code,{children:"Middleware"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Middleware = Callable[..., Any]\n"})}),"\n",(0,l.jsx)(n.p,{children:"GraphQL middleware."}),"\n",(0,l.jsx)(n.p,{children:"Due to limitations in Mypy this type is unspecific. More accurate type is:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Middleware = Callable[[Resolver, Any, GraphQLResolveInfo, KwArg[Any]], Any]\n"})}),"\n",(0,l.jsx)(n.p,{children:"Each middleware is called with three positional arguments and any number of keyword arguments:"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Resolver"}),": executed field's resolver or next GraphQL middleware."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Any"}),": a Python representation of GraphQL type to resolve value from."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"GraphQLResolveInfo"}),": an instance of GraphQL object holding data about currently executed GraphQL field, and ",(0,l.jsx)(n.code,{children:"context"})," attribute."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"KwArg[Any]"}),": if currently executed GraphQL field has any arguments, their values will be passed as keyword arguments."]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"middlewarelist",children:(0,l.jsx)(n.code,{children:"MiddlewareList"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"MiddlewareList = Optional[Sequence[Middleware]]\n"})}),"\n",(0,l.jsx)(n.p,{children:"List of middlewares to use during GraphQL query execution."}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"middlewares",children:(0,l.jsx)(n.code,{children:"Middlewares"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Middlewares = Union[Callable[[Any, Optional[ContextValue]], MiddlewareList], MiddlewareList]\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Type of ",(0,l.jsx)(n.code,{children:"middleware"})," option of GraphQL servers."]}),"\n",(0,l.jsxs)(n.p,{children:["It's either a list of middleware (see ",(0,l.jsx)(n.a,{href:"/server/0.18/types-reference#middlewarelist",children:(0,l.jsx)(n.code,{children:"MiddlewareList"})}),"), or callable that returns this list."]}),"\n",(0,l.jsx)(n.p,{children:"Callable is evaluated with two arguments:"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Any"}),": the HTTP framework specific representation of HTTP request."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Optional[ContextValue]"}),": a context value for this request, or ",(0,l.jsx)(n.code,{children:"None"}),"."]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"oncomplete",children:(0,l.jsx)(n.code,{children:"OnComplete"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"OnComplete = Callable[[WebSocket, Operation], Any]\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Type of ",(0,l.jsx)(n.code,{children:"on_complete"})," option of GraphQL websocket servers."]}),"\n",(0,l.jsx)(n.p,{children:"Callback function evaluated when individual GraphQL subscription is completed."}),"\n",(0,l.jsx)(n.p,{children:"Called with two arguments:"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"WebSocket"}),": the HTTP framework specific representation of websocket connection."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"/server/0.18/types-reference#operation",children:(0,l.jsx)(n.code,{children:"Operation"})}),": an object with closed subscription's data."]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"onconnect",children:(0,l.jsx)(n.code,{children:"OnConnect"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"OnConnect = Callable[[WebSocket, Any], Any]\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Type of ",(0,l.jsx)(n.code,{children:"on_connect"})," option of GraphQL websocket servers."]}),"\n",(0,l.jsxs)(n.p,{children:["Callback function evaluated when new websocket connection was established. Usually used to update connection's ",(0,l.jsx)(n.code,{children:"scope"})," with contents of initial message."]}),"\n",(0,l.jsx)(n.p,{children:"Called with two arguments:"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"WebSocket"}),": the HTTP framework specific representation of websocket connection."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Any"}),": a data sent in WebSocket message."]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"ondisconnect",children:(0,l.jsx)(n.code,{children:"OnDisconnect"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"OnDisconnect = Callable[[WebSocket], Any]\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Type of ",(0,l.jsx)(n.code,{children:"on_disconnect"})," option of GraphQL websocket servers."]}),"\n",(0,l.jsx)(n.p,{children:"Callback function evaluated when websocket connection is closed."}),"\n",(0,l.jsx)(n.p,{children:"Called with one arguments:"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"WebSocket"}),": the HTTP framework specific representation of websocket connection."]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"onoperation",children:(0,l.jsx)(n.code,{children:"OnOperation"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"OnOperation = Callable[[WebSocket, Operation], Any]\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Type of ",(0,l.jsx)(n.code,{children:"on_operation"})," option of GraphQL websocket servers."]}),"\n",(0,l.jsx)(n.p,{children:"Callback function evaluated when individual GraphQL subscription is initiated."}),"\n",(0,l.jsx)(n.p,{children:"Called with two arguments:"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"WebSocket"}),": the HTTP framework specific representation of websocket connection."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"/server/0.18/types-reference#operation",children:(0,l.jsx)(n.code,{children:"Operation"})}),": an object with initiated subscription's data."]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"operation",children:(0,l.jsx)(n.code,{children:"Operation"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"class Operation:\n    ...\n"})}),"\n",(0,l.jsx)(n.p,{children:"Dataclass representing single active GraphQL operation."}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"queryparser",children:(0,l.jsx)(n.code,{children:"QueryParser"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"QueryParser = Callable[[ContextValue, Dict[str, Any]], DocumentNode]\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Type of ",(0,l.jsx)(n.code,{children:"query_parser"})," option of GraphQL servers."]}),"\n",(0,l.jsxs)(n.p,{children:["Enables customization of server's GraphQL parsing logic. If not set or ",(0,l.jsx)(n.code,{children:"None"}),", default parser is used instead."]}),"\n",(0,l.jsx)(n.h3,{id:"default-query-parser",children:"Default query parser"}),"\n",(0,l.jsxs)(n.p,{children:["Default query parser used by Ariadne is ",(0,l.jsx)(n.code,{children:"parse"})," function from the ",(0,l.jsx)(n.code,{children:"graphql"})," package."]}),"\n",(0,l.jsx)(n.h3,{id:"custom-parser",children:"Custom parser"}),"\n",(0,l.jsx)(n.p,{children:"Custom parser is a function or callable accepting two arguments:"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"context_value"}),": a context value specific to this GraphQL server."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"data"}),": a ",(0,l.jsx)(n.code,{children:"dict"})," with validated GraphQL request data (contains ",(0,l.jsx)(n.code,{children:"query"})," string, optionally also has ",(0,l.jsx)(n.code,{children:"operationName"})," string or ",(0,l.jsx)(n.code,{children:"variables"})," dictionary)."]}),"\n",(0,l.jsxs)(n.p,{children:["Parser is required to return ",(0,l.jsx)(n.code,{children:"DocumentNode"})," with parsed query or raise ",(0,l.jsx)(n.code,{children:"GraphQLError"})," when query is data invalid ."]}),"\n",(0,l.jsxs)(n.p,{children:["Asynchronous parsers are ",(0,l.jsx)(n.strong,{children:"not"})," supported."]}),"\n",(0,l.jsx)(n.h3,{id:"example-parser",children:"Example parser"}),"\n",(0,l.jsx)(n.p,{children:"Below code defines custom parser that discards query string altogether, using predefined queries instead:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from graphql import GraphQLError, parse\n\n\nclass AllowedQueriesParser:\n    def __init__(self):\n        self._queries = {}\n\n    def __call__(self, _, data):\n        operation_name = data.get("operationName")\n        if not operation_name:\n            raise GraphQLError(\n                "Explicit \'operationName\' is required by the server."\n            )\n        if operation_name not in self._queries:\n            raise GraphQLError(\n                f"Operation \'operation_name\' is not supported by the server."\n            )\n\n        return self._queries[operation_name]\n\n    def add_query(self, operation_name: str, query: str):\n        self._queries[operation_name] = parse(query)\n\n\nallowed_queries_parser = AllowedQueriesParser()\n\nallowed_queries_parser.add_query(\n    "GetUsers",\n    """\n    query GetUsers {\n        users {\n            id\n            name\n        }\n    }\n    """\n)\n'})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"resolver",children:(0,l.jsx)(n.code,{children:"Resolver"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Resolver = Callable[..., Any]\n"})}),"\n",(0,l.jsx)(n.p,{children:"Type for resolver functions."}),"\n",(0,l.jsx)(n.p,{children:"Due to limitations in Mypy this type is unspecific. More accurate type is:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Resolver = Callable[[Any, GraphQLResolveInfo, KwArg[Any]], Any]\n"})}),"\n",(0,l.jsx)(n.p,{children:"Each resolver is called with two positional arguments and any number of keyword arguments:"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Any"}),": a Python representation of GraphQL type to resolve value from."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"GraphQLResolveInfo"}),": an instance of GraphQL object holding data about currently executed GraphQL field, and ",(0,l.jsx)(n.code,{children:"context"})," attribute."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"KwArg[Any]"}),": if currently executed GraphQL field has any arguments, their values will be passed as keyword arguments."]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"rootvalue",children:(0,l.jsx)(n.code,{children:"RootValue"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"RootValue = Union[Any, Callable[[Optional[Any], DocumentNode], Any], Callable[[Optional[Any], Optional[str], Optional[dict], DocumentNode], Any]]\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Type for ",(0,l.jsx)(n.code,{children:"root_value"})," option of GraphQL servers."]}),"\n",(0,l.jsxs)(n.p,{children:['"Root value" is a value passed to root resolvers (resolvers set on ',(0,l.jsx)(n.code,{children:"Query"}),", ",(0,l.jsx)(n.code,{children:"Mutation"})," and ",(0,l.jsx)(n.code,{children:"Subscription"})," fields) as first argument."]}),"\n",(0,l.jsx)(n.h3,{id:"default-root-value",children:"Default root value"}),"\n",(0,l.jsxs)(n.p,{children:["Ariadne doesn't define root value by default. First argument of root resolvers is ",(0,l.jsx)(n.code,{children:"None"}),"."]}),"\n",(0,l.jsx)(n.h3,{id:"dynamic-root-value",children:"Dynamic root value"}),"\n",(0,l.jsx)(n.p,{children:"If root value is a callable, it will be evaluated at the beginning of query handling. It's called with four arguments:"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"context_value"}),": a context value specific to this GraphQL server."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"operation_name"}),": a ",(0,l.jsx)(n.code,{children:"str"})," with name of operation to execute (or ",(0,l.jsx)(n.code,{children:"None"}),")."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"variables"}),": a ",(0,l.jsx)(n.code,{children:"dict"})," with variables to pass to query's resolvers (or ",(0,l.jsx)(n.code,{children:"None"}),")."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"document"}),": a ",(0,l.jsx)(n.code,{children:"DocumentNode"})," with parsed GraphQL query."]}),"\n",(0,l.jsxs)(n.p,{children:["Callable can return any value which then will be passed to root resolvers. Some implementations (like ",(0,l.jsx)(n.code,{children:"ariadne.asgi.GraphQL"}),") support this callable being asynchronous."]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"schemabindable",children:(0,l.jsx)(n.code,{children:"SchemaBindable"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"class SchemaBindable(Protocol):\n    ...\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Base class for ",(0,l.jsx)(n.a,{href:"/server/0.18/bindables",children:"bindable"})," types."]}),"\n",(0,l.jsxs)(n.p,{children:["Subclasses should extend the ",(0,l.jsx)(n.code,{children:"bind_to_schema"})," method with custom logic for\npopulating an instance of ",(0,l.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," with Python logic and values."]}),"\n",(0,l.jsx)(n.h3,{id:"methods-2",children:"Methods"}),"\n",(0,l.jsx)(n.h4,{id:"bind_to_schema",children:(0,l.jsx)(n.code,{children:"bind_to_schema"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def bind_to_schema(self, schema: GraphQLSchema) -> None:\n    ...\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Binds this ",(0,l.jsx)(n.code,{children:"Schema[Bindable"}),"](bindables.md) instance to the instance of ",(0,l.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"}),"."]}),"\n",(0,l.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,l.jsxs)(n.p,{children:["Example ",(0,l.jsx)(n.code,{children:"InputType"})," ",(0,l.jsx)(n.a,{href:"/server/0.18/bindables",children:"bindable"})," that sets Python names for fields of GraphQL input:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from ariadne import SchemaBindable\nfrom graphql import GraphQLInputType\n\nclass InputType(SchemaBindable):\n    _name: str\n    _fields: dict[str, str]\n\n    def __init__(self, name: str, fields: dict[str, str] | None):\n        self._name = name\n        self._fields = fields or {}\n\n    def set_field_out_name(self, field: str, out_name: str):\n        self._fields[field] = out_name\n\n    def bind_to_schema(self, schema: GraphQLSchema) -> None:\n        graphql_type = schema.get_type(self._name)\n        if not graphql_type:\n            raise ValueError(\n                "Type %s is not defined in the schema" % self.name\n            )\n        if not isinstance(graphql_type, GraphQLInputType):\n            raise ValueError(\n                "%s is defined in the schema, but it is instance of %s (expected %s)"\n                % (self.name, type(graphql_type).__name__, GraphQLInputType.__name__)\n            )\n\n        for field, out_name in self._fields.items():\n            schema_field = graphql_type.fields.get(field)\n            if not schema_field:\n                raise ValueError(\n                    "Type %s does not define the %s field" % (self.name, field)\n                )\n\n            schema_field.out_name = out_name\n'})}),"\n",(0,l.jsx)(n.p,{children:"Usage:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from ariadne import QueryType, make_executable_schema\n\nfrom .input_type import InputType\nfrom .users.models import User\n\ninput_type = InputType(\n    "UserInput",\n    {\n        "fullName": "full_name",\n        "yearOfBirth": "year_of_birth",\n    }\n)\n\nquery_type = QueryType()\n\n@query_type.field("countUsers")\ndef resolve_count_users(*_, input):\n    qs = User.objects\n\n    if input:\n        if input["full_name"]:\n            qs = qs.filter(full_name__ilike=input["full_name"])\n        if input["year_of_birth"]:\n            qs = qs.filter(dob__year=input["year_of_birth"])\n\n    return qs.count()\n\n\nschema = make_executable_schema(\n    """\n    type Query {\n        countUsers(input: UserInput!): Int!\n    }\n\n    input UserInput {\n        fullName: String\n        yearOfBirth: Int\n    }\n    """,\n    query_type,\n    input_type,\n)\n'})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"subscriber",children:(0,l.jsx)(n.code,{children:"Subscriber"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Subscriber = Callable[..., AsyncGenerator]\n"})}),"\n",(0,l.jsx)(n.p,{children:"Type for subscription source functions."}),"\n",(0,l.jsx)(n.p,{children:"Due to limitations in Mypy this type is unspecific. More accurate type is:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"Subscriber = Callable[[Any, GraphQLResolveInfo, KwArg[Any]], AsyncGenerator]\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Receives same arguments as ",(0,l.jsx)(n.code,{children:"Resolver"}),"."]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"subscriptionresult",children:(0,l.jsx)(n.code,{children:"SubscriptionResult"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"SubscriptionResult = Tuple[bool, Union[List[dict], AsyncGenerator[ExecutionResult, None]]]\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Result type for ",(0,l.jsx)(n.code,{children:"subscribe"})," function."]}),"\n",(0,l.jsx)(n.p,{children:"It's a tuple of two elements:"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"bool"}),": ",(0,l.jsx)(n.code,{children:"True"})," when query was executed successfully (without any errors), ",(0,l.jsx)(n.code,{children:"False"})," otherwise."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"dict or generator"}),": JSON-serializable query result or asynchronous generator with subscription's results. Depends if query was success or not."]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"validationrules",children:(0,l.jsx)(n.code,{children:"ValidationRules"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"ValidationRules = Union[Collection[Type[ASTValidationRule]], Callable[[Optional[Any], DocumentNode, dict], Optional[Collection[Type[ASTValidationRule]]]]]\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Type of ",(0,l.jsx)(n.code,{children:"validation_rules"})," option of GraphQL servers."]}),"\n",(0,l.jsx)(n.p,{children:"Enables extending of server's query validation logic."}),"\n",(0,l.jsx)(n.p,{children:"Is either a callable that should return list of validation rules to use for GraphQL request, or list of validation rules."}),"\n",(0,l.jsx)(n.p,{children:"Callable is evaluated with three arguments:"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Optional[Any]"}),": a context value for this request, or ",(0,l.jsx)(n.code,{children:"None"}),"."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"DocumentNode"}),": a ",(0,l.jsx)(n.code,{children:"document"})," with parsed GraphQL query."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"dict"}),": a GraphQL request's data."]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"websocketconnectionerror",children:(0,l.jsx)(n.code,{children:"WebSocketConnectionError"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"class WebSocketConnectionError(Exception):\n    ...\n"})}),"\n",(0,l.jsx)(n.p,{children:"Special error class enabling custom error reporting for on_connect"}),"\n",(0,l.jsx)(n.h3,{id:"constructor",children:"Constructor"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def __init__(self, payload: Optional[Union[dict, str]] = None):\n    ...\n"})})]})}function h(e={}){let{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},84429:function(e,n,s){s.d(n,{R:()=>o,x:()=>t});var r=s(96540);let l={},i=r.createContext(l);function o(e){let n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);