"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["43915"],{88446:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>o,toc:()=>l,default:()=>c,metadata:()=>a,assets:()=>p,contentTitle:()=>i});var a=JSON.parse('{"id":"fastapi-integration","title":"FastAPI integration","description":"Mounting ASGI application","source":"@site/docs/server/fastapi-integration.md","sourceDirName":".","slug":"/fastapi-integration","permalink":"/server/next/fastapi-integration","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"fastapi-integration","title":"FastAPI integration","sidebar_label":"FastAPI"},"sidebar":"tutorialSidebar","previous":{"title":"Django","permalink":"/server/next/django-integration"},"next":{"title":"Flask","permalink":"/server/next/flask-integration"}}'),r=t(74848),s=t(84429);let o={id:"fastapi-integration",title:"FastAPI integration",sidebar_label:"FastAPI"},i,p={},l=[{value:"Mounting ASGI application",id:"mounting-asgi-application",level:2},{value:"GraphQL routes",id:"graphql-routes",level:2}];function u(e){let n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"mounting-asgi-application",children:"Mounting ASGI application"}),"\n",(0,r.jsx)(n.p,{children:"Ariadne is an ASGI application that can be mounted under FastAPI. It will support both HTTP and WebSocket traffic used by subscriptions:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from ariadne import QueryType, make_executable_schema\nfrom ariadne.asgi import GraphQL\nfrom fastapi import FastAPI\n\ntype_defs = """\n    type Query {\n        hello: String!\n    }\n"""\n\nquery = QueryType()\n\n\n@query.field("hello")\ndef resolve_hello(*_):\n    return "Hello world!"\n\n\n# Create executable schema instance\nschema = make_executable_schema(type_defs, query)\n\n# Mount Ariadne GraphQL as sub-application for FastAPI\napp = FastAPI()\n\napp.mount("/graphql/", GraphQL(schema, debug=True))\n'})}),"\n",(0,r.jsx)(n.h2,{id:"graphql-routes",children:"GraphQL routes"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"GraphQL"})," provides methods that can be used in FastAPI routes:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from ariadne import QueryType, make_executable_schema\nfrom ariadne.asgi import GraphQL\nfrom ariadne.asgi.handlers import GraphQLTransportWSHandler\nfrom fastapi import FastAPI, Depends, Request\nfrom fastapi.websockets import WebSocket\nfrom myapp.database import get_database_session\n\ntype_defs = """\n    type Query {\n        hello: String!\n    }\n"""\n\nquery = QueryType()\n\n\n@query.field("hello")\ndef resolve_hello(*_):\n    return "Hello world!"\n\n\n# Create executable schema instance\nschema = make_executable_schema(type_defs, query)\n\n# Custom context setup method\ndef get_context_value(request_or_ws: Request | WebSocket, _data) -> dict:\n    return {\n        "request": request_or_ws,\n        "db": request_or_ws.scope["db"],\n    }\n\n# Create GraphQL App instance\ngraphql_app = GraphQL(\n    schema,\n    debug=True,\n    context_value=get_context_value,\n    websocket_handler=GraphQLTransportWSHandler(),\n)\n\n# Create FastAPI instance\napp = FastAPI()\n\n\n# Handle GET requests to serve GraphQL explorer\n# Handle OPTIONS requests for CORS\n@app.get("/graphql/")\n@app.options("/graphql/")\nasync def handle_graphql_explorer(request: Request):\n    return await graphql_app.handle_request(request)\n\n# Handle POST requests to execute GraphQL queries\n@app.post("/graphql/")\nasync def handle_graphql_query(\n    request: Request,\n    db = Depends(get_database_session),\n):\n    # Expose database connection to the GraphQL through request\'s scope\n    request.scope["db"] = db\n    return await graphql_app.handle_request(request)\n\n\n# Handle GraphQL subscriptions over websocket\n@app.websocket("/graphql")\nasync def graphql_subscriptions(\n    websocket: WebSocket,\n    db = Depends(get_database_session),\n):\n    # Expose database connection to the GraphQL through request\'s scope\n    websocket.scope["db"] = db\n    await graphql_app.handle_websocket(websocket)\n'})})]})}function c(e={}){let{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},84429:function(e,n,t){t.d(n,{R:()=>o,x:()=>i});var a=t(96540);let r={},s=a.createContext(r);function o(e){let n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);