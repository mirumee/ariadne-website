"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["22667"],{8019:function(e,n,r){r.r(n),r.d(n,{frontMatter:()=>s,toc:()=>l,default:()=>p,metadata:()=>t,assets:()=>d,contentTitle:()=>o});var t=JSON.parse('{"id":"apollo-federation","title":"Apollo Federation","description":"Apollo Federation is an approach for composing multiple GraphQL services into one data graph, queryable from a single GraphQL server.","source":"@site/server_versioned_docs/version-0.16/apollo-federation.md","sourceDirName":".","slug":"/apollo-federation","permalink":"/server/0.16/apollo-federation","draft":false,"unlisted":false,"tags":[],"version":"0.16","frontMatter":{"id":"apollo-federation","title":"Apollo Federation"},"sidebar":"tutorialSidebar","previous":{"title":"Logging","permalink":"/server/0.16/logging"},"next":{"title":"Apollo Tracing","permalink":"/server/0.16/apollo-tracing"}}'),i=r(74848),a=r(84429);let s={id:"apollo-federation",title:"Apollo Federation"},o,d={},l=[{value:"Federated architecture example",id:"federated-architecture-example",level:2},{value:"Federated Gateway",id:"federated-gateway",level:3},{value:"Example queries",id:"example-queries",level:3}];function c(e){let n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://www.apollographql.com/docs/apollo-server/federation/introduction/",children:"Apollo Federation"})," is an approach for composing multiple GraphQL services into one data graph, queryable from a single GraphQL server."]}),"\n",(0,i.jsxs)(n.p,{children:["Ariadne supports building federated schemas through use of special ",(0,i.jsx)(n.a,{href:"https://www.apollographql.com/docs/apollo-server/federation/federation-spec/",children:"types and directives introduced by federation specification"})," that instruct Ariadne how it's GraphQL schema types and fields combine with types and fields defined in other GraphQL schemas forming the Federation."]}),"\n",(0,i.jsx)(n.h2,{id:"federated-architecture-example",children:"Federated architecture example"}),"\n",(0,i.jsx)(n.p,{children:"Let's say we have three separate GraphQL services that we want to convert into a federated service:"}),"\n",(0,i.jsx)(n.p,{children:"Users Service:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"type Query {\n  me: User\n}\n\ntype User {\n  id: ID!\n  name: String\n  email: String!\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Reviews Service:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"type Query {\n  reviews(first: Int = 5): [Review]\n}\n\ntype Review {\n  id: ID!\n  body: String\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Products Service:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"type Query {\n  topProducts(first: Int = 5): [Product]\n}\n\ntype Product {\n  upc: String!\n  name: String\n  price: Int\n  weight: Int\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Our goal is to add a connection between each of them and combine the above services into a single graph."}),"\n",(0,i.jsxs)(n.p,{children:["First, we need to add the ",(0,i.jsx)(n.code,{children:"@key"})," directive to a type's definition as to allow other services to refer to it, or extend that type. This directive tells other services which fields to use in order to uniquely identify a particular instance of the type."]}),"\n",(0,i.jsxs)(n.p,{children:["In our case, we should add it to the ",(0,i.jsx)(n.code,{children:"User"}),", ",(0,i.jsx)(n.code,{children:"Review"})," and ",(0,i.jsx)(n.code,{children:"Product"})," types:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:'type User @key(fields: "email") {\n  id: ID!\n  name: String\n  email: String!\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:'type Review @key(fields: "id") {\n  id: ID!\n  body: String\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:'type Product @key(fields: "upc") {\n  upc: String!\n  name: String\n  price: Int\n  weight: Int\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"The next step is to connect together our types in the distributed architecture."}),"\n",(0,i.jsxs)(n.p,{children:["Let's extend types that are defined by another implementing service to illustrate the power of the federation. In our case, the reviews service extends the ",(0,i.jsx)(n.code,{children:"User"})," and ",(0,i.jsx)(n.code,{children:"Product"})," types by adding a reviews field to them:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:'type Review @key(fields: "id") {\n  id: ID!\n  body: String\n  author: User @provides(fields: "email")\n  product: Product @provides(fields: "upc")\n}\n\ntype User @key(fields: "email") @extends {\n  email: String! @external\n  reviews: [Review]\n}\n\ntype Product @key(fields: "upc") @extends {\n  upc: String! @external\n  reviews: [Review]\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Now our federated schemas are ready. It's time for resolvers."}),"\n",(0,i.jsxs)(n.p,{children:["We need to add ",(0,i.jsx)(n.code,{children:"reference resolvers"})," for all our federated types. A reference resolver tells the gateway how to fetch an entity by its ",(0,i.jsx)(n.code,{children:"@key"})," fields."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# service_users.py\nfrom ariadne.contrib.federation import FederatedObjectType\n\n\nuser = FederatedObjectType("User")\n\n@user.reference_resolver\ndef resolve_user_reference(_, _info, representation):\n    return get_user_by_email(representation.get("email"))\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# service_products.py\nfrom ariadne.contrib.federation import FederatedObjectType\n\n\nproduct = FederatedObjectType("Product")\n\n@product.reference_resolver\ndef resolve_product_reference(_, _info, representation):\n    return get_product_by_upc(representation["upc"])\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# service_reviews.py\nfrom ariadne.contrib.federation import FederatedObjectType\n\ntype_defs = """\n  type Query {\n    reviews(first: Int = 5): [Review]\n  }\n\n  type Review @key(fields: "id") {\n    id: ID!\n    body: String\n    author: User @provides(fields: "email")\n    product: Product @provides(fields: "upc")\n  }\n\n  type User @key(fields: "email") @extends {\n    email: String! @external\n    reviews: [Review]\n  }\n\n  type Product @key(fields: "upc") @extends {\n    upc: String! @external\n    reviews: [Review]\n  }\n"""\n\nreview = FederatedObjectType("Review")\nuser = FederatedObjectType("User")\nproduct = FederatedObjectType("Product")\n\n@review.reference_resolver\ndef resolve_reviews_reference(_, _info, representation):\n    return get_review_by_id(representation["id"])\n\n\n@review.field("author")\ndef resolve_review_author(review, *_):\n    return {"email": review["user"]["email"]}\n\n\n@review.field("product")\ndef resolve_review_product(review, *_):\n    return {"upc": review["product"]["upc"]}\n\n\n@user.field("reviews")\ndef resolve_user_reviews(representation, *_):\n    return get_user_reviews(representation["email"])\n\n\n@product.field("reviews")\ndef resolve_product_reviews(representation, *_):\n    return get_product_reviews(representation["upc"])\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Finally, we need to use the ",(0,i.jsx)(n.code,{children:"make_federated_schema"})," function in each of our services to augment the schema definition with federation support:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import uvicorn\nfrom ariadne.asgi import GraphQL\nfrom ariadne.contrib.federation import make_federated_schema\n\nfrom .myapp import type_defs, resolvers, port\n\n\nschema = make_federated_schema(type_defs, resolvers)\napplication = GraphQL(schema)\n\nif __name__ == "__main__":\n    uvicorn.run(application, host="0.0.0.0", port=port)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"federated-gateway",children:"Federated Gateway"}),"\n",(0,i.jsxs)(n.p,{children:["We need to set up a federated gateway that fetches the schema from each implementing service and composes those schemas into a single graph. We use ",(0,i.jsx)(n.a,{href:"https://www.apollographql.com/docs/apollo-server/federation/implementing/#running-a-gateway",children:"Apollo Gateway"})," for that."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// gateway.js\nconst { ApolloServer } = require('apollo-server');\nconst { ApolloGateway } = require(\"@apollo/gateway\");\n\nconst gateway = new ApolloGateway({\n  serviceList: [\n    { name: 'users', url: 'http://localhost:5001' },\n    { name: 'reviews', url: 'http://localhost:5002' },\n    { name: 'products', url: 'http://localhost:5003' },\n  ],\n});\n\nconst server = new ApolloServer({ gateway });\n\nserver.listen().then(({ url }) => {\n  console.log(`\u{1F680} Server ready at ${url}`);\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"example-queries",children:"Example queries"}),"\n",(0,i.jsx)(n.p,{children:"Now it's time to verify our service and reap the benefits of federated architecture by executing GraphQL operations as if it were implemented as a monolithic service:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"query {\n  me {\n    name\n    email\n    reviews {\n      body\n      product {\n        upc\n        name\n      }\n    }\n  }\n  topProducts(first: 3) {\n    upc\n    name\n    reviews {\n      body\n      author {\n        name\n        email\n      }\n    }\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Fully working demo is available on ",(0,i.jsx)(n.a,{href:"https://github.com/bogdal/ariadne-federation-demo",children:"GitHub"}),"."]})]})}function p(e={}){let{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},84429:function(e,n,r){r.d(n,{R:()=>s,x:()=>o});var t=r(96540);let i={},a=t.createContext(i);function s(e){let n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);