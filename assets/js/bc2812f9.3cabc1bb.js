"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["92707"],{51761:function(e){e.exports=JSON.parse('{"version":{"pluginId":"server","version":"0.20","label":"0.20","banner":"unmaintained","badge":true,"noIndex":false,"className":"docs-version-0.20","isLast":false,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"Docs","items":[{"type":"link","label":"Introduction","href":"/server/0.20/intro","docId":"intro","unlisted":false},{"type":"link","label":"Resolvers","href":"/server/0.20/resolvers","docId":"resolvers","unlisted":false},{"type":"link","label":"Mutations","href":"/server/0.20/mutations","docId":"mutations","unlisted":false},{"type":"link","label":"Inputs","href":"/server/0.20/inputs","docId":"inputs","unlisted":false},{"type":"link","label":"Error messaging","href":"/server/0.20/error-messaging","docId":"error-messaging","unlisted":false},{"type":"link","label":"Name case conversion","href":"/server/0.20/case-conversion","docId":"case-conversion","unlisted":false},{"type":"link","label":"Custom scalars","href":"/server/0.20/scalars","docId":"scalars","unlisted":false},{"type":"link","label":"Enumeration types","href":"/server/0.20/enums","docId":"enums","unlisted":false},{"type":"link","label":"Union types","href":"/server/0.20/unions","docId":"unions","unlisted":false},{"type":"link","label":"Interface types","href":"/server/0.20/interfaces","docId":"interfaces","unlisted":false},{"type":"link","label":"Subscriptions","href":"/server/0.20/subscriptions","docId":"subscriptions","unlisted":false},{"type":"link","label":"Dataloaders","href":"/server/0.20/dataloaders","docId":"dataloaders","unlisted":false},{"type":"link","label":"File uploads","href":"/server/0.20/file-uploads","docId":"file-uploads","unlisted":false},{"type":"link","label":"Documenting schema","href":"/server/0.20/documenting-schema","docId":"documenting-schema","unlisted":false},{"type":"link","label":"Modularization","href":"/server/0.20/modularization","docId":"modularization","unlisted":false},{"type":"link","label":"Bindables","href":"/server/0.20/bindables","docId":"bindables","unlisted":false},{"type":"link","label":"Schema directives","href":"/server/0.20/schema-directives","docId":"schema-directives","unlisted":false},{"type":"link","label":"Local development","href":"/server/0.20/local-development","docId":"local-development","unlisted":false},{"type":"link","label":"Logging","href":"/server/0.20/logging","docId":"logging","unlisted":false},{"type":"link","label":"GraphQL explorers","href":"/server/0.20/explorers","docId":"explorers","unlisted":false},{"type":"link","label":"Apollo Federation","href":"/server/0.20/apollo-federation","docId":"apollo-federation","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Monitoring","items":[{"type":"link","label":"Apollo Tracing","href":"/server/0.20/apollo-tracing","docId":"apollo-tracing","unlisted":false},{"type":"link","label":"OpenTracing","href":"/server/0.20/open-tracing","docId":"open-tracing","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Security","items":[{"type":"link","label":"Security Overview","href":"/server/0.20/security-overview","docId":"security-overview","unlisted":false},{"type":"link","label":"Hiding field suggestions","href":"/server/0.20/hiding-field-suggestions","docId":"hiding-field-suggestions","unlisted":false},{"type":"link","label":"Disabling stack traces","href":"/server/0.20/disabling-stack-traces","docId":"disabling-stack-traces","unlisted":false},{"type":"link","label":"Continuous security testing","href":"/server/0.20/continuous-security-testing","docId":"continuous-security-testing","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Servers","items":[{"type":"link","label":"ASGI application","href":"/server/0.20/asgi","docId":"asgi","unlisted":false},{"type":"link","label":"WSGI application","href":"/server/0.20/wsgi","docId":"wsgi","unlisted":false},{"type":"link","label":"AWS lambda","href":"/server/0.20/aws-lambda","docId":"aws-lambda","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Integrations","items":[{"type":"link","label":"Django","href":"/server/0.20/django-integration","docId":"django-integration","unlisted":false},{"type":"link","label":"FastAPI","href":"/server/0.20/fastapi-integration","docId":"fastapi-integration","unlisted":false},{"type":"link","label":"Flask","href":"/server/0.20/flask-integration","docId":"flask-integration","unlisted":false},{"type":"link","label":"Starlette","href":"/server/0.20/starlette-integration","docId":"starlette-integration","unlisted":false},{"type":"link","label":"Other technologies","href":"/server/0.20/other-integrations","docId":"other-integrations","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Extensions","items":[{"type":"link","label":"Extension system","href":"/server/0.20/extensions","docId":"extensions","unlisted":false},{"type":"link","label":"Middleware","href":"/server/0.20/middleware","docId":"middleware","unlisted":false},{"type":"link","label":"Query validators","href":"/server/0.20/query-validators","docId":"query-validators","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"API reference","items":[{"type":"link","label":"ariadne","href":"/server/0.20/api-reference","docId":"api-reference","unlisted":false},{"type":"link","label":"ariadne.asgi","href":"/server/0.20/asgi-reference","docId":"asgi-reference","unlisted":false},{"type":"link","label":"ariadne.asgi.handlers","href":"/server/0.20/asgi-handlers-reference","docId":"asgi-handlers-reference","unlisted":false},{"type":"link","label":"ariadne.constants","href":"/server/0.20/constants-reference","docId":"constants-reference","unlisted":false},{"type":"link","label":"ariadne.exceptions","href":"/server/0.20/exceptions-reference","docId":"exceptions-reference","unlisted":false},{"type":"link","label":"ariadne.types","href":"/server/0.20/types-reference","docId":"types-reference","unlisted":false},{"type":"link","label":"ariadne.wsgi","href":"/server/0.20/wsgi-reference","docId":"wsgi-reference","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Other","items":[{"type":"link","label":"Ariadne logo","href":"/server/0.20/logo","docId":"logo","unlisted":false}],"collapsed":true,"collapsible":true}]},"docs":{"api-reference":{"id":"api-reference","title":"API reference","description":"Following items are importable directly from ariadne package:","sidebar":"tutorialSidebar"},"apollo-federation":{"id":"apollo-federation","title":"Apollo Federation","description":"Apollo Federation is an approach for composing multiple GraphQL services into one data graph, queryable from a single GraphQL server.","sidebar":"tutorialSidebar"},"apollo-tracing":{"id":"apollo-tracing","title":"Apollo Tracing","description":"Deprecation notice: Apollo Tracing has been deprecated and will be removed in a future version of Ariadne.","sidebar":"tutorialSidebar"},"asgi":{"id":"asgi","title":"ASGI application","description":"Ariadne provides a GraphQL class that implements a production-ready ASGI application.","sidebar":"tutorialSidebar"},"asgi-handlers-reference":{"id":"asgi-handlers-reference","title":"ASGI handlers reference","description":"The ariadne.asgi.handlers package exports following","sidebar":"tutorialSidebar"},"asgi-reference":{"id":"asgi-reference","title":"ASGI reference","description":"The ariadne.asgi package exports the GraphQL ASGI application:","sidebar":"tutorialSidebar"},"aws-lambda":{"id":"aws-lambda","title":"AWS lambda","description":"Multiple ways to implement an AWS Lambda function for GraphQL using Ariadne exist.","sidebar":"tutorialSidebar"},"bindables":{"id":"bindables","title":"Bindables","description":"In Ariadne bindables are special types implementing the logic required for binding Python callables and values to the GraphQL schema.","sidebar":"tutorialSidebar"},"case-conversion":{"id":"case-conversion","title":"Name case conversion","description":"Most common convention for naming fields and arguments in GraphQL is the camel case, where \\"user birth date\\" is represented as userBirthDate. This is different from Python where object attributes, function names and arguments use the snake case and same \\"user birth date\\" becomes userbirthdate.","sidebar":"tutorialSidebar"},"constants-reference":{"id":"constants-reference","title":"Constants reference","description":"Following constants are importable from ariadne.constants module:","sidebar":"tutorialSidebar"},"continuous-security-testing":{"id":"continuous-security-testing","title":"Continuous security testing","description":"Continuous security testing","sidebar":"tutorialSidebar"},"dataloaders":{"id":"dataloaders","title":"Dataloaders","description":"Dataloaders are a GraphQL pattern for solving the N+1 problem, where retrieval of N number of items results in N + 1 number of data retrieval operations.","sidebar":"tutorialSidebar"},"disabling-stack-traces":{"id":"disabling-stack-traces","title":"Disabling stack traces","description":"Stack traces","sidebar":"tutorialSidebar"},"django-integration":{"id":"django-integration","title":"Django integration","description":"ariadnedjango package can be used to add GraphQL APIs implemented with Ariadne to Django projects.","sidebar":"tutorialSidebar"},"documenting-schema":{"id":"documenting-schema","title":"Documenting schema","description":"The GraphQL specification includes two features that make documentation and schema exploration easy and powerful.  Those features are descriptions and introspection queries.","sidebar":"tutorialSidebar"},"enums":{"id":"enums","title":"Enumeration types","description":"Ariadne supports GraphQL enumeration types which by default are represented as strings in Python logic:","sidebar":"tutorialSidebar"},"error-messaging":{"id":"error-messaging","title":"Error messaging","description":"If you\'ve experimented with GraphQL, you should be familiar that when things don\'t go according to plan, GraphQL servers include an additional key errors in the returned response:","sidebar":"tutorialSidebar"},"exceptions-reference":{"id":"exceptions-reference","title":"Exceptions reference","description":"Ariadne defines some custom exception types that can be imported from ariadne.exceptions module:","sidebar":"tutorialSidebar"},"explorers":{"id":"explorers","title":"GraphQL explorers","description":"Explorers provide web-based GUI for interacting with your GraphQL API. Ariadne implements support for multiple explorers out of the box. It also supports disabling explorer UI altogether.","sidebar":"tutorialSidebar"},"extensions":{"id":"extensions","title":"Extension system","description":"Ariadne implements simple extension system that allows developers to inject custom python logic into the query execution process. This system was designed with performance measurement extensions in mind but may potentially support other use cases.","sidebar":"tutorialSidebar"},"fastapi-integration":{"id":"fastapi-integration","title":"FastAPI integration","description":"Mounting ASGI application","sidebar":"tutorialSidebar"},"file-uploads":{"id":"file-uploads","title":"File uploads","description":"Ariadne implements the GraphQL multipart request specification that describes how file uploads should be implemented by both API clients and servers.","sidebar":"tutorialSidebar"},"flask-integration":{"id":"flask-integration","title":"Flask integration","description":"The following example presents a basic GraphQL server built with Flask:","sidebar":"tutorialSidebar"},"hiding-field-suggestions":{"id":"hiding-field-suggestions","title":"Hiding field suggestions","description":"Field suggestion","sidebar":"tutorialSidebar"},"inputs":{"id":"inputs","title":"Inputs","description":"GraphQL Input types are method for collecting logically associated arguments under single GraphQL type.","sidebar":"tutorialSidebar"},"interfaces":{"id":"interfaces","title":"Interface types","description":"An interface is an abstract GraphQL type that defines a certain set of fields.  Any other type that contains the same set of fields is said to implement that interface. Types that implement an interface are not limited by it. In other words, a type can implement an interface\'s fields as well as additional fields.  The key point is that a type must implement at least the fields of an interface in order for the schema to be correct.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Introduction","description":"Welcome to Ariadne!","sidebar":"tutorialSidebar"},"local-development":{"id":"local-development","title":"Local development","description":"Starting a local server","sidebar":"tutorialSidebar"},"logging":{"id":"logging","title":"Logging","description":"Ariadne logs all errors using default the ariadne logger. To define a custom logger instead, pass its name to the logger argument when instantiating your application:","sidebar":"tutorialSidebar"},"logo":{"id":"logo","title":"Ariadne logo","description":"Ariadne logo is an \\"A\\" shaped labyrinth. If your project uses Ariadne and you want to share the love, feel free to place the logo somewhere on your site and link back to https","sidebar":"tutorialSidebar"},"middleware":{"id":"middleware","title":"Middleware","description":"GraphQL middleware are Python functions and callable objects that can be used to inject custom logic into query executor.","sidebar":"tutorialSidebar"},"modularization":{"id":"modularization","title":"Modularization","description":"Ariadne allows you to spread your GraphQL API implementation over multiple files, with different strategies being available for schema and resolvers.","sidebar":"tutorialSidebar"},"mutations":{"id":"mutations","title":"Mutations","description":"All the previous examples in this documentation have dealt with the Query root type and reading data. What about creating, updating or deleting data?","sidebar":"tutorialSidebar"},"open-telemetry":{"id":"open-telemetry","title":"OpenTelemetry","description":"Ariadne provides an extension that implements the OpenTelemetry specification, enabling monitoring of GraphQL API performance and errors using popular APM tools like Datadog or Jaeger."},"open-tracing":{"id":"open-tracing","title":"OpenTracing","description":"Deprecation notice: OpenTracing standard was superseded by OpenTelemetry and is considered deprecated. OpenTracing extension will be delete in a future version of Ariadne.","sidebar":"tutorialSidebar"},"other-integrations":{"id":"other-integrations","title":"Other technologies","description":"Ariadne can be used to add GraphQL server to projects developed using any web framework that supports JSON responses.","sidebar":"tutorialSidebar"},"query-validators":{"id":"query-validators","title":"Query validators","description":"GraphQL uses query validators to check if Query AST is valid and can be executed. Every GraphQL server implements standard query validators. For example, there is an validator that tests if queried field exists on queried type, that makes query fail with \\"Cannot query field on type\\" error if it doesn\'t.","sidebar":"tutorialSidebar"},"resolvers":{"id":"resolvers","title":"Resolvers","description":"In Ariadne, a resolver is any Python callable that accepts two positional arguments (obj and info):","sidebar":"tutorialSidebar"},"scalars":{"id":"scalars","title":"Custom scalars","description":"GraphQL standard describes plenty of default GraphQL scalars: Int, String or Boolean to name a few. But what when those types are not enough for our API?","sidebar":"tutorialSidebar"},"schema-directives":{"id":"schema-directives","title":"Schema directives","description":"Schema directives are special annotations that developers can use to change or extend behaviour for selected elements in the schema. Those annotations are defined using dedicated syntax and then consumed during the executable schema creation.","sidebar":"tutorialSidebar"},"security-overview":{"id":"security-overview","title":"Security best practices","description":"Security check-list","sidebar":"tutorialSidebar"},"starlette-integration":{"id":"starlette-integration","title":"Starlette integration","description":"Mounting ASGI application","sidebar":"tutorialSidebar"},"subscriptions":{"id":"subscriptions","title":"Subscriptions","description":"Let\'s introduce a third type of operation. While queries offer a way to query a server once, subscriptions offer a way for the server to notify the client each time new data is available.","sidebar":"tutorialSidebar"},"types-reference":{"id":"types-reference","title":"Types reference","description":"Ariadne uses type annotations in its codebase.","sidebar":"tutorialSidebar"},"unions":{"id":"unions","title":"Union types","description":"When designing your API, you may run into a situation where you want your field to resolve to one of a few possible types. It may be an error field that can resolve to one of many error types, or an activity feed made up of different types.","sidebar":"tutorialSidebar"},"wsgi":{"id":"wsgi","title":"WSGI application","description":"Ariadne provides a GraphQL class that implements a production-ready WSGI application.","sidebar":"tutorialSidebar"},"wsgi-reference":{"id":"wsgi-reference","title":"WSGI reference","description":"The ariadne.wsgi module exports the WSGI application and middleware:","sidebar":"tutorialSidebar"}}}}')}}]);