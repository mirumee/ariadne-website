"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["94700"],{58970:function(e,n,s){s.r(n),s.d(n,{frontMatter:()=>o,toc:()=>l,default:()=>p,metadata:()=>i,assets:()=>a,contentTitle:()=>c});var i=JSON.parse('{"id":"subscriptions","title":"Subscriptions","description":"Let\'s introduce a third type of operation. While queries offer a way to query a server once, subscriptions offer a way for the server to notify the client each time new data is available.","source":"@site/server_versioned_docs/version-0.13.0/subscriptions.md","sourceDirName":".","slug":"/subscriptions","permalink":"/server/0.13.0/subscriptions","draft":false,"unlisted":false,"tags":[],"version":"0.13.0","frontMatter":{"id":"subscriptions","title":"Subscriptions"},"sidebar":"tutorialSidebar","previous":{"title":"Interface types","permalink":"/server/0.13.0/interfaces"},"next":{"title":"File uploads","permalink":"/server/0.13.0/file-uploads"}}'),r=s(74848),t=s(84429);let o={id:"subscriptions",title:"Subscriptions"},c,a={},l=[{value:"Defining subscriptions",id:"defining-subscriptions",level:2},{value:"Writing subscriptions",id:"writing-subscriptions",level:2},{value:"Complete example",id:"complete-example",level:2}];function u(e){let n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Let's introduce a third type of operation. While queries offer a way to query a server once, subscriptions offer a way for the server to notify the client each time new data is available."}),"\n",(0,r.jsxs)(n.p,{children:["This is where the ",(0,r.jsx)(n.code,{children:"Subscription"})," type is useful. It's similar to ",(0,r.jsx)(n.code,{children:"Query"})," but as each subscription remains an open channel you can send anywhere from zero to millions of responses over its lifetime."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Because of their nature, subscriptions are only possible to implement in asynchronous servers that implement the WebSockets protocol.\n(If you are using ",(0,r.jsx)(n.code,{children:"uvicorn"})," you need to ",(0,r.jsx)(n.code,{children:"pip install websockets"})," otherwise you'll get ",(0,r.jsx)(n.code,{children:"Could not connect to websocket endpoint ws://localhost:8000/. Please check if the endpoint url is correct."}),")"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"WSGI"}),"-based servers (including Django) are synchronous in nature and ",(0,r.jsx)(n.em,{children:"unable"})," to handle WebSockets which makes them incapable of implementing subscriptions."]}),"\n",(0,r.jsxs)(n.p,{children:["If you wish to use subscriptions with Django, consider wrapping your Django application in a Django Channels container and using Ariadne as an ",(0,r.jsx)(n.em,{children:"ASGI"})," server."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"defining-subscriptions",children:"Defining subscriptions"}),"\n",(0,r.jsx)(n.p,{children:"In schema definitions subscriptions look similar to queries:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-graphql",children:"type Query {\n    _unused: Boolean\n}\n\ntype Subscription {\n    counter: Int!\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"This example contains:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Query"})," type with single unused field. GraphQL considers an empty type a syntax error and requires an API to always define a ",(0,r.jsx)(n.code,{children:"Query"})," type.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["For this example, we're focusing on ",(0,r.jsx)(n.code,{children:"Subscription"}),"s so we define a bare bones ",(0,r.jsx)(n.code,{children:"Query"})," type."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Subscription"})," type with a single field, ",(0,r.jsx)(n.code,{children:"counter"}),", that returns a number."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"When defining subscriptions you can use all of the features of the schema such as arguments, input and output types."}),"\n",(0,r.jsx)(n.h2,{id:"writing-subscriptions",children:"Writing subscriptions"}),"\n",(0,r.jsx)(n.p,{children:"Subscriptions are more complex than queries as they require us to provide two functions for each field:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"generator"})," is a function that yields data we're going to send to the client. It has to implement the ",(0,r.jsx)(n.code,{children:"AsyncGenerator"})," protocol."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"resolver"})," that tells the server how to send data to the client. This is similar to the ",(0,r.jsx)(n.a,{href:"/server/0.13.0/resolvers",children:"resolvers we wrote earlier"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Make sure you understand how asynchronous generators work before attempting to use subscriptions."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The signatures are as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"async def counter_generator(obj, info):\n    for i in range(5):\n        await asyncio.sleep(1)\n        yield i\n\ndef counter_resolver(count, info):\n    return count + 1\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Note that the resolver consumes the same type (in this case ",(0,r.jsx)(n.code,{children:"int"}),") that the generator yields."]}),"\n",(0,r.jsx)(n.p,{children:"Each time our source yields a response, it's getting sent to our resolver. The above implementation counts from zero to four, each time waiting for one second before yielding a value."}),"\n",(0,r.jsx)(n.p,{children:"The resolver increases each number by one before passing them to the client so the client sees the counter progress from one to five."}),"\n",(0,r.jsx)(n.p,{children:"After the last value is yielded the generator returns, the server tells the client that no more data will be available, and the subscription is complete."}),"\n",(0,r.jsxs)(n.p,{children:["We can map these functions to subscription fields using the ",(0,r.jsx)(n.code,{children:"SubscriptionType"})," class that extends ",(0,r.jsx)(n.code,{children:"ObjectType"})," with support for ",(0,r.jsx)(n.code,{children:"source"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from ariadne import SubscriptionType\nfrom . import counter_subscriptions\n\nsubscription = SubscriptionType()\nsubscription.set_field("counter", counter_subscriptions.counter_resolver)\nsubscription.set_source("counter", counter_subscriptions.counter_generator)\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You can also use the ",(0,r.jsx)(n.code,{children:"source"})," decorator:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@subscription.source("counter")\nasync def counter_generator(\n    obj: Any, info: GraphQLResolveInfo\n) -> AsyncGenerator[int, None]:\n    ...\n'})}),"\n",(0,r.jsx)(n.h2,{id:"complete-example",children:"Complete example"}),"\n",(0,r.jsx)(n.p,{children:"For reference here is a complete example of the GraphQL API that supports a subscription:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import asyncio\nfrom ariadne import SubscriptionType, make_executable_schema\nfrom ariadne.asgi import GraphQL\n\ntype_def = """\n    type Query {\n        _unused: Boolean\n    }\n\n    type Subscription {\n        counter: Int!\n    }\n"""\n\nsubscription = SubscriptionType()\n\n@subscription.source("counter")\nasync def counter_generator(obj, info):\n    for i in range(5):\n        await asyncio.sleep(1)\n        yield i\n\n\n@subscription.field("counter")\ndef counter_resolver(count, info):\n    return count + 1\n\n\nschema = make_executable_schema(type_def, subscription)\napp = GraphQL(schema, debug=True)\n'})})]})}function p(e={}){let{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},84429:function(e,n,s){s.d(n,{R:()=>o,x:()=>c});var i=s(96540);let r={},t=i.createContext(r);function o(e){let n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);