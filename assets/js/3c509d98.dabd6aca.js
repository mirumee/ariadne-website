"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["14019"],{44148:function(e,n,s){s.r(n),s.d(n,{frontMatter:()=>a,toc:()=>u,default:()=>c,metadata:()=>r,assets:()=>l,contentTitle:()=>o});var r=JSON.parse('{"id":"enums","title":"Enumeration types","description":"Ariadne supports GraphQL enumeration types which by default are represented as strings in Python logic:","source":"@site/server_versioned_docs/version-0.4.0/enums.md","sourceDirName":".","slug":"/enums","permalink":"/server/0.4.0/enums","draft":false,"unlisted":false,"tags":[],"version":"0.4.0","frontMatter":{"id":"enums","title":"Enumeration types"},"sidebar":"tutorialSidebar","previous":{"title":"Custom scalars","permalink":"/server/0.4.0/scalars"},"next":{"title":"Union types","permalink":"/server/0.4.0/unions"}}'),t=s(74848),i=s(84429);let a={id:"enums",title:"Enumeration types"},o,l={},u=[{value:"Mapping to internal values",id:"mapping-to-internal-values",level:2}];function d(e){let n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Ariadne supports GraphQL ",(0,t.jsx)(n.a,{href:"https://graphql.org/learn/schema/#enumeration-types",children:"enumeration types"})," which by default are represented as strings in Python logic:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from ariadne import QueryType\nfrom db import get_users\n\ntype_defs = """\n    type Query{\n        users(status: UserStatus): [User]!\n    }\n\n    enum UserStatus{\n        ACTIVE\n        INACTIVE\n        BANNED\n    }\n"""\n\nquery = QueryType()\n\n@query.field("users")\ndef resolve_users(*_, status):\n    # Value of UserStatus passed to resolver is represented as Python string\n    if status == "ACTIVE":\n        return get_users(is_active=True)\n    if status == "INACTIVE":\n        return get_users(is_active=False)\n    if status == "BANNED":\n        return get_users(is_banned=True)\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The above example defines a resolver that returns a list of users based on user status, defined using the ",(0,t.jsx)(n.code,{children:"UserStatus"})," enumerable from the schema."]}),"\n",(0,t.jsxs)(n.p,{children:["There is no need for resolver to validate if ",(0,t.jsx)(n.code,{children:"status"})," value belongs to the enum. This is done by GraphQL during query execution. Below query will produce an error:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-graphql",children:"{\n    users(status: TEST)\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["GraphQL failed to find ",(0,t.jsx)(n.code,{children:"TEST"})," in ",(0,t.jsx)(n.code,{children:"UserStatus"}),", and returned an error without calling ",(0,t.jsx)(n.code,{children:"resolve_users"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "error": {\n        "errors": [\n            {\n                "message": "Argument \\"status\\" has invalid value TEST.\\nExpected type \\"UserStatus\\", found TEST.",\n                "locations": [\n                    {\n                        "line": 2,\n                        "column": 14\n                    }\n                ]\n            }\n        ]\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"mapping-to-internal-values",children:"Mapping to internal values"}),"\n",(0,t.jsx)(n.p,{children:"By default enum values are represented as Python strings, but Ariadne also supports mapping GraphQL enums to custom Python values."}),"\n",(0,t.jsx)(n.p,{children:'Imagine posts on a social site that can have weights like "standard", "pinned" and "promoted":'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-graphql",children:"type Post {\n    weight: PostWeight\n}\n\nenum PostWeight {\n    STANDARD\n    PINNED\n    PROMOTED\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"In the database, the application may store those weights as integers from 0 to 2. Normally, you would have to implement a custom resolver transforming GraphQL representation to the integer but, you would have to remember to use this boilerplate in every resolver."}),"\n",(0,t.jsxs)(n.p,{children:["Ariadne provides an ",(0,t.jsx)(n.code,{children:"EnumType"})," utility thats allows you to delegate this task to GraphQL server:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import enum\n\nfrom ariadne import EnumType\n\nclass PostWeight(enum.IntEnum):\n    STANDARD = 0\n    PINNED = 1\n    PROMOTED = 2\n\npost_weight = EnumType("PostWeight", PostWeight)\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Include the ",(0,t.jsx)(n.code,{children:"post_weight"})," instance in the list of types passed to ",(0,t.jsx)(n.code,{children:"make_executable_schema"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"schema = make_executable_schema(type_defs, some_type, post_weight)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This will make the GraphQL server automatically translate ",(0,t.jsx)(n.code,{children:"PostWeight"})," between their GraphQL and Python values:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["If ",(0,t.jsx)(n.code,{children:"PostWeight"})," enum's value is passed in argument of GraphQL field, Python resolver will be called with ",(0,t.jsx)(n.code,{children:"PostWeight"})," member, like ",(0,t.jsx)(n.code,{children:"PostWeight.PINNED"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["If Python resolver for field returning GraphQL enum returns Enum member this value will be converted into GraphQL enum. Eg. returning ",(0,t.jsx)(n.code,{children:"PostWeight.PROMOTED"})," from resolver will appear as ",(0,t.jsx)(n.code,{children:'"PROMOTED"'})," in GraphQL result)."]}),"\n",(0,t.jsxs)(n.li,{children:["If Python resolver for field returning GraphQL enum returns a value that's valid value of enum's member, this value will be converted into enum. Eg. returning ",(0,t.jsx)(n.code,{children:"1"})," from resolver will appear as ",(0,t.jsx)(n.code,{children:'"PINNED"'})," in GraphQL result)."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Instead of ",(0,t.jsx)(n.code,{children:"Enum"})," you may use plain ",(0,t.jsx)(n.code,{children:"dict"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from ariadne import EnumType\n\npost_weight = EnumType(\n    "PostWeight",\n    {\n        "STANDARD": 0,\n        "PINNED": 1,\n        "PROMOTED": 2,\n    },\n)\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Both ",(0,t.jsx)(n.code,{children:"Enum"})," and ",(0,t.jsx)(n.code,{children:"IntEnum"})," are supported by the ",(0,t.jsx)(n.code,{children:"EnumType"}),"."]})]})}function c(e={}){let{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},84429:function(e,n,s){s.d(n,{R:()=>a,x:()=>o});var r=s(96540);let t={},i=r.createContext(t);function a(e){let n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);