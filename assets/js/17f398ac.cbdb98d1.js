"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["81174"],{92912:function(e,n,r){r.r(n),r.d(n,{frontMatter:()=>l,toc:()=>c,default:()=>h,metadata:()=>s,assets:()=>d,contentTitle:()=>i});var s=JSON.parse('{"id":"api-reference","title":"API reference","description":"Following items are importable directly from ariadne package:","source":"@site/docs/server/api-reference.md","sourceDirName":".","slug":"/api-reference","permalink":"/server/next/api-reference","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"api-reference","title":"API reference","sidebar_label":"ariadne"},"sidebar":"tutorialSidebar","previous":{"title":"GraphQL Relay","permalink":"/server/next/graphql-relay"},"next":{"title":"ariadne.asgi","permalink":"/server/next/asgi-reference"}}'),a=r(74848),t=r(84429);let l={id:"api-reference",title:"API reference",sidebar_label:"ariadne"},i,d={},c=[{value:"<code>EnumType</code>",id:"enumtype",level:2},{value:"Constructor",id:"constructor",level:3},{value:"Required arguments",id:"required-arguments",level:4},{value:"Methods",id:"methods",level:3},{value:"<code>bind_to_schema</code>",id:"bind_to_schema",level:4},{value:"<code>bind_to_default_values</code>",id:"bind_to_default_values",level:4},{value:"<code>validate_graphql_type</code>",id:"validate_graphql_type",level:4},{value:"Example",id:"example",level:3},{value:"<code>Extension</code>",id:"extension",level:2},{value:"Methods",id:"methods-1",level:3},{value:"<code>request_started</code>",id:"request_started",level:4},{value:"<code>request_finished</code>",id:"request_finished",level:4},{value:"<code>resolve</code>",id:"resolve",level:4},{value:"Arguments",id:"arguments",level:5},{value:"Example",id:"example-1",level:5},{value:"<code>has_errors</code>",id:"has_errors",level:4},{value:"<code>format</code>",id:"format",level:4},{value:"<code>ExtensionManager</code>",id:"extensionmanager",level:2},{value:"Attributes",id:"attributes",level:3},{value:"Constructor",id:"constructor-1",level:3},{value:"Optional arguments",id:"optional-arguments",level:4},{value:"Methods",id:"methods-2",level:3},{value:"<code>as_middleware_manager</code>",id:"as_middleware_manager",level:4},{value:"Optional arguments",id:"optional-arguments-1",level:5},{value:"<code>request</code>",id:"request",level:4},{value:"<code>has_errors</code>",id:"has_errors-1",level:4},{value:"<code>format</code>",id:"format-1",level:4},{value:"<code>FallbackResolversSetter</code>",id:"fallbackresolverssetter",level:2},{value:"Methods",id:"methods-3",level:3},{value:"<code>bind_to_schema</code>",id:"bind_to_schema-1",level:4},{value:"<code>add_resolvers_to_object_fields</code>",id:"add_resolvers_to_object_fields",level:4},{value:"<code>add_resolver_to_field</code>",id:"add_resolver_to_field",level:4},{value:"<code>InputType</code>",id:"inputtype",level:2},{value:"Constructor",id:"constructor-2",level:3},{value:"Required arguments",id:"required-arguments-1",level:4},{value:"Optional arguments",id:"optional-arguments-2",level:4},{value:"Methods",id:"methods-4",level:3},{value:"<code>bind_to_schema</code>",id:"bind_to_schema-2",level:4},{value:"<code>validate_graphql_type</code>",id:"validate_graphql_type-1",level:4},{value:"Example input value represented as dataclass",id:"example-input-value-represented-as-dataclass",level:3},{value:"Example input with its fields mapped to custom dict keys",id:"example-input-with-its-fields-mapped-to-custom-dict-keys",level:3},{value:"Example input value as dataclass with custom named fields",id:"example-input-value-as-dataclass-with-custom-named-fields",level:3},{value:"<code>InterfaceType</code>",id:"interfacetype",level:2},{value:"Type resolver",id:"type-resolver",level:3},{value:"Constructor",id:"constructor-3",level:3},{value:"Required arguments",id:"required-arguments-2",level:4},{value:"Optional arguments",id:"optional-arguments-3",level:4},{value:"Methods",id:"methods-5",level:3},{value:"<code>set_type_resolver</code>",id:"set_type_resolver",level:4},{value:"<code>bind_to_schema</code>",id:"bind_to_schema-3",level:4},{value:"<code>validate_graphql_type</code>",id:"validate_graphql_type-2",level:4},{value:"Example",id:"example-2",level:3},{value:"<code>MutationType</code>",id:"mutationtype",level:2},{value:"Constructor",id:"constructor-4",level:3},{value:"Example",id:"example-3",level:3},{value:"<code>ObjectType</code>",id:"objecttype",level:2},{value:"Constructor",id:"constructor-5",level:3},{value:"Required arguments",id:"required-arguments-3",level:4},{value:"Methods",id:"methods-6",level:3},{value:"<code>field</code>",id:"field",level:4},{value:"Required arguments",id:"required-arguments-4",level:5},{value:"<code>create_register_resolver</code>",id:"create_register_resolver",level:4},{value:"Required arguments",id:"required-arguments-5",level:5},{value:"<code>set_field</code>",id:"set_field",level:4},{value:"Required arguments",id:"required-arguments-6",level:5},{value:"<code>set_alias</code>",id:"set_alias",level:4},{value:"Required arguments",id:"required-arguments-7",level:5},{value:"<code>bind_to_schema</code>",id:"bind_to_schema-4",level:4},{value:"<code>validate_graphql_type</code>",id:"validate_graphql_type-3",level:4},{value:"<code>bind_resolvers_to_graphql_type</code>",id:"bind_resolvers_to_graphql_type",level:4},{value:"Example",id:"example-4",level:3},{value:"Example with objects in objects",id:"example-with-objects-in-objects",level:3},{value:"<code>QueryType</code>",id:"querytype",level:2},{value:"Constructor",id:"constructor-6",level:3},{value:"Example",id:"example-5",level:3},{value:"<code>ScalarType</code>",id:"scalartype",level:2},{value:"Serialization",id:"serialization",level:3},{value:"Value parsing",id:"value-parsing",level:3},{value:"Literal parsing",id:"literal-parsing",level:3},{value:"Constructor",id:"constructor-7",level:3},{value:"Required arguments",id:"required-arguments-8",level:4},{value:"Optional arguments",id:"optional-arguments-4",level:4},{value:"Methods",id:"methods-7",level:3},{value:"<code>set_serializer</code>",id:"set_serializer",level:4},{value:"<code>set_value_parser</code>",id:"set_value_parser",level:4},{value:"<code>set_literal_parser</code>",id:"set_literal_parser",level:4},{value:"<code>bind_to_schema</code>",id:"bind_to_schema-5",level:4},{value:"<code>validate_graphql_type</code>",id:"validate_graphql_type-4",level:4},{value:"Example datetime scalar",id:"example-datetime-scalar",level:3},{value:"Example generic scalar",id:"example-generic-scalar",level:3},{value:"<code>SchemaBindable</code>",id:"schemabindable",level:2},{value:"Methods",id:"methods-8",level:3},{value:"<code>bind_to_schema</code>",id:"bind_to_schema-6",level:4},{value:"Example",id:"example-6",level:3},{value:"<code>SchemaDirectiveVisitor</code>",id:"schemadirectivevisitor",level:2},{value:"Lifecycle",id:"lifecycle",level:3},{value:"Constructor",id:"constructor-8",level:3},{value:"Required arguments",id:"required-arguments-9",level:4},{value:"Methods",id:"methods-9",level:3},{value:"<code>get_directive_declaration</code>",id:"get_directive_declaration",level:4},{value:"Required arguments",id:"required-arguments-10",level:5},{value:"<code>get_declared_directives</code>",id:"get_declared_directives",level:4},{value:"Required arguments",id:"required-arguments-11",level:5},{value:"<code>visit_schema_directives</code>",id:"visit_schema_directives",level:4},{value:"Required arguments",id:"required-arguments-12",level:5},{value:"Optional arguments",id:"optional-arguments-5",level:5},{value:"Example schema visitors",id:"example-schema-visitors",level:3},{value:"<code>SchemaNameConverter</code>",id:"schemanameconverter",level:2},{value:"<code>SnakeCaseFallbackResolversSetter</code>",id:"snakecasefallbackresolverssetter",level:2},{value:"Methods",id:"methods-10",level:3},{value:"<code>add_resolver_to_field</code>",id:"add_resolver_to_field-1",level:4},{value:"<code>SubscriptionType</code>",id:"subscriptiontype",level:2},{value:"Subscription sources (&quot;subscribers&quot;)",id:"subscription-sources-subscribers",level:3},{value:"Subscription resolvers",id:"subscription-resolvers",level:3},{value:"GraphQL arguments",id:"graphql-arguments",level:3},{value:"Constructor",id:"constructor-9",level:3},{value:"Methods",id:"methods-11",level:3},{value:"<code>source</code>",id:"source",level:4},{value:"Required arguments",id:"required-arguments-13",level:5},{value:"<code>create_register_subscriber</code>",id:"create_register_subscriber",level:4},{value:"Required arguments",id:"required-arguments-14",level:5},{value:"<code>set_source</code>",id:"set_source",level:4},{value:"Required arguments",id:"required-arguments-15",level:5},{value:"<code>bind_to_schema</code>",id:"bind_to_schema-7",level:4},{value:"<code>bind_subscribers_to_graphql_type</code>",id:"bind_subscribers_to_graphql_type",level:4},{value:"Example source and resolver",id:"example-source-and-resolver",level:3},{value:"Example chat",id:"example-chat",level:3},{value:"<code>UnionType</code>",id:"uniontype",level:2},{value:"Type resolver",id:"type-resolver-1",level:3},{value:"Constructor",id:"constructor-10",level:3},{value:"Required arguments",id:"required-arguments-16",level:4},{value:"Optional arguments",id:"optional-arguments-6",level:4},{value:"Methods",id:"methods-12",level:3},{value:"<code>set_type_resolver</code>",id:"set_type_resolver-1",level:4},{value:"<code>bind_to_schema</code>",id:"bind_to_schema-8",level:4},{value:"<code>validate_graphql_type</code>",id:"validate_graphql_type-5",level:4},{value:"Example",id:"example-7",level:3},{value:"<code>combine_multipart_data</code>",id:"combine_multipart_data",level:2},{value:"Requires arguments",id:"requires-arguments",level:3},{value:"Example",id:"example-8",level:3},{value:"<code>convert_camel_case_to_snake</code>",id:"convert_camel_case_to_snake",level:2},{value:"Required arguments",id:"required-arguments-17",level:3},{value:"Example",id:"example-9",level:3},{value:"<code>convert_kwargs_to_snake_case</code>",id:"convert_kwargs_to_snake_case",level:2},{value:"<code>convert_schema_names</code>",id:"convert_schema_names",level:2},{value:"Required arguments",id:"required-arguments-18",level:3},{value:"<code>fallback_resolvers</code>",id:"fallback_resolvers",level:2},{value:"<code>format_error</code>",id:"format_error",level:2},{value:"Required arguments",id:"required-arguments-19",level:3},{value:"Optional arguments",id:"optional-arguments-7",level:3},{value:"<code>get_error_extension</code>",id:"get_error_extension",level:2},{value:"Required arguments",id:"required-arguments-20",level:3},{value:"<code>get_formatted_error_context</code>",id:"get_formatted_error_context",level:2},{value:"Required arguments",id:"required-arguments-21",level:3},{value:"<code>get_formatted_error_traceback</code>",id:"get_formatted_error_traceback",level:2},{value:"Required arguments",id:"required-arguments-22",level:3},{value:"<code>gql</code>",id:"gql",level:2},{value:"Examples",id:"examples",level:3},{value:"<code>graphql</code>",id:"graphql",level:2},{value:"Required arguments",id:"required-arguments-23",level:3},{value:"Optional arguments",id:"optional-arguments-8",level:3},{value:"<code>graphql_sync</code>",id:"graphql_sync",level:2},{value:"Required arguments",id:"required-arguments-24",level:3},{value:"Optional arguments",id:"optional-arguments-9",level:3},{value:"<code>is_default_resolver</code>",id:"is_default_resolver",level:2},{value:"Required arguments",id:"required-arguments-25",level:3},{value:"<code>load_schema_from_path</code>",id:"load_schema_from_path",level:2},{value:"Required arguments",id:"required-arguments-26",level:3},{value:"<code>make_executable_schema</code>",id:"make_executable_schema",level:2},{value:"Required arguments",id:"required-arguments-27",level:3},{value:"Optional arguments",id:"optional-arguments-10",level:3},{value:"Example with minimal schema",id:"example-with-minimal-schema",level:3},{value:"Example with bindables",id:"example-with-bindables",level:3},{value:"Example with directive",id:"example-with-directive",level:3},{value:"Example with converted names",id:"example-with-converted-names",level:3},{value:"<code>repair_schema_default_enum_values</code>",id:"repair_schema_default_enum_values",level:2},{value:"<code>resolve_to</code>",id:"resolve_to",level:2},{value:"Required arguments",id:"required-arguments-28",level:3},{value:"<code>snake_case_fallback_resolvers</code>",id:"snake_case_fallback_resolvers",level:2},{value:"<code>subscribe</code>",id:"subscribe",level:2},{value:"Required arguments",id:"required-arguments-29",level:3},{value:"Optional arguments",id:"optional-arguments-11",level:3},{value:"<code>type_implements_interface</code>",id:"type_implements_interface",level:2},{value:"Required arguments",id:"required-arguments-30",level:3},{value:"<code>unwrap_graphql_error</code>",id:"unwrap_graphql_error",level:2},{value:"Example",id:"example-10",level:3},{value:"<code>upload_scalar</code>",id:"upload_scalar",level:2},{value:"Example",id:"example-11",level:3},{value:"<code>validate_schema_default_enum_values</code>",id:"validate_schema_default_enum_values",level:2},{value:"Example schema with invalid field argument",id:"example-schema-with-invalid-field-argument",level:3},{value:"Example schema with invalid input field",id:"example-schema-with-invalid-input-field",level:3},{value:"Example schema with invalid default input field argument",id:"example-schema-with-invalid-default-input-field-argument",level:3}];function o(e){let n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["Following items are importable directly from ",(0,a.jsx)(n.code,{children:"ariadne"})," package:"]}),"\n",(0,a.jsx)(n.h2,{id:"enumtype",children:(0,a.jsx)(n.code,{children:"EnumType"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"class EnumType(SchemaBindable):\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"/server/next/bindables",children:"Bindable"})," mapping Python values to enumeration members in a ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"constructor",children:"Constructor"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def __init__(\n    self,\n    name: str,\n    values: Union[Dict[str, Any], Type[enum.Enum], Type[enum.IntEnum]],\n):\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Initializes the ",(0,a.jsx)(n.code,{children:"EnumType"})," with ",(0,a.jsx)(n.code,{children:"name"})," and ",(0,a.jsx)(n.code,{children:"values"})," mapping."]}),"\n",(0,a.jsx)(n.h4,{id:"required-arguments",children:"Required arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"name"}),": a ",(0,a.jsx)(n.code,{children:"str"})," with the name of GraphQL enum type in ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," to\nbind to."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"values"}),": a ",(0,a.jsx)(n.code,{children:"dict"})," or ",(0,a.jsx)(n.code,{children:"enums.Enum"})," with values to use to represent GraphQL\nenum's in Python logic."]}),"\n",(0,a.jsx)(n.h3,{id:"methods",children:"Methods"}),"\n",(0,a.jsx)(n.h4,{id:"bind_to_schema",children:(0,a.jsx)(n.code,{children:"bind_to_schema"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def bind_to_schema(self, schema: GraphQLSchema) -> None:\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Binds this ",(0,a.jsx)(n.code,{children:"EnumType"})," instance to the instance of ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"}),"."]}),"\n",(0,a.jsx)(n.h4,{id:"bind_to_default_values",children:(0,a.jsx)(n.code,{children:"bind_to_default_values"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def bind_to_default_values(self, _schema: GraphQLSchema) -> None:\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Populates default values of input fields and args in the ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["This step is required because GraphQL query executor doesn't perform a\nlookup for default values defined in schema. Instead it simply pulls the\nvalue from fields and arguments ",(0,a.jsx)(n.code,{children:"default_value"})," attribute, which is\n",(0,a.jsx)(n.code,{children:"None"})," by default."]}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Deprecated:"})," Ariadne versions before 0.22 used\n",(0,a.jsx)(n.code,{children:"EnumType.bind_to_default_values"})," method to fix default enum values embedded\nin the ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"}),". Ariadne 0.22 release introduces universal\n",(0,a.jsx)(n.code,{children:"repair_schema_default_enum_values"})," utility in its place."]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"validate_graphql_type",children:(0,a.jsx)(n.code,{children:"validate_graphql_type"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def validate_graphql_type(\n    self,\n    graphql_type: Optional[GraphQLNamedType],\n) -> None:\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Validates that schema's GraphQL type associated with this ",(0,a.jsx)(n.code,{children:"EnumType"}),"\nis an ",(0,a.jsx)(n.code,{children:"enum"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.p,{children:"Given following GraphQL enum:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-graphql",children:"enum UserRole {\n    MEMBER\n    MODERATOR\n    ADMIN\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["You can use ",(0,a.jsx)(n.code,{children:"EnumType"})," to map it's members to Python ",(0,a.jsx)(n.code,{children:"Enum"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'user_role_type = EnumType(\n    "UserRole",\n    {\n        "MEMBER": 0,\n        "MODERATOR": 1,\n        "ADMIN": 2,\n    }\n)\n'})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"EnumType"})," also works with dictionaries:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'user_role_type = EnumType(\n    "UserRole",\n    {\n        "MEMBER": 0,\n        "MODERATOR": 1,\n        "ADMIN": 2,\n    }\n)\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"extension",children:(0,a.jsx)(n.code,{children:"Extension"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"class Extension:\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Base class for extensions."}),"\n",(0,a.jsx)(n.p,{children:"Subclasses of this class should override default methods to run\ncustom logic during Query execution."}),"\n",(0,a.jsx)(n.h3,{id:"methods-1",children:"Methods"}),"\n",(0,a.jsx)(n.h4,{id:"request_started",children:(0,a.jsx)(n.code,{children:"request_started"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def request_started(self, context: ContextValue) -> None:\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Extension hook executed at request's start."}),"\n",(0,a.jsx)(n.h4,{id:"request_finished",children:(0,a.jsx)(n.code,{children:"request_finished"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def request_finished(self, context: ContextValue) -> None:\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Extension hook executed at request's end."}),"\n",(0,a.jsx)(n.h4,{id:"resolve",children:(0,a.jsx)(n.code,{children:"resolve"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def resolve(\n    self,\n    next_: Resolver,\n    obj: Any,\n    info: GraphQLResolveInfo,\n    **kwargs,\n) -> Any:\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Extension hook wrapping field's value resolution."}),"\n",(0,a.jsx)(n.h5,{id:"arguments",children:"Arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"next_"}),": a ",(0,a.jsx)(n.code,{children:"resolver"})," or next extension's ",(0,a.jsx)(n.code,{children:"resolve"})," method."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"obj"}),": a Python data structure to resolve value from."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"info"}),": a ",(0,a.jsx)(n.code,{children:"GraphQLResolveInfo"})," instance for executed resolver."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"**kwargs"}),": extra arguments from GraphQL to pass to resolver."]}),"\n",(0,a.jsx)(n.h5,{id:"example-1",children:"Example"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"resolve"})," should handle both sync and async ",(0,a.jsx)(n.code,{children:"next_"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from inspect import iscoroutinefunction\nfrom time import time\n\nfrom ariadne.types import Extension, Resolver\nfrom graphql import GraphQLResolveInfo\nfrom graphql.pyutils import is_awaitable\n\nclass MyExtension(Extension):\n    def __init__(self):\n        self.paths = []\n\n    def resolve(\n        self, next_: Resolver, obj: Any, info: GraphQLResolveInfo, **kwargs\n    ) -> Any:\n        path = ".".join(map(str, info.path.as_list()))\n\n        # Fast implementation for synchronous resolvers\n        if not iscoroutinefunction(next_):\n            start_time = time()\n            result = next_(obj, info, **kwargs)\n            self.paths.append((path, time() - start_time))\n            return result\n\n        # Create async closure for async `next_` that GraphQL\n        # query executor will handle for us.\n        async def async_my_extension():\n            start_time = time()\n            result = await next_(obj, info, **kwargs)\n            if is_awaitable(result):\n                result = await result\n            self.paths.append((path, time() - start_time))\n            return result\n\n        # GraphQL query executor will execute this closure for us\n        return async_my_extension()\n'})}),"\n",(0,a.jsx)(n.h4,{id:"has_errors",children:(0,a.jsx)(n.code,{children:"has_errors"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def has_errors(\n    self,\n    errors: List[GraphQLError],\n    context: ContextValue,\n) -> None:\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Extension hook executed when GraphQL encountered errors."}),"\n",(0,a.jsx)(n.h4,{id:"format",children:(0,a.jsx)(n.code,{children:"format"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def format(self, context: ContextValue) -> Optional[dict]:\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Extension hook executed to retrieve extra data to include in result's\n",(0,a.jsx)(n.a,{href:"/server/next/types-reference#extensions",children:(0,a.jsx)(n.code,{children:"extensions"})})," data."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"extensionmanager",children:(0,a.jsx)(n.code,{children:"ExtensionManager"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"class ExtensionManager:\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Container and runner for extensions and middleware, used by the GraphQL servers."}),"\n",(0,a.jsx)(n.h3,{id:"attributes",children:"Attributes"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"context"}),": the ",(0,a.jsx)(n.a,{href:"/server/next/types-reference#contextvalue",children:(0,a.jsx)(n.code,{children:"ContextValue"})})," of type specific to the server."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"/server/next/types-reference#extensions",children:(0,a.jsx)(n.code,{children:"extensions"})}),": a ",(0,a.jsx)(n.code,{children:"tuple"})," with instances of initialized extensions."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"extensions_reversed"}),": a ",(0,a.jsx)(n.code,{children:"tuple"})," created from reversing ",(0,a.jsx)(n.a,{href:"/server/next/types-reference#extensions",children:(0,a.jsx)(n.code,{children:"extensions"})}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"constructor-1",children:"Constructor"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def __init__(\n    self,\n    extensions: Optional[ExtensionList] = None,\n    context: Optional[ContextValue] = None,\n):\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Initializes extensions and stores them with context on instance."}),"\n",(0,a.jsx)(n.h4,{id:"optional-arguments",children:"Optional arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"/server/next/types-reference#extensions",children:(0,a.jsx)(n.code,{children:"extensions"})}),": a ",(0,a.jsx)(n.code,{children:"list"})," of ",(0,a.jsx)(n.code,{children:"Extension"})," types to initialize."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"context"}),": the ",(0,a.jsx)(n.a,{href:"/server/next/types-reference#contextvalue",children:(0,a.jsx)(n.code,{children:"ContextValue"})})," of type specific to the server."]}),"\n",(0,a.jsx)(n.h3,{id:"methods-2",children:"Methods"}),"\n",(0,a.jsx)(n.h4,{id:"as_middleware_manager",children:(0,a.jsx)(n.code,{children:"as_middleware_manager"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def as_middleware_manager(\n    self,\n    middleware: MiddlewareList = None,\n    manager_class: Optional[Type[MiddlewareManager]] = None,\n) -> Optional[MiddlewareManager]:\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Creates middleware manager instance combining middleware and extensions."}),"\n",(0,a.jsxs)(n.p,{children:["Returns instance of the type passed in ",(0,a.jsx)(n.code,{children:"manager_class"})," argument\nor ",(0,a.jsx)(n.code,{children:"MiddlewareManager"})," that query executor then uses."]}),"\n",(0,a.jsx)(n.h5,{id:"optional-arguments-1",children:"Optional arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"middleware"}),": a ",(0,a.jsx)(n.code,{children:"list"})," of ",(0,a.jsx)(n.code,{children:"Middleware"})," instances"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"manager_class"})," a ",(0,a.jsx)(n.code,{children:"type"})," of middleware manager to use. ",(0,a.jsx)(n.code,{children:"MiddlewareManager"}),"\nis used if this argument is passed ",(0,a.jsx)(n.code,{children:"None"})," or omitted."]}),"\n",(0,a.jsx)(n.h4,{id:"request",children:(0,a.jsx)(n.code,{children:"request"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def request(self) -> None:\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"A context manager that should wrap request processing."}),"\n",(0,a.jsxs)(n.p,{children:["Runs ",(0,a.jsx)(n.code,{children:"request_started"})," hook at beginning and ",(0,a.jsx)(n.code,{children:"request_finished"})," at\nthe end of request processing, enabling APM extensions like ApolloTracing."]}),"\n",(0,a.jsx)(n.h4,{id:"has_errors-1",children:(0,a.jsx)(n.code,{children:"has_errors"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def has_errors(self, errors: List[GraphQLError]) -> None:\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Propagates GraphQL errors returned by GraphQL server to extensions."}),"\n",(0,a.jsx)(n.p,{children:"Should be called only when there are errors."}),"\n",(0,a.jsx)(n.h4,{id:"format-1",children:(0,a.jsx)(n.code,{children:"format"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def format(self) -> dict:\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Gathers data from extensions for inclusion in server's response JSON."}),"\n",(0,a.jsxs)(n.p,{children:["This data can be retrieved from the ",(0,a.jsx)(n.a,{href:"/server/next/types-reference#extensions",children:(0,a.jsx)(n.code,{children:"extensions"})})," key in response JSON."]}),"\n",(0,a.jsxs)(n.p,{children:["Returns ",(0,a.jsx)(n.code,{children:"dict"})," with JSON-serializable data."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"fallbackresolverssetter",children:(0,a.jsx)(n.code,{children:"FallbackResolversSetter"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"class FallbackResolversSetter(SchemaBindable):\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"/server/next/bindables",children:"Bindable"})," that recursively scans ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," for fields and explicitly\nsets their resolver to ",(0,a.jsx)(n.code,{children:"graphql.default_field_resolver"})," package if\nthey don't have any resolver set yet."]}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Deprecated:"})," This class doesn't provide any utility for developers and\nonly serves as a base for ",(0,a.jsx)(n.code,{children:"SnakeCaseFallbackResolversSetter"})," which is being\nreplaced by what we believe to be a better solution."]}),"\n",(0,a.jsx)(n.p,{children:"Because of this we are deprecating this utility. It will be removed in future\nAriadne release."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"methods-3",children:"Methods"}),"\n",(0,a.jsx)(n.h4,{id:"bind_to_schema-1",children:(0,a.jsx)(n.code,{children:"bind_to_schema"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def bind_to_schema(self, schema: GraphQLSchema) -> None:\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Scans ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," for types with fields that don't have set resolver."]}),"\n",(0,a.jsx)(n.h4,{id:"add_resolvers_to_object_fields",children:(0,a.jsx)(n.code,{children:"add_resolvers_to_object_fields"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def add_resolvers_to_object_fields(\n    self,\n    type_object: GraphQLObjectType,\n) -> None:\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Sets explicit default resolver on a fields of an object that don't have any."}),"\n",(0,a.jsx)(n.h4,{id:"add_resolver_to_field",children:(0,a.jsx)(n.code,{children:"add_resolver_to_field"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def add_resolver_to_field(self, _: str, field_object: GraphQLField) -> None:\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Sets ",(0,a.jsx)(n.code,{children:"default_field_resolver"})," as a resolver on a field that doesn't have any."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"inputtype",children:(0,a.jsx)(n.code,{children:"InputType"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"class InputType(SchemaBindable):\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"/server/next/bindables",children:"Bindable"})," populating input types in a ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," with Python logic."]}),"\n",(0,a.jsx)(n.h3,{id:"constructor-2",children:"Constructor"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def __init__(\n    self,\n    name: str,\n    out_type: Optional[GraphQLInputFieldOutType] = None,\n    out_names: Optional[Dict[str, str]] = None,\n):\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Initializes the ",(0,a.jsx)(n.code,{children:"InputType"})," with a ",(0,a.jsx)(n.code,{children:"name"})," and optionally out type\nand out names."]}),"\n",(0,a.jsx)(n.h4,{id:"required-arguments-1",children:"Required arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"name"}),": a ",(0,a.jsx)(n.code,{children:"str"})," with the name of GraphQL object type in ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," to\nbind to."]}),"\n",(0,a.jsx)(n.h4,{id:"optional-arguments-2",children:"Optional arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"out_type"}),": a ",(0,a.jsx)(n.code,{children:"GraphQLInputFieldOutType"}),", Python callable accepting single\nargument, a dict with data from GraphQL query, required to return\na Python representation of input type."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"out_names"}),": a ",(0,a.jsx)(n.code,{children:"Dict[str, str]"})," with mappings from GraphQL field names\nto dict keys in a Python dictionary used to contain a data passed as\ninput."]}),"\n",(0,a.jsx)(n.h3,{id:"methods-4",children:"Methods"}),"\n",(0,a.jsx)(n.h4,{id:"bind_to_schema-2",children:(0,a.jsx)(n.code,{children:"bind_to_schema"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def bind_to_schema(self, schema: GraphQLSchema) -> None:\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Binds this ",(0,a.jsx)(n.code,{children:"InputType"})," instance to the instance of ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["if it has an out type function, it assigns it to GraphQL type's\n",(0,a.jsx)(n.code,{children:"out_type"})," attribute. If type already has other function set on\nit's ",(0,a.jsx)(n.code,{children:"out_type"})," attribute, this type is replaced with new one."]}),"\n",(0,a.jsxs)(n.p,{children:["If it has any out names set, it assigns those to GraphQL type's\nfields ",(0,a.jsx)(n.code,{children:"out_name"})," attributes. If field already has other out name set on\nits ",(0,a.jsx)(n.code,{children:"out_name"})," attribute, this name is replaced with the new one."]}),"\n",(0,a.jsx)(n.h4,{id:"validate_graphql_type-1",children:(0,a.jsx)(n.code,{children:"validate_graphql_type"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def validate_graphql_type(\n    self,\n    graphql_type: Optional[GraphQLNamedType],\n) -> None:\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Validates that schema's GraphQL type associated with this ",(0,a.jsx)(n.code,{children:"InputType"}),"\nis an ",(0,a.jsx)(n.code,{children:"input"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"example-input-value-represented-as-dataclass",children:"Example input value represented as dataclass"}),"\n",(0,a.jsxs)(n.p,{children:["Following code creates a ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," with object type named ",(0,a.jsx)(n.code,{children:"Query"}),"\nwith single field which has an argument of an input type. It then uses\nthe ",(0,a.jsx)(n.code,{children:"InputType"})," to set ",(0,a.jsx)(n.code,{children:"ExampleInput"})," dataclass as Python representation\nof this GraphQL type:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from dataclasses import dataclass\n\nfrom ariadne import InputType, QueryType, make_executable_schema\n\n@dataclass\nclass ExampleInput:\n    id: str\n    message: str\n\nquery_type = QueryType()\n\n@query_type.field("repr")\ndef resolve_repr(*_, input: ExampleInput):\n    return repr(input)\n\nschema = make_executable_schema(\n    """\n    type Query {\n        repr(input: ExampleInput): String!\n    }\n\n    input ExampleInput {\n        id: ID!\n        message: String!\n    }\n    """,\n    query_type,\n    # Lambda is used because out type (second argument of InputType)\n    # is called with single dict and dataclass requires each value as\n    # separate argument.\n    InputType("ExampleInput", lambda data: ExampleInput(**data)),\n)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"example-input-with-its-fields-mapped-to-custom-dict-keys",children:"Example input with its fields mapped to custom dict keys"}),"\n",(0,a.jsxs)(n.p,{children:["Following code creates a ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," with object type named ",(0,a.jsx)(n.code,{children:"Query"}),"\nwith single field which has an argument of an input type. It then uses\nthe ",(0,a.jsx)(n.code,{children:"InputType"}),' to set custom "out names" values, mapping GraphQL\n',(0,a.jsx)(n.code,{children:"shortMessage"})," to ",(0,a.jsx)(n.code,{children:"message"})," key in Python dict:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from ariadne import InputType, QueryType, make_executable_schema\n\nquery_type = QueryType()\n\n@query_type.field("repr")\ndef resolve_repr(*_, input: dict):\n    # Dict will have `id` and `message` keys\n    input_id = input["id"]\n    input_message = input["message"]\n    return f"id: {input_id}, message: {input_message}"\n\nschema = make_executable_schema(\n    """\n    type Query {\n        repr(input: ExampleInput): String!\n    }\n\n    input ExampleInput {\n        id: ID!\n        shortMessage: String!\n    }\n    """,\n    query_type,\n    InputType("ExampleInput", out_names={"shortMessage": "message"}),\n)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"example-input-value-as-dataclass-with-custom-named-fields",children:"Example input value as dataclass with custom named fields"}),"\n",(0,a.jsxs)(n.p,{children:["Following code creates a ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," with object type named ",(0,a.jsx)(n.code,{children:"Query"}),"\nwith single field which has an argument of an input type. It then uses\nthe ",(0,a.jsx)(n.code,{children:"InputType"})," to set ",(0,a.jsx)(n.code,{children:"ExampleInput"})," dataclass as Python representation\nof this GraphQL type, and maps ",(0,a.jsx)(n.code,{children:"shortMessage"})," input field to it's\n",(0,a.jsx)(n.code,{children:"message"})," attribute:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from dataclasses import dataclass\n\nfrom ariadne import InputType, QueryType, make_executable_schema\n\n@dataclass\nclass ExampleInput:\n    id: str\n    message: str\n\nquery_type = QueryType()\n\n@query_type.field("repr")\ndef resolve_repr(*_, input: ExampleInput):\n    return repr(input)\n\nschema = make_executable_schema(\n    """\n    type Query {\n        repr(input: ExampleInput): String!\n    }\n\n    input ExampleInput {\n        id: ID!\n        shortMessage: String!\n    }\n    """,\n    query_type,\n    InputType(\n        "ExampleInput",\n        lambda data: ExampleInput(**data),\n        {"shortMessage": "message"},\n    ),\n)\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"interfacetype",children:(0,a.jsx)(n.code,{children:"InterfaceType"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"class InterfaceType(ObjectType):\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"/server/next/bindables",children:"Bindable"})," populating interfaces in a ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," with Python logic."]}),"\n",(0,a.jsxs)(n.p,{children:["Extends ",(0,a.jsx)(n.code,{children:"ObjectType"}),", providing ",(0,a.jsx)(n.code,{children:"field"})," decorator and ",(0,a.jsx)(n.code,{children:"set_field"})," and ",(0,a.jsx)(n.code,{children:"set_alias"}),"\nmethods. If those are used to set resolvers for interface's fields, those\nresolvers will instead be set on fields of GraphQL types implementing this\ninterface, but only if those fields don't already have resolver of their own set\nby the ",(0,a.jsx)(n.code,{children:"ObjectType"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"type-resolver",children:"Type resolver"}),"\n",(0,a.jsx)(n.p,{children:'Because GraphQL fields using interface as their returning type can return any\nPython value from their resolver, GraphQL interfaces require special type of\nresolver called "type resolver" to function.'}),"\n",(0,a.jsx)(n.p,{children:"This resolver is called with the value returned by field's resolver and is\nrequired to return a string with a name of GraphQL type represented by Python\nvalue from the field:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'def example_type_resolver(obj: Any, *_) -> str:\n    if isinstance(obj, PythonReprOfUser):\n        return "User"\n\n    if isinstance(obj, PythonReprOfComment):\n        return "Comment"\n\n    raise ValueError(f"Don\'t know GraphQL type for \'{obj}\'!")\n'})}),"\n",(0,a.jsxs)(n.p,{children:["This resolver is not required if the GraphQL field returns a value that has\nthe ",(0,a.jsx)(n.code,{children:"__typename"})," attribute or ",(0,a.jsx)(n.code,{children:"dict"})," key with a name of the GraphQL type:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'user_data_dict = {"__typename": "User", ...}\n\n# or...\n\nclass UserRepr:\n    __typename: str = "User"\n'})}),"\n",(0,a.jsx)(n.h3,{id:"constructor-3",children:"Constructor"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def __init__(\n    self,\n    name: str,\n    type_resolver: Optional[Resolver] = None,\n):\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Initializes the ",(0,a.jsx)(n.code,{children:"InterfaceType"})," with a ",(0,a.jsx)(n.code,{children:"name"})," and optional ",(0,a.jsx)(n.code,{children:"type_resolver"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Type resolver is required by ",(0,a.jsx)(n.code,{children:"InterfaceType"})," to function properly, but can\nbe set later using either ",(0,a.jsx)(n.code,{children:"set_type_resolver(type_resolver)"}),"\nsetter or ",(0,a.jsx)(n.code,{children:"type_resolver"})," decorator."]}),"\n",(0,a.jsx)(n.h4,{id:"required-arguments-2",children:"Required arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"name"}),": a ",(0,a.jsx)(n.code,{children:"str"})," with the name of GraphQL interface type in ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," to\nbind to."]}),"\n",(0,a.jsx)(n.h4,{id:"optional-arguments-3",children:"Optional arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"type_resolver"}),": a ",(0,a.jsx)(n.code,{children:"Resolver"})," used to resolve a str with name of GraphQL type\nfrom it's Python representation."]}),"\n",(0,a.jsx)(n.h3,{id:"methods-5",children:"Methods"}),"\n",(0,a.jsx)(n.h4,{id:"set_type_resolver",children:(0,a.jsx)(n.code,{children:"set_type_resolver"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def set_type_resolver(self, type_resolver: Resolver) -> Resolver:\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Sets function as type resolver for this interface."}),"\n",(0,a.jsxs)(n.p,{children:["Can be used as a decorator. Also available through ",(0,a.jsx)(n.code,{children:"type_resolver"})," alias:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'interface_type = InterfaceType("MyInterface")\n\n@interface_type.type_resolver\ndef type_resolver(obj: Any, *_) -> str:\n    ...\n'})}),"\n",(0,a.jsx)(n.h4,{id:"bind_to_schema-3",children:(0,a.jsx)(n.code,{children:"bind_to_schema"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def bind_to_schema(self, schema: GraphQLSchema) -> None:\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Binds this ",(0,a.jsx)(n.code,{children:"InterfaceType"})," instance to the instance of ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Sets ",(0,a.jsx)(n.code,{children:"resolve_type"})," attribute on GraphQL interface. If this attribute was\npreviously set, it will be replaced to new value."]}),"\n",(0,a.jsxs)(n.p,{children:["If this interface has any resolvers set, it also scans ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," for\ntypes implementing this interface and sets those resolvers on those types\nfields, but only if those fields don't already have other resolver set."]}),"\n",(0,a.jsx)(n.h4,{id:"validate_graphql_type-2",children:(0,a.jsx)(n.code,{children:"validate_graphql_type"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def validate_graphql_type(\n    self,\n    graphql_type: Optional[GraphQLNamedType],\n) -> None:\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Validates that schema's GraphQL type associated with this ",(0,a.jsx)(n.code,{children:"InterfaceType"}),"\nis an ",(0,a.jsx)(n.code,{children:"interface"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"example-2",children:"Example"}),"\n",(0,a.jsxs)(n.p,{children:["Following code creates a ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," with a field that returns random\nresult of either ",(0,a.jsx)(n.code,{children:"User"})," or ",(0,a.jsx)(n.code,{children:"Post"})," GraphQL type. It also supports dict with\n",(0,a.jsx)(n.code,{children:"__typename"})," key that explicitly declares its GraphQL type:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import random\nfrom dataclasses import dataclass\nfrom ariadne import QueryType, InterfaceType, make_executable_schema\n\n@dataclass\nclass UserModel:\n    id: str\n    name: str\n\n@dataclass\nclass PostModel:\n    id: str\n    message: str\n\nresults = (\n    UserModel(id=1, name="Bob"),\n    UserModel(id=2, name="Alice"),\n    UserModel(id=3, name="Jon"),\n    PostModel(id=1, message="Hello world!"),\n    PostModel(id=2, message="How\'s going?"),\n    PostModel(id=3, message="Sure thing!"),\n    {"__typename": "User", "id": 4, "name": "Polito"},\n    {"__typename": "User", "id": 5, "name": "Aerith"},\n    {"__typename": "Post", "id": 4, "message": "Good day!"},\n    {"__typename": "Post", "id": 5, "message": "Whats up?"},\n)\n\nquery_type = QueryType()\n\n@query_type.field("result")\ndef resolve_random_result(*_):\n    return random.choice(results)\n\n\nresult_type = InterfaceType("Result")\n\n@result_type.type_resolver\ndef resolve_result_type(obj: UserModel | PostModel | dict, *_) -> str:\n    if isinstance(obj, UserModel):\n        return "User"\n\n    if isinstance(obj, PostModel):\n        return "Post"\n\n    if isinstance(obj, dict) and obj.get("__typename"):\n        return obj["__typename"]\n\n    raise ValueError(f"Don\'t know GraphQL type for \'{obj}\'!")\n\n\nschema = make_executable_schema(\n    """\n    type Query {\n        result: Result!\n    }\n\n    interface Result {\n        id: ID!\n    }\n\n    type User implements Result {\n        id: ID!\n        name: String!\n    }\n\n    type Post implements Result {\n        id: ID!\n        message: String!\n    }\n    """,\n    query_type,\n    result_type,\n)\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"mutationtype",children:(0,a.jsx)(n.code,{children:"MutationType"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"class MutationType(ObjectType):\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"An convenience class for defining Mutation type."}),"\n",(0,a.jsx)(n.h3,{id:"constructor-4",children:"Constructor"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def __init__(self):\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Initializes the ",(0,a.jsx)(n.code,{children:"MutationType"})," with a GraphQL name set to ",(0,a.jsx)(n.code,{children:"Mutation"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"example-3",children:"Example"}),"\n",(0,a.jsx)(n.p,{children:"Both of those code samples have same result:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"mutation_type = MutationType()\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'mutation_type = ObjectType("Mutation")\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"objecttype",children:(0,a.jsx)(n.code,{children:"ObjectType"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"class ObjectType(SchemaBindable):\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"/server/next/bindables",children:"Bindable"})," populating object types in a ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," with Python logic."]}),"\n",(0,a.jsx)(n.h3,{id:"constructor-5",children:"Constructor"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def __init__(self, name: str):\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Initializes the ",(0,a.jsx)(n.code,{children:"ObjectType"})," with a ",(0,a.jsx)(n.code,{children:"name"}),"."]}),"\n",(0,a.jsx)(n.h4,{id:"required-arguments-3",children:"Required arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"name"}),": a ",(0,a.jsx)(n.code,{children:"str"})," with the name of GraphQL object type in ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," to\nbind to."]}),"\n",(0,a.jsx)(n.h3,{id:"methods-6",children:"Methods"}),"\n",(0,a.jsx)(n.h4,{id:"field",children:(0,a.jsx)(n.code,{children:"field"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def field(self, name: str) -> Callable[[Resolver], Resolver]:\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Return a decorator that sets decorated function as a resolver for named field."}),"\n",(0,a.jsxs)(n.p,{children:["Wrapper for ",(0,a.jsx)(n.code,{children:"create_register_resolver"})," that on runtime validates ",(0,a.jsx)(n.code,{children:"name"})," to be a\nstring."]}),"\n",(0,a.jsx)(n.h5,{id:"required-arguments-4",children:"Required arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"name"}),": a ",(0,a.jsx)(n.code,{children:"str"})," with a name of the GraphQL object's field in ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," to\nbind decorated resolver to."]}),"\n",(0,a.jsx)(n.h4,{id:"create_register_resolver",children:(0,a.jsx)(n.code,{children:"create_register_resolver"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def create_register_resolver(\n    self,\n    name: str,\n) -> Callable[[Resolver], Resolver]:\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Return a decorator that sets decorated function as a resolver for named field."}),"\n",(0,a.jsx)(n.h5,{id:"required-arguments-5",children:"Required arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"name"}),": a ",(0,a.jsx)(n.code,{children:"str"})," with a name of the GraphQL object's field in ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," to\nbind decorated resolver to."]}),"\n",(0,a.jsx)(n.h4,{id:"set_field",children:(0,a.jsx)(n.code,{children:"set_field"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def set_field(self, name, resolver: Resolver) -> Resolver:\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Set a resolver for the field name."}),"\n",(0,a.jsx)(n.h5,{id:"required-arguments-6",children:"Required arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"name"}),": a ",(0,a.jsx)(n.code,{children:"str"})," with a name of the GraphQL object's field in ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," to\nset this resolver for."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"resolver"}),": a ",(0,a.jsx)(n.code,{children:"Resolver"})," function to use."]}),"\n",(0,a.jsx)(n.h4,{id:"set_alias",children:(0,a.jsx)(n.code,{children:"set_alias"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def set_alias(self, name: str, to: str) -> None:\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Set an alias resolver for the field name to given Python name."}),"\n",(0,a.jsx)(n.h5,{id:"required-arguments-7",children:"Required arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"name"}),": a ",(0,a.jsx)(n.code,{children:"str"})," with a name of the GraphQL object's field in ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," to\nset this resolver for."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"to"}),": a ",(0,a.jsx)(n.code,{children:"str"})," of an attribute or dict key to resolve this field to."]}),"\n",(0,a.jsx)(n.h4,{id:"bind_to_schema-4",children:(0,a.jsx)(n.code,{children:"bind_to_schema"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def bind_to_schema(self, schema: GraphQLSchema) -> None:\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Binds this ",(0,a.jsx)(n.code,{children:"ObjectType"})," instance to the instance of ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["If it has any resolver functions set, it assigns those to GraphQL type's\nfields ",(0,a.jsx)(n.code,{children:"resolve"})," attributes. If field already has other resolver set on\nits ",(0,a.jsx)(n.code,{children:"resolve"})," attribute, this resolver is replaced with the new one."]}),"\n",(0,a.jsx)(n.h4,{id:"validate_graphql_type-3",children:(0,a.jsx)(n.code,{children:"validate_graphql_type"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def validate_graphql_type(\n    self,\n    graphql_type: Optional[GraphQLNamedType],\n) -> None:\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Validates that schema's GraphQL type associated with this ",(0,a.jsx)(n.code,{children:"ObjectType"}),"\nis a ",(0,a.jsx)(n.code,{children:"type"}),"."]}),"\n",(0,a.jsx)(n.h4,{id:"bind_resolvers_to_graphql_type",children:(0,a.jsx)(n.code,{children:"bind_resolvers_to_graphql_type"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def bind_resolvers_to_graphql_type(\n    self,\n    graphql_type,\n    replace_existing = True,\n) -> None:\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Binds this ",(0,a.jsx)(n.code,{children:"ObjectType"})," instance to the instance of ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"example-4",children:"Example"}),"\n",(0,a.jsxs)(n.p,{children:["Following code creates a ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," with single object type named ",(0,a.jsx)(n.code,{children:"Query"}),"\nand uses ",(0,a.jsx)(n.code,{children:"ObjectType"})," to set resolvers on its fields:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import random\nfrom datetime import datetime\n\nfrom ariadne import ObjectType, make_executable_schema\n\nquery_type = ObjectType("Query")\n\n@query_type.field("diceRoll")\ndef resolve_dice_roll(*_):\n    return random.int(1, 6)\n\n\n@query_type.field("year")\ndef resolve_year(*_):\n    return datetime.today().year\n\n\nschema = make_executable_schema(\n    """\n    type Query {\n        diceRoll: Int!\n        year: Int!\n    }\n    """,\n    query_type,\n)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"example-with-objects-in-objects",children:"Example with objects in objects"}),"\n",(0,a.jsxs)(n.p,{children:["When a field in the schema returns other GraphQL object, this object's\nresolvers are called with value returned from field's resolver. For example\nif there's an ",(0,a.jsx)(n.code,{children:"user"})," field on the ",(0,a.jsx)(n.code,{children:"Query"})," type that returns the ",(0,a.jsx)(n.code,{children:"User"})," type,\nyou don't have to resolve ",(0,a.jsx)(n.code,{children:"User"})," fields in ",(0,a.jsx)(n.code,{children:"user"})," resolver. In below example\n",(0,a.jsx)(n.code,{children:"fullName"})," field on ",(0,a.jsx)(n.code,{children:"User"})," type is resolved from data on ",(0,a.jsx)(n.code,{children:"UserModel"})," object\nthat ",(0,a.jsx)(n.code,{children:"user"})," field resolver on ",(0,a.jsx)(n.code,{children:"Query"})," type returned:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import dataclasses\nfrom ariadne import ObjectType, make_executable_schema\n\n@dataclasses.dataclass\nclass UserModel:\n    id: int\n    username: str\n    first_name: str\n    last_name: str\n\n\nusers = [\n    UserModel(\n        id=1,\n        username="Dany",\n        first_name="Daenerys",\n        last_name="Targaryen",\n    ),\n    UserModel(\n        id=2,\n        username="BlackKnight19",\n        first_name="Cahir",\n        last_name="Mawr Dyffryn aep Ceallach",\n    ),\n    UserModel(\n        id=3,\n        username="TheLady",\n        first_name="Dorotea",\n        last_name="Senjak",\n    ),\n]\n\n\n# Query type resolvers return users, but don\'t care about fields\n# of User type\nquery_type = ObjectType("Query")\n\n@query_type.field("users")\ndef resolve_users(*_) -> list[UserModel]:\n    # In real world applications this would be a database query\n    # returning iterable with user results\n    return users\n\n\n@query_type.field("user")\ndef resolve_user(*_, id: str) -> UserModel | None:\n    # In real world applications this would be a database query\n    # returning single user or None\n\n    try:\n        # GraphQL ids are always strings\n        clean_id = int(id)\n    except (ValueError, TypeError):\n        # We could raise "ValueError" instead\n        return None\n\n    for user in users:\n        if user.id == id:\n            return user\n\n    return None\n\n\n# User type resolvers don\'t know how to retrieve User, but know how to\n# resolve User type fields from UserModel instance\nuser_type = ObjectType("User")\n\n# Resolve "name" GraphQL field to "username" attribute\nuser_type.set_alias("name", "username")\n\n# Resolve "fullName" field to combined first and last name\n# `obj` argument will be populated by GraphQL with a value from\n# resolver for field returning "User" type\n@user_type.field("fullName")\ndef resolve_user_full_name(obj: UserModel, *_):\n    return f"{obj.first_name} {obj.last_name}"\n\n\nschema = make_executable_schema(\n    """\n    type Query {\n        users: [User!]!\n        user(id: ID!): User\n    }\n\n    type User {\n        id: ID!\n        name: String!\n        fullName: String!\n    }\n    """,\n    query_type,\n    user_type,\n)\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"querytype",children:(0,a.jsx)(n.code,{children:"QueryType"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"class QueryType(ObjectType):\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"An convenience class for defining Query type."}),"\n",(0,a.jsx)(n.h3,{id:"constructor-6",children:"Constructor"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def __init__(self):\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Initializes the ",(0,a.jsx)(n.code,{children:"QueryType"})," with a GraphQL name set to ",(0,a.jsx)(n.code,{children:"Query"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"example-5",children:"Example"}),"\n",(0,a.jsx)(n.p,{children:"Both of those code samples have same effect:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"query_type = QueryType()\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'query_type = ObjectType("Query")\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"scalartype",children:(0,a.jsx)(n.code,{children:"ScalarType"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"class ScalarType(SchemaBindable):\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"/server/next/bindables",children:"Bindable"})," populating scalars in a ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," with Python logic."]}),"\n",(0,a.jsx)(n.p,{children:"GraphQL scalars implement default serialization and deserialization logic.\nThis class is only useful when custom logic is needed, most commonly\nwhen Python representation of scalar's value is not JSON-serializable by\ndefault."}),"\n",(0,a.jsx)(n.p,{children:"This logic can be customized for three steps:"}),"\n",(0,a.jsx)(n.h3,{id:"serialization",children:"Serialization"}),"\n",(0,a.jsx)(n.p,{children:"Serialization step converts Python representation of scalar's value to a\nJSON serializable format."}),"\n",(0,a.jsx)(n.p,{children:"Serializer function takes single argument and returns a single,\nJSON serializable value:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'def serialize_date(value: date) -> str:\n    # Serialize dates as "YYYY-MM-DD" string\n    return date.strftime("%Y-%m-%d")\n'})}),"\n",(0,a.jsx)(n.h3,{id:"value-parsing",children:"Value parsing"}),"\n",(0,a.jsx)(n.p,{children:"Value parsing step converts value from deserialized JSON\nto Python representation."}),"\n",(0,a.jsx)(n.p,{children:"Value parser function takes single argument and returns a single value:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'def parse_date_str(value: str) -> date:\n    try:\n        # Parse "YYYY-MM-DD" string into date\n        return datetime.strptime(value, "%Y-%m-%d").date()\n    except (ValueError, TypeError):\n        raise ValueError(\n            f\'"{value}" is not a date string in YYYY-MM-DD format.\'\n        )\n'})}),"\n",(0,a.jsx)(n.h3,{id:"literal-parsing",children:"Literal parsing"}),"\n",(0,a.jsx)(n.p,{children:"Literal parsing step converts value from GraphQL abstract syntax tree (AST)\nto Python representation."}),"\n",(0,a.jsx)(n.p,{children:"Literal parser function takes two arguments, an AST node and a dict with\nquery's variables and returns Python value:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'def parse_date_literal(\n    value: str, variable_values: dict[str, Any] = None\n) -> date:\n    if not isinstance(ast, StringValueNode):\n        raise ValueError()\n\n    try:\n        # Parse "YYYY-MM-DD" string into date\n        return datetime.strptime(ast.value, "%Y-%m-%d").date()\n    except (ValueError, TypeError):\n        raise ValueError(\n            f\'"{value}" is not a date string in YYYY-MM-DD format.\'\n        )\n'})}),"\n",(0,a.jsx)(n.p,{children:"When scalar has custom value parser set, but not the literal parser, the\nGraphQL query executor will use default literal parser, and then call the\nvalue parser with it's return value. This mechanism makes custom literal\nparser unnecessary for majority of scalar implementations."}),"\n",(0,a.jsx)(n.p,{children:"Scalar literals are always parsed twice: on query validation and during\nquery execution."}),"\n",(0,a.jsx)(n.h3,{id:"constructor-7",children:"Constructor"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def __init__(\n    self,\n    name: str,\n    *,\n    serializer: Optional[GraphQLScalarSerializer],\n    value_parser: Optional[GraphQLScalarValueParser],\n    literal_parser: Optional[GraphQLScalarLiteralParser],\n):\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Initializes the ",(0,a.jsx)(n.code,{children:"ScalarType"})," with a ",(0,a.jsx)(n.code,{children:"name"}),"."]}),"\n",(0,a.jsx)(n.h4,{id:"required-arguments-8",children:"Required arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"name"}),": a ",(0,a.jsx)(n.code,{children:"str"})," with the name of GraphQL scalar in ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," to\nbind to."]}),"\n",(0,a.jsx)(n.h4,{id:"optional-arguments-4",children:"Optional arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"serializer"}),": a function called to convert Python representation of\nscalar's value to JSON serializable format."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"value_parser"}),": a function called to convert a JSON deserialized value\nfrom query's \"variables\" JSON into scalar's Python representation."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"literal_parser"}),": a function called to convert an AST value\nfrom parsed query into scalar's Python representation."]}),"\n",(0,a.jsx)(n.h3,{id:"methods-7",children:"Methods"}),"\n",(0,a.jsx)(n.h4,{id:"set_serializer",children:(0,a.jsx)(n.code,{children:"set_serializer"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def set_serializer(\n    self,\n    f: GraphQLScalarSerializer,\n) -> GraphQLScalarSerializer:\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Sets function as serializer for this scalar."}),"\n",(0,a.jsxs)(n.p,{children:["Can be used as a decorator. Also available through ",(0,a.jsx)(n.code,{children:"serializer"})," alias:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'date_scalar = ScalarType("Date")\n\n@date_scalar.serializer\ndef serialize_date(value: date) -> str:\n    # Serialize dates as "YYYY-MM-DD" string\n    return date.strftime("%Y-%m-%d")\n'})}),"\n",(0,a.jsx)(n.h4,{id:"set_value_parser",children:(0,a.jsx)(n.code,{children:"set_value_parser"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def set_value_parser(\n    self,\n    f: GraphQLScalarValueParser,\n) -> GraphQLScalarValueParser:\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Sets function as value parser for this scalar."}),"\n",(0,a.jsxs)(n.p,{children:["Can be used as a decorator. Also available through ",(0,a.jsx)(n.code,{children:"value_parser"})," alias:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'date_scalar = ScalarType("Date")\n\n@date_scalar.value_parser\ndef parse_date_str(value: str) -> date:\n    try:\n        # Parse "YYYY-MM-DD" string into date\n        return datetime.strptime(value, "%Y-%m-%d").date()\n    except (ValueError, TypeError):\n        raise ValueError(\n            f\'"{value}" is not a date string in YYYY-MM-DD format.\'\n        )\n'})}),"\n",(0,a.jsx)(n.h4,{id:"set_literal_parser",children:(0,a.jsx)(n.code,{children:"set_literal_parser"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def set_literal_parser(\n    self,\n    f: GraphQLScalarLiteralParser,\n) -> GraphQLScalarLiteralParser:\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Sets function as literal parser for this scalar."}),"\n",(0,a.jsxs)(n.p,{children:["Can be used as a decorator. Also available through ",(0,a.jsx)(n.code,{children:"literal_parser"})," alias:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'date_scalar = ScalarType("Date")\n\n@date_scalar.literal_parser\ndef parse_date_literal(\n    value: str, variable_values: Optional[dict[str, Any]] = None\n) -> date:\n    if not isinstance(ast, StringValueNode):\n        raise ValueError()\n\n    try:\n        # Parse "YYYY-MM-DD" string into date\n        return datetime.strptime(ast.value, "%Y-%m-%d").date()\n    except (ValueError, TypeError):\n        raise ValueError(\n            f\'"{value}" is not a date string in YYYY-MM-DD format.\'\n        )\n'})}),"\n",(0,a.jsx)(n.h4,{id:"bind_to_schema-5",children:(0,a.jsx)(n.code,{children:"bind_to_schema"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def bind_to_schema(self, schema: GraphQLSchema) -> None:\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Binds this ",(0,a.jsx)(n.code,{children:"ScalarType"})," instance to the instance of ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"If it has serializer or parser functions set, it assigns those to GraphQL\nscalar's attributes. If scalar's attribute already has other function\nset, this function is replaced with the new one."}),"\n",(0,a.jsx)(n.h4,{id:"validate_graphql_type-4",children:(0,a.jsx)(n.code,{children:"validate_graphql_type"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def validate_graphql_type(\n    self,\n    graphql_type: Optional[GraphQLNamedType],\n) -> None:\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Validates that schema's GraphQL type associated with this ",(0,a.jsx)(n.code,{children:"ScalarType"}),"\nis a ",(0,a.jsx)(n.code,{children:"scalar"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"example-datetime-scalar",children:"Example datetime scalar"}),"\n",(0,a.jsx)(n.p,{children:"Following code defines a datetime scalar which converts Python datetime\nobject to and from a string. Note that it without custom literal scalar:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from datetime import datetime\n\nfrom ariadne import QueryType, ScalarType, make_executable_schema\n\nscalar_type = ScalarType("DateTime")\n\n@scalar_type.serializer\ndef serialize_value(val: datetime) -> str:\n    return datetime.strftime(val, "%Y-%m-%d %H:%M:%S")\n\n\n@scalar_type.value_parser\ndef parse_value(val) -> datetime:\n    if not isinstance(val, str):\n        raise ValueError(\n            f"\'{val}\' is not a valid JSON representation "\n        )\n\n    return datetime.strptime(val, "%Y-%m-%d %H:%M:%S")\n\n\nquery_type = QueryType()\n\n@query_type.field("now")\ndef resolve_now(*_):\n    return datetime.now()\n\n\n@query_type.field("diff")\ndef resolve_diff(*_, value):\n    delta = datetime.now() - value\n    return int(delta.total_seconds())\n\n\nschema = make_executable_schema(\n    """\n    scalar DateTime\n\n    type Query {\n        now: DateTime!\n        diff(value: DateTime): Int!\n    }\n    """,\n    scalar_type,\n    query_type,\n)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"example-generic-scalar",children:"Example generic scalar"}),"\n",(0,a.jsxs)(n.p,{children:["Generic scalar is a pass-through scalar that doesn't perform any value\nconversion. Most common use case for those is for GraphQL fields that\nreturn unstructured JSON to the client. To create a scalar like this,\nyou can simply include  ",(0,a.jsx)(n.code,{children:"scalar Generic"})," in your ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from ariadne import QueryType, make_executable_schema\n\nquery_type = QueryType()\n\n@query_type.field("rawJSON")\ndef resolve_raw_json(*_):\n    # Note: this value needs to be JSON serializable\n    return {\n        "map": {\n            "0": "Hello!",\n            "1": "World!",\n        },\n        "list": [\n            2,\n            1,\n            3,\n            7,\n        ],\n    }\n\n\nschema = make_executable_schema(\n    """\n    scalar Generic\n\n    type Query {\n        rawJSON: Generic!\n    }\n    """,\n    query_type,\n)\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"schemabindable",children:(0,a.jsx)(n.code,{children:"SchemaBindable"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"class SchemaBindable(Protocol):\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Base class for ",(0,a.jsx)(n.a,{href:"/server/next/bindables",children:"bindable"})," types."]}),"\n",(0,a.jsxs)(n.p,{children:["Subclasses should extend the ",(0,a.jsx)(n.code,{children:"bind_to_schema"})," method with custom logic for\npopulating an instance of ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," with Python logic and values."]}),"\n",(0,a.jsx)(n.h3,{id:"methods-8",children:"Methods"}),"\n",(0,a.jsx)(n.h4,{id:"bind_to_schema-6",children:(0,a.jsx)(n.code,{children:"bind_to_schema"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def bind_to_schema(self, schema: GraphQLSchema) -> None:\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Binds this ",(0,a.jsx)(n.code,{children:"Schema[Bindable"}),"](bindables.md) instance to the instance of ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"example-6",children:"Example"}),"\n",(0,a.jsxs)(n.p,{children:["Example ",(0,a.jsx)(n.code,{children:"InputType"})," ",(0,a.jsx)(n.a,{href:"/server/next/bindables",children:"bindable"})," that sets Python names for fields of GraphQL input:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from ariadne import SchemaBindable\nfrom graphql import GraphQLInputType\n\nclass InputType(SchemaBindable):\n    _name: str\n    _fields: dict[str, str]\n\n    def __init__(self, name: str, fields: dict[str, str] | None):\n        self._name = name\n        self._fields = fields or {}\n\n    def set_field_out_name(self, field: str, out_name: str):\n        self._fields[field] = out_name\n\n    def bind_to_schema(self, schema: GraphQLSchema) -> None:\n        graphql_type = schema.get_type(self._name)\n        if not graphql_type:\n            raise ValueError(\n                "Type %s is not defined in the schema" % self.name\n            )\n        if not isinstance(graphql_type, GraphQLInputType):\n            raise ValueError(\n                "%s is defined in the schema, but it is instance of %s (expected %s)"\n                % (self.name, type(graphql_type).__name__, GraphQLInputType.__name__)\n            )\n\n        for field, out_name in self._fields.items():\n            schema_field = graphql_type.fields.get(field)\n            if not schema_field:\n                raise ValueError(\n                    "Type %s does not define the %s field" % (self.name, field)\n                )\n\n            schema_field.out_name = out_name\n'})}),"\n",(0,a.jsx)(n.p,{children:"Usage:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from ariadne import QueryType, make_executable_schema\n\nfrom .input_type import InputType\nfrom .users.models import User\n\ninput_type = InputType(\n    "UserInput",\n    {\n        "fullName": "full_name",\n        "yearOfBirth": "year_of_birth",\n    }\n)\n\nquery_type = QueryType()\n\n@query_type.field("countUsers")\ndef resolve_count_users(*_, input):\n    qs = User.objects\n\n    if input:\n        if input["full_name"]:\n            qs = qs.filter(full_name__ilike=input["full_name"])\n        if input["year_of_birth"]:\n            qs = qs.filter(dob__year=input["year_of_birth"])\n\n    return qs.count()\n\n\nschema = make_executable_schema(\n    """\n    type Query {\n        countUsers(input: UserInput!): Int!\n    }\n\n    input UserInput {\n        fullName: String\n        yearOfBirth: Int\n    }\n    """,\n    query_type,\n    input_type,\n)\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"schemadirectivevisitor",children:(0,a.jsx)(n.code,{children:"SchemaDirectiveVisitor"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"class SchemaDirectiveVisitor(SchemaVisitor):\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Base class for custom GraphQL directives."}),"\n",(0,a.jsxs)(n.p,{children:["Also implements class methods with container and management logic for\ndirectives at schema creation time, used by ",(0,a.jsx)(n.code,{children:"make_executable_schema"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"lifecycle",children:"Lifecycle"}),"\n",(0,a.jsx)(n.p,{children:"Separate instances of the GraphQL directive are created for each GraphQL\nschema item with the directive set on it. If directive is set on two\nfields, two separate instances of a directive will be created."}),"\n",(0,a.jsx)(n.h3,{id:"constructor-8",children:"Constructor"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def __init__(self, name, args, visited_type, schema, context):\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Instantiates the directive for schema object."}),"\n",(0,a.jsx)(n.h4,{id:"required-arguments-9",children:"Required arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"name"}),": a ",(0,a.jsx)(n.code,{children:"str"})," with directive's name."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"args"}),": a ",(0,a.jsx)(n.code,{children:"dict"})," with directive's arguments."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"visited_type"}),": an GraphQL type this directive is set on."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"schema"}),": the ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," instance."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"context"}),": ",(0,a.jsx)(n.code,{children:"None"}),", unused but present for historic reasons."]}),"\n",(0,a.jsx)(n.h3,{id:"methods-9",children:"Methods"}),"\n",(0,a.jsx)(n.h4,{id:"get_directive_declaration",children:(0,a.jsx)(n.code,{children:"get_directive_declaration"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def get_directive_declaration(\n    cls,\n    directive_name: str,\n    schema: GraphQLSchema,\n) -> Optional[GraphQLDirective]:\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Get GraphQL directive declaration from ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," by it's name."]}),"\n",(0,a.jsxs)(n.p,{children:["Returns ",(0,a.jsx)(n.code,{children:"GraphQLDirective"})," object or ",(0,a.jsx)(n.code,{children:"None"}),"."]}),"\n",(0,a.jsx)(n.h5,{id:"required-arguments-10",children:"Required arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"directive_name"}),": a ",(0,a.jsx)(n.code,{children:"str"})," with name of directive in the ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"schema"}),": a ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:(0,a.jsx)(n.code,{children:"GraphQLSchema"})})," instance to retrieve the directive\ndeclaration from."]}),"\n",(0,a.jsx)(n.h4,{id:"get_declared_directives",children:(0,a.jsx)(n.code,{children:"get_declared_directives"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def get_declared_directives(\n    cls,\n    schema: GraphQLSchema,\n    directive_visitors: Dict[str, Type['SchemaDirectiveVisitor']],\n) -> Dict[str, GraphQLDirective]:\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Get GraphQL directives declaration from ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," by their names."]}),"\n",(0,a.jsxs)(n.p,{children:["Returns a ",(0,a.jsx)(n.code,{children:"dict"})," where keys are strings with directive names in schema\nand values are ",(0,a.jsx)(n.code,{children:"GraphQLDirective"})," objects with their declarations in the\n",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"}),"."]}),"\n",(0,a.jsx)(n.h5,{id:"required-arguments-11",children:"Required arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"directive_name"}),": a ",(0,a.jsx)(n.code,{children:"str"})," with name of directive in the ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"schema"}),": a ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:(0,a.jsx)(n.code,{children:"GraphQLSchema"})})," instance to retrieve the directive\ndeclaration from."]}),"\n",(0,a.jsx)(n.h4,{id:"visit_schema_directives",children:(0,a.jsx)(n.code,{children:"visit_schema_directives"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def visit_schema_directives(\n    cls,\n    schema: GraphQLSchema,\n    directive_visitors: Dict[str, Type['SchemaDirectiveVisitor']],\n    *,\n    context: Optional[Dict[str, Any]],\n) -> Mapping[str, List['SchemaDirectiveVisitor']]:\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Apply directives to the ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Applied directives mutate the ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," in place."]}),"\n",(0,a.jsx)(n.p,{children:"Returns dict with names of GraphQL directives as keys and list of\ndirective instances created for each directive name."}),"\n",(0,a.jsx)(n.h5,{id:"required-arguments-12",children:"Required arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"schema"}),": a ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," to which directives should be applied."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"directive_visitors"}),": a ",(0,a.jsx)(n.code,{children:"dict"})," with ",(0,a.jsx)(n.code,{children:"str"})," and\n",(0,a.jsx)(n.code,{children:"Type[SchemaDirectiveVisitor]"})," pairs defining mapping of\n",(0,a.jsx)(n.code,{children:"SchemaDirectiveVisitor"})," types to their names in the ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"}),"."]}),"\n",(0,a.jsx)(n.h5,{id:"optional-arguments-5",children:"Optional arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"context"}),": ",(0,a.jsx)(n.code,{children:"None"}),", unused but present for historic reasons."]}),"\n",(0,a.jsx)(n.h3,{id:"example-schema-visitors",children:"Example schema visitors"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"SchemaDirectiveVisitor"})," subclasses can implement any of below methods\nthat will be called when directive is applied to different elements of\n",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"from ariadne import SchemaDirectiveVisitor\nfrom graphql import (\n    GraphQLArgument,\n    GraphQLEnumType,\n    GraphQLEnumValue,\n    GraphQLField,\n    GraphQLInputField,\n    GraphQLInputObjectType,\n    GraphQLInterfaceType,\n    GraphQLObjectType,\n    GraphQLScalarType,\n    GraphQLSchema,\n    GraphQLUnionType,\n)\n\nclass MyDirective(SchemaDirectiveVisitor):\n    def visit_schema(self, schema: GraphQLSchema) -> None:\n        pass\n\n    def visit_scalar(self, scalar: GraphQLScalarType) -> GraphQLScalarType:\n        pass\n\n    def visit_object(self, object_: GraphQLObjectType) -> GraphQLObjectType:\n        pass\n\n    def visit_field_definition(\n        self,\n        field: GraphQLField,\n        object_type: Union[GraphQLObjectType, GraphQLInterfaceType],\n    ) -> GraphQLField:\n        pass\n\n    def visit_argument_definition(\n        self,\n        argument: GraphQLArgument,\n        field: GraphQLField,\n        object_type: Union[GraphQLObjectType, GraphQLInterfaceType],\n    ) -> GraphQLArgument:\n        pass\n\n    def visit_interface(self, interface: GraphQLInterfaceType) -> GraphQLInterfaceType:\n        pass\n\n    def visit_union(self, union: GraphQLUnionType) -> GraphQLUnionType:\n        pass\n\n    def visit_enum(self, type_: GraphQLEnumType) -> GraphQLEnumType:\n        pass\n\n    def visit_enum_value(\n        self, value: GraphQLEnumValue, enum_type: GraphQLEnumType\n    ) -> GraphQLEnumValue:\n        pass\n\n    def visit_input_object(\n        self, object_: GraphQLInputObjectType\n    ) -> GraphQLInputObjectType:\n        pass\n\n    def visit_input_field_definition(\n        self, field: GraphQLInputField, object_type: GraphQLInputObjectType\n    ) -> GraphQLInputField:\n        pass\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"schemanameconverter",children:(0,a.jsx)(n.code,{children:"SchemaNameConverter"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"SchemaNameConverter = Callable[[str, GraphQLSchema, Tuple[str, ...]], str]\n"})}),"\n",(0,a.jsxs)(n.p,{children:["A type of a function implementing a strategy for names conversion in schema. Passed as an option to ",(0,a.jsx)(n.code,{children:"make_executable_schema"})," and ",(0,a.jsx)(n.code,{children:"convert_schema_names"})," functions."]}),"\n",(0,a.jsx)(n.p,{children:"Takes three arguments:"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"name"}),": a ",(0,a.jsx)(n.code,{children:"str"})," with schema name to convert."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"schema"}),": the ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," in which names are converted."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"path"}),": a tuple of ",(0,a.jsx)(n.code,{children:"str"})," representing a path to the schema item which name is being converted."]}),"\n",(0,a.jsx)(n.p,{children:"Returns a string with the Python name to use."}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"snakecasefallbackresolverssetter",children:(0,a.jsx)(n.code,{children:"SnakeCaseFallbackResolversSetter"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"class SnakeCaseFallbackResolversSetter(FallbackResolversSetter):\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Subclass of ",(0,a.jsx)(n.code,{children:"FallbackResolversSetter"})," that uses case-converting resolver\ninstead of ",(0,a.jsx)(n.code,{children:"default_field_resolver"}),"."]}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Deprecated:"})," Use ",(0,a.jsx)(n.code,{children:"convert_names_case"})," from ",(0,a.jsx)(n.code,{children:"make_executable_schema"}),"\ninstead."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"methods-10",children:"Methods"}),"\n",(0,a.jsx)(n.h4,{id:"add_resolver_to_field-1",children:(0,a.jsx)(n.code,{children:"add_resolver_to_field"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def add_resolver_to_field(\n    self,\n    field_name: str,\n    field_object: GraphQLField,\n) -> None:\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Sets case converting resolver on a field that doesn't have any."}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"subscriptiontype",children:(0,a.jsx)(n.code,{children:"SubscriptionType"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"class SubscriptionType(ObjectType):\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"/server/next/bindables",children:"Bindable"})," populating the Subscription type in a ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," with Python logic."]}),"\n",(0,a.jsxs)(n.p,{children:["Extends ",(0,a.jsx)(n.code,{children:"ObjectType"}),", providing ",(0,a.jsx)(n.code,{children:"source"})," decorator and ",(0,a.jsx)(n.code,{children:"set_source"})," method, used\nto set subscription sources for it's fields."]}),"\n",(0,a.jsx)(n.h3,{id:"subscription-sources-subscribers",children:'Subscription sources ("subscribers")'}),"\n",(0,a.jsx)(n.p,{children:"Subscription source is a function that is an async generator. This function is used\nto subscribe to source of events or messages. It can also filter the messages\nby not yielding them."}),"\n",(0,a.jsx)(n.p,{children:"Its signature is same as resolver:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"async def source_fn(\n    root_value: Any, info: GraphQLResolveInfo, **field_args\n) -> Any:\n    yield ...\n"})}),"\n",(0,a.jsx)(n.h3,{id:"subscription-resolvers",children:"Subscription resolvers"}),"\n",(0,a.jsxs)(n.p,{children:["Subscription resolvers are called with message returned from the source. Their role\nis to convert this message into Python representation of a type associated with\nsubscription's field in ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"}),". Its called with message yielded from\nsource function as first argument."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def resolver_fn(\n    message: Any, info: GraphQLResolveInfo, **field_args\n) -> Any:\n    # Subscription resolver can be sync and async.\n    return ...\n"})}),"\n",(0,a.jsx)(n.h3,{id:"graphql-arguments",children:"GraphQL arguments"}),"\n",(0,a.jsx)(n.p,{children:"When subscription field has arguments those arguments values are passed\nto both source and resolver functions."}),"\n",(0,a.jsx)(n.h3,{id:"constructor-9",children:"Constructor"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def __init__(self):\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Initializes the ",(0,a.jsx)(n.code,{children:"SubscriptionType"})," with a GraphQL name set to ",(0,a.jsx)(n.code,{children:"Subscription"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"methods-11",children:"Methods"}),"\n",(0,a.jsx)(n.h4,{id:"source",children:(0,a.jsx)(n.code,{children:"source"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def source(self, name: str) -> Callable[[Subscriber], Subscriber]:\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Return a decorator that sets decorated function as a source for named field."}),"\n",(0,a.jsxs)(n.p,{children:["Wrapper for ",(0,a.jsx)(n.code,{children:"create_register_subscriber"})," that on runtime validates ",(0,a.jsx)(n.code,{children:"name"})," to be a\nstring."]}),"\n",(0,a.jsx)(n.h5,{id:"required-arguments-13",children:"Required arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"name"}),": a ",(0,a.jsx)(n.code,{children:"str"})," with a name of the GraphQL object's field in ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," to\nbind decorated source to."]}),"\n",(0,a.jsx)(n.h4,{id:"create_register_subscriber",children:(0,a.jsx)(n.code,{children:"create_register_subscriber"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def create_register_subscriber(\n    self,\n    name: str,\n) -> Callable[[Subscriber], Subscriber]:\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Return a decorator that sets decorated function as a source for named field."}),"\n",(0,a.jsx)(n.h5,{id:"required-arguments-14",children:"Required arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"name"}),": a ",(0,a.jsx)(n.code,{children:"str"})," with a name of the GraphQL object's field in ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," to\nbind decorated source to."]}),"\n",(0,a.jsx)(n.h4,{id:"set_source",children:(0,a.jsx)(n.code,{children:"set_source"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def set_source(self, name, generator: Subscriber) -> Subscriber:\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Set a source for the field name."}),"\n",(0,a.jsx)(n.h5,{id:"required-arguments-15",children:"Required arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"name"}),": a ",(0,a.jsx)(n.code,{children:"str"})," with a name of the GraphQL object's field in ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," to\nset this source for."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"generator"}),": a ",(0,a.jsx)(n.code,{children:"Subscriber"})," function to use as an source."]}),"\n",(0,a.jsx)(n.h4,{id:"bind_to_schema-7",children:(0,a.jsx)(n.code,{children:"bind_to_schema"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def bind_to_schema(self, schema: GraphQLSchema) -> None:\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Binds this ",(0,a.jsx)(n.code,{children:"SubscriptionType"})," instance to the instance of ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"If it has any previously set subscription resolvers or source functions,\nthose will be replaced with new ones from this instance."}),"\n",(0,a.jsx)(n.h4,{id:"bind_subscribers_to_graphql_type",children:(0,a.jsx)(n.code,{children:"bind_subscribers_to_graphql_type"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def bind_subscribers_to_graphql_type(self, graphql_type) -> None:\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Binds this ",(0,a.jsx)(n.code,{children:"SubscriptionType"})," instance's source functions."]}),"\n",(0,a.jsxs)(n.p,{children:["Source functions are set to fields ",(0,a.jsx)(n.code,{children:"subscribe"})," attributes."]}),"\n",(0,a.jsx)(n.h3,{id:"example-source-and-resolver",children:"Example source and resolver"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from ariadne import SubscriptionType, make_executable_schema\nfrom broadcast import broadcast\n\nfrom .models import Post\n\n\nsubscription_type = SubscriptionType()\n\n\n@subscription_type.source("post")\nasync def source_post(*_, category: Optional[str] = None) -> dict:\n    async with broadcast.subscribe(channel="NEW_POSTS") as subscriber:\n        async for event in subscriber:\n            message = json.loads(event.message)\n            # Send message to resolver if we don\'t filter\n            if not category or message["category"] == category:\n                yield message\n\n\n@subscription_type.field("post")\nasync def resolve_post(\n    message: dict, *_, category: Optional[str] = None\n) -> Post:\n    # Convert message to Post object that resolvers for Post type in\n    # GraphQL schema understand.\n    return await Post.get_one(id=message["post_id"])\n\n\nschema = make_executable_schema(\n    """\n    type Query {\n        "Valid schema must define the Query type"\n        none: Int\n    }\n\n    type Subscription {\n        post(category: ID): Post!\n    }\n\n    type Post {\n        id: ID!\n        author: String!\n        text: String!\n    }\n    """,\n    subscription_type\n)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"example-chat",children:"Example chat"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://github.com/mirumee/ariadne-graphql-chat-example",children:"Ariadne GraphQL Chat Example"}),"\nis the Github repository with GraphQL chat application, using Redis message backend,\nBroadcaster library for publishing and subscribing to messages and React.js client\nusing Apollo-Client subscriptions."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"uniontype",children:(0,a.jsx)(n.code,{children:"UnionType"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"class UnionType(SchemaBindable):\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"/server/next/bindables",children:"Bindable"})," populating interfaces in a ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," with Python logic."]}),"\n",(0,a.jsx)(n.h3,{id:"type-resolver-1",children:"Type resolver"}),"\n",(0,a.jsx)(n.p,{children:'Because GraphQL fields using union as their returning type can return any\nPython value from their resolver, GraphQL unions require special type of\nresolver called "type resolver" to function.'}),"\n",(0,a.jsx)(n.p,{children:"This resolver is called with the value returned by field's resolver and is\nrequired to return a string with a name of GraphQL type represented by Python\nvalue from the field:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'def example_type_resolver(obj: Any, *_) -> str:\n    if isinstance(obj, PythonReprOfUser):\n        return "USer"\n\n    if isinstance(obj, PythonReprOfComment):\n        return "Comment"\n\n    raise ValueError(f"Don\'t know GraphQL type for \'{obj}\'!")\n'})}),"\n",(0,a.jsxs)(n.p,{children:["This resolver is not required if the GraphQL field returns a value that has\nthe ",(0,a.jsx)(n.code,{children:"__typename"})," attribute or ",(0,a.jsx)(n.code,{children:"dict"})," key with a name of the GraphQL type:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'user_data_dict = {"__typename": "User", ...}\n\n# or...\n\nclass UserRepr:\n    __typename: str = "User"\n'})}),"\n",(0,a.jsx)(n.h3,{id:"constructor-10",children:"Constructor"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def __init__(\n    self,\n    name: str,\n    type_resolver: Optional[Resolver] = None,\n):\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Initializes the ",(0,a.jsx)(n.code,{children:"UnionType"})," with a ",(0,a.jsx)(n.code,{children:"name"})," and optional ",(0,a.jsx)(n.code,{children:"type_resolver"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Type resolver is required by ",(0,a.jsx)(n.code,{children:"UnionType"})," to function properly, but can\nbe set later using either ",(0,a.jsx)(n.code,{children:"set_type_resolver(type_resolver)"}),"\nsetter or ",(0,a.jsx)(n.code,{children:"type_resolver"})," decorator."]}),"\n",(0,a.jsx)(n.h4,{id:"required-arguments-16",children:"Required arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"name"}),": a ",(0,a.jsx)(n.code,{children:"str"})," with the name of GraphQL union type in ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," to\nbind to."]}),"\n",(0,a.jsx)(n.h4,{id:"optional-arguments-6",children:"Optional arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"type_resolver"}),": a ",(0,a.jsx)(n.code,{children:"Resolver"})," used to resolve a str with name of GraphQL type\nfrom it's Python representation."]}),"\n",(0,a.jsx)(n.h3,{id:"methods-12",children:"Methods"}),"\n",(0,a.jsx)(n.h4,{id:"set_type_resolver-1",children:(0,a.jsx)(n.code,{children:"set_type_resolver"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def set_type_resolver(self, type_resolver: Resolver) -> Resolver:\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Sets function as type resolver for this union."}),"\n",(0,a.jsxs)(n.p,{children:["Can be used as a decorator. Also available through ",(0,a.jsx)(n.code,{children:"type_resolver"})," alias:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'union_type = UnionType("MyUnion")\n\n@union_type.type_resolver\ndef type_resolver(obj: Any, *_) -> str:\n    ...\n'})}),"\n",(0,a.jsx)(n.h4,{id:"bind_to_schema-8",children:(0,a.jsx)(n.code,{children:"bind_to_schema"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def bind_to_schema(self, schema: GraphQLSchema) -> None:\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Binds this ",(0,a.jsx)(n.code,{children:"UnionType"})," instance to the instance of ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Sets ",(0,a.jsx)(n.code,{children:"resolve_type"})," attribute on GraphQL union. If this attribute was\npreviously set, it will be replaced to new value."]}),"\n",(0,a.jsx)(n.h4,{id:"validate_graphql_type-5",children:(0,a.jsx)(n.code,{children:"validate_graphql_type"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def validate_graphql_type(\n    self,\n    graphql_type: Optional[GraphQLNamedType],\n) -> None:\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Validates that schema's GraphQL type associated with this ",(0,a.jsx)(n.code,{children:"UnionType"}),"\nis an ",(0,a.jsx)(n.code,{children:"union"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"example-7",children:"Example"}),"\n",(0,a.jsxs)(n.p,{children:["Following code creates a ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," with a field that returns random\nresult of either ",(0,a.jsx)(n.code,{children:"User"})," or ",(0,a.jsx)(n.code,{children:"Post"})," GraphQL type. It also supports dict with\n",(0,a.jsx)(n.code,{children:"__typename"})," key that explicitly declares its GraphQL type:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import random\nfrom dataclasses import dataclass\nfrom ariadne import QueryType, UnionType, make_executable_schema\n\n@dataclass\nclass UserModel:\n    id: str\n    name: str\n\n@dataclass\nclass PostModel:\n    id: str\n    message: str\n\nresults = (\n    UserModel(id=1, name="Bob"),\n    UserModel(id=2, name="Alice"),\n    UserModel(id=3, name="Jon"),\n    PostModel(id=1, message="Hello world!"),\n    PostModel(id=2, message="How\'s going?"),\n    PostModel(id=3, message="Sure thing!"),\n    {"__typename": "User", "id": 4, "name": "Polito"},\n    {"__typename": "User", "id": 5, "name": "Aerith"},\n    {"__typename": "Post", "id": 4, "message": "Good day!"},\n    {"__typename": "Post", "id": 5, "message": "Whats up?"},\n)\n\nquery_type = QueryType()\n\n@query_type.field("result")\ndef resolve_random_result(*_):\n    return random.choice(results)\n\n\nresult_type = UnionType("Result")\n\n@result_type.type_resolver\ndef resolve_result_type(obj: UserModel | PostModel | dict, *_) -> str:\n    if isinstance(obj, UserModel):\n        return "User"\n\n    if isinstance(obj, PostModel):\n        return "Post"\n\n    if isinstance(obj, dict) and obj.get("__typename"):\n        return obj["__typename"]\n\n    raise ValueError(f"Don\'t know GraphQL type for \'{obj}\'!")\n\n\nschema = make_executable_schema(\n    """\n    type Query {\n        result: Result!\n    }\n\n    union Result = User | Post\n\n    type User {\n        id: ID!\n        name: String!\n    }\n\n    type Post {\n        id: ID!\n        message: String!\n    }\n    """,\n    query_type,\n    result_type,\n)\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"combine_multipart_data",children:(0,a.jsx)(n.code,{children:"combine_multipart_data"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def combine_multipart_data(\n    operations: Union[dict, list],\n    files_map: dict,\n    files: FilesDict,\n) -> Union[dict, list]:\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Populates ",(0,a.jsx)(n.code,{children:"operations"})," variables with ",(0,a.jsx)(n.code,{children:"files"})," using the ",(0,a.jsx)(n.code,{children:"files_map"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Utility function for integration developers."}),"\n",(0,a.jsxs)(n.p,{children:["Mutates ",(0,a.jsx)(n.code,{children:"operations"})," in place, but also returns it."]}),"\n",(0,a.jsx)(n.h3,{id:"requires-arguments",children:"Requires arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"operations"}),": a ",(0,a.jsx)(n.code,{children:"list"})," or ",(0,a.jsx)(n.code,{children:"dict"})," with GraphQL operations to populate the file\nvariables in. It contains ",(0,a.jsx)(n.code,{children:"operationName"}),", ",(0,a.jsx)(n.code,{children:"query"})," and ",(0,a.jsx)(n.code,{children:"variables"})," keys, but\nimplementation only cares about ",(0,a.jsx)(n.code,{children:"variables"})," being present."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"files_map"}),": a ",(0,a.jsx)(n.code,{children:"dict"})," with mapping of ",(0,a.jsx)(n.code,{children:"files"})," to ",(0,a.jsx)(n.code,{children:"operations"}),". Keys correspond\nto keys in ",(0,a.jsx)(n.code,{children:"files dict"}),", values are lists of strings with paths (eg.:\n",(0,a.jsx)(n.code,{children:"variables.key.0"})," maps to ",(0,a.jsx)(n.code,{children:'operations["variables"]["key"]["0"]'}),")."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"files"}),": a ",(0,a.jsx)(n.code,{children:"dict"})," of files. Keys are strings, values are environment specific\nrepresentations of uploaded files."]}),"\n",(0,a.jsx)(n.h3,{id:"example-8",children:"Example"}),"\n",(0,a.jsxs)(n.p,{children:["Following example uses ",(0,a.jsx)(n.code,{children:"combine_multipart_data"})," to populate the ",(0,a.jsx)(n.code,{children:"image"}),"\nvariable with file object from ",(0,a.jsx)(n.code,{children:"files"}),", using the ",(0,a.jsx)(n.code,{children:"files_map"})," to know\nwhich variable to replace."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Single GraphQL operation\noperations = {\n    "operationName": "AvatarUpload",\n    "query": """\n        mutation AvatarUpload($type: String!, $image: Upload!) {\n            avatarUpload(type: $type, image: $image) {\n                success\n                errors\n            }\n        }\n    """,\n    "variables": {"type": "SQUARE", "image": None}\n}\nfiles_map = {"0": ["variables.image"]}\nfiles = {"0": UploadedFile(....)}\n\ncombine_multipart_data(operations, files_map, files\n\nassert operations == {\n    "variables": {"type": "SQUARE", "image": UploadedFile(....)}\n}\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"convert_camel_case_to_snake",children:(0,a.jsx)(n.code,{children:"convert_camel_case_to_snake"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def convert_camel_case_to_snake(graphql_name: str) -> str:\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Converts a string with ",(0,a.jsx)(n.code,{children:"camelCase"})," name to ",(0,a.jsx)(n.code,{children:"snake_case"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Utility function used by Ariadne's name conversion logic for mapping GraphQL\nnames using the ",(0,a.jsx)(n.code,{children:"camelCase"})," convention to Python counterparts in ",(0,a.jsx)(n.code,{children:"snake_case"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Returns a string with converted name."}),"\n",(0,a.jsx)(n.h3,{id:"required-arguments-17",children:"Required arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"graphql_name"}),": a ",(0,a.jsx)(n.code,{children:"str"})," with name to convert."]}),"\n",(0,a.jsx)(n.h3,{id:"example-9",children:"Example"}),"\n",(0,a.jsx)(n.p,{children:"All characters in converted name are lowercased:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'assert convert_camel_case_to_snake("URL") == "url"\n'})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"_"})," is inserted before every uppercase character that's not first and is not\npreceded by other uppercase character:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'assert convert_camel_case_to_snake("testURL") == "test_url"\n'})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"_"})," is inserted before every uppercase character succeeded by lowercased\ncharacter:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'assert convert_camel_case_to_snake("URLTest") == "url_test"\n'})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"_"})," is inserted before every digit that's not first and is not preceded by\nother digit:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'assert convert_camel_case_to_snake("Rfc123") == "rfc_123"\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"convert_kwargs_to_snake_case",children:(0,a.jsx)(n.code,{children:"convert_kwargs_to_snake_case"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def convert_kwargs_to_snake_case(func: Callable) -> Callable:\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Decorator for resolvers recursively converting their kwargs to ",(0,a.jsx)(n.code,{children:"snake_case"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Converts keys in ",(0,a.jsx)(n.code,{children:"kwargs"})," dict from ",(0,a.jsx)(n.code,{children:"camelCase"})," to ",(0,a.jsx)(n.code,{children:"snake_case"})," using the\n",(0,a.jsx)(n.code,{children:"convert_camel_case_to_snake"})," function. Walks values recursively, applying\nsame conversion to keys of nested dicts and dicts in lists of elements."]}),"\n",(0,a.jsx)(n.p,{children:"Returns decorated resolver function."}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Deprecated:"})," This decorator is deprecated and will be deleted in future\nversion of Ariadne. Set ",(0,a.jsx)(n.code,{children:"out_name"}),"s explicitly in your ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," or use\nthe ",(0,a.jsx)(n.code,{children:"convert_schema_names"})," option on ",(0,a.jsx)(n.code,{children:"make_executable_schema"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"convert_schema_names",children:(0,a.jsx)(n.code,{children:"convert_schema_names"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def convert_schema_names(\n    schema: GraphQLSchema,\n    name_converter: Optional[SchemaNameConverter],\n) -> None:\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Set mappings in ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," from ",(0,a.jsx)(n.code,{children:"camelCase"})," names to ",(0,a.jsx)(n.code,{children:"snake_case"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["This function scans ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," and:"]}),"\n",(0,a.jsxs)(n.p,{children:["If objects field has name in ",(0,a.jsx)(n.code,{children:"camelCase"})," and this field doesn't have a\nresolver already set on it, new resolver is assigned to it that resolves\nit's value from object attribute or dict key named like ",(0,a.jsx)(n.code,{children:"snake_case"}),"\nversion of field's name."]}),"\n",(0,a.jsxs)(n.p,{children:["If object's field has argument in ",(0,a.jsx)(n.code,{children:"camelCase"})," and this argument doesn't have\nthe ",(0,a.jsx)(n.code,{children:"out_name"})," attribute already set, this attribute is populated with\nargument's name converted to ",(0,a.jsx)(n.code,{children:"snake_case"})]}),"\n",(0,a.jsxs)(n.p,{children:["If input's field has name in ",(0,a.jsx)(n.code,{children:"camelCase"})," and it's ",(0,a.jsx)(n.code,{children:"out_name"})," attribute is\nnot already set, this attribute is populated with field's name converted\nto ",(0,a.jsx)(n.code,{children:"snake_case"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Schema is mutated in place."}),"\n",(0,a.jsxs)(n.p,{children:["Generally you shouldn't call this function yourself, as its part of\n",(0,a.jsx)(n.code,{children:"make_executable_schema"})," logic, but its part of public API for other\nlibraries to use."]}),"\n",(0,a.jsx)(n.h3,{id:"required-arguments-18",children:"Required arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"schema"}),": a ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," to update."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"name_converter"}),": an ",(0,a.jsx)(n.code,{children:"SchemaNameConverter"})," function to use to convert the\nnames from ",(0,a.jsx)(n.code,{children:"camelCase"})," to ",(0,a.jsx)(n.code,{children:"snake_case"}),". If not provided, default one\nbased on ",(0,a.jsx)(n.code,{children:"convert_camel_case_to_snake"})," is used."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"fallback_resolvers",children:(0,a.jsx)(n.code,{children:"fallback_resolvers"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"fallback_resolvers = FallbackResolversSetter()\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"/server/next/bindables",children:"Bindable"})," instance of ",(0,a.jsx)(n.code,{children:"FallbackResolversSetter"}),"."]}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Deprecated:"})," This utility will be removed in future Ariadne release."]}),"\n",(0,a.jsxs)(n.p,{children:["See ",(0,a.jsx)(n.code,{children:"FallbackResolversSetter"})," for details."]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"format_error",children:(0,a.jsx)(n.code,{children:"format_error"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def format_error(error: GraphQLError, debug: bool = False) -> dict:\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Format the GraphQL error into JSON serializable format."}),"\n",(0,a.jsxs)(n.p,{children:["If ",(0,a.jsx)(n.code,{children:"debug"})," is set to ",(0,a.jsx)(n.code,{children:"True"}),", error's JSON will also include the ",(0,a.jsx)(n.a,{href:"/server/next/types-reference#extensions",children:(0,a.jsx)(n.code,{children:"extensions"})}),"\nkey with ",(0,a.jsx)(n.code,{children:"exception"})," object containing error's ",(0,a.jsx)(n.code,{children:"context"})," and ",(0,a.jsx)(n.code,{children:"stacktrace"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Returns a JSON-serializable ",(0,a.jsx)(n.code,{children:"dict"})," with error representation."]}),"\n",(0,a.jsx)(n.h3,{id:"required-arguments-19",children:"Required arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"error"}),": an ",(0,a.jsx)(n.code,{children:"GraphQLError"})," to convert into JSON serializable format."]}),"\n",(0,a.jsx)(n.h3,{id:"optional-arguments-7",children:"Optional arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"debug"}),": a ",(0,a.jsx)(n.code,{children:"bool"})," that controls if debug data should be included in\nresult ",(0,a.jsx)(n.code,{children:"dict"}),". Defaults to ",(0,a.jsx)(n.code,{children:"False"}),"."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"get_error_extension",children:(0,a.jsx)(n.code,{children:"get_error_extension"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def get_error_extension(error: GraphQLError) -> Optional[dict]:\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Get a JSON-serializable ",(0,a.jsx)(n.code,{children:"dict"})," containing error's stacktrace and context."]}),"\n",(0,a.jsxs)(n.p,{children:["Returns a JSON-serializable ",(0,a.jsx)(n.code,{children:"dict"})," with ",(0,a.jsx)(n.code,{children:"stacktrace"})," and ",(0,a.jsx)(n.code,{children:"context"})," to include\nunder error's ",(0,a.jsx)(n.a,{href:"/server/next/types-reference#extensions",children:(0,a.jsx)(n.code,{children:"extensions"})})," key in JSON response. Returns ",(0,a.jsx)(n.code,{children:"None"})," if ",(0,a.jsx)(n.code,{children:"error"}),"\nhas no stacktrace or wraps no exception."]}),"\n",(0,a.jsx)(n.h3,{id:"required-arguments-20",children:"Required arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"error"}),": an ",(0,a.jsx)(n.code,{children:"GraphQLError"})," to return context and stacktrace for."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"get_formatted_error_context",children:(0,a.jsx)(n.code,{children:"get_formatted_error_context"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def get_formatted_error_context(error: Exception) -> Optional[dict]:\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Get JSON-serializable context from ",(0,a.jsx)(n.code,{children:"Exception"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Returns a ",(0,a.jsx)(n.code,{children:"dict"})," of strings, with every key being value name and value\nbeing ",(0,a.jsx)(n.code,{children:"repr()"})," of it's Python value. Returns ",(0,a.jsx)(n.code,{children:"None"})," if context is not\navailable."]}),"\n",(0,a.jsx)(n.h3,{id:"required-arguments-21",children:"Required arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"error"}),": an ",(0,a.jsx)(n.code,{children:"Exception"})," to return formatted context for."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"get_formatted_error_traceback",children:(0,a.jsx)(n.code,{children:"get_formatted_error_traceback"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def get_formatted_error_traceback(error: Exception) -> List[str]:\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Get JSON-serializable stacktrace from ",(0,a.jsx)(n.code,{children:"Exception"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Returns list of strings, with every item being separate line from stacktrace."}),"\n",(0,a.jsx)(n.p,{children:"This approach produces better results in GraphQL explorers which display every\nline under previous one but not always format linebreak characters for blocks\nof text."}),"\n",(0,a.jsx)(n.h3,{id:"required-arguments-22",children:"Required arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"error"}),": an ",(0,a.jsx)(n.code,{children:"Exception"})," to return formatted stacktrace for."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"gql",children:(0,a.jsx)(n.code,{children:"gql"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def gql(value: str) -> str:\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Verifies that given string is a valid GraphQL."}),"\n",(0,a.jsx)(n.p,{children:"Provides definition time validation for GraphQL strings. Returns unmodified\nstring. Some IDEs provide GraphQL syntax for highlighting those strings."}),"\n",(0,a.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,a.jsx)(n.p,{children:"Python string in this code snippet will use GraphQL's syntax highlighting when\nviewed in VSCode:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'type_defs = gql(\n    """\n    type Query {\n        hello: String!\n    }\n    """\n)\n'})}),"\n",(0,a.jsx)(n.p,{children:"This code will raise a GraphQL parsing error:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'type_defs = gql(\n    """\n    type Query {\n        hello String!\n    }\n    """\n)\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"graphql",children:(0,a.jsx)(n.code,{children:"graphql"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"async def graphql(\n    schema: GraphQLSchema,\n    data: Any,\n    *,\n    context_value: Optional[Any],\n    root_value: Optional[RootValue],\n    query_parser: Optional[QueryParser],\n    query_validator: Optional[QueryValidator],\n    query_document: Optional[DocumentNode],\n    debug: bool,\n    introspection: bool,\n    logger: Union[None, str, Logger, LoggerAdapter],\n    validation_rules: Optional[ValidationRules],\n    require_query: bool,\n    error_formatter: ErrorFormatter,\n    middleware: MiddlewareList,\n    middleware_manager_class: Optional[Type[MiddlewareManager]],\n    extensions: Optional[ExtensionList],\n    execution_context_class: Optional[Type[ExecutionContext]],\n    **kwargs,\n) -> GraphQLResult:\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Execute GraphQL query asynchronously."}),"\n",(0,a.jsx)(n.p,{children:"Returns a tuple with two items:"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"bool"}),": ",(0,a.jsx)(n.code,{children:"True"})," when no errors occurred, ",(0,a.jsx)(n.code,{children:"False"})," otherwise."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"dict"}),": an JSON-serializable ",(0,a.jsx)(n.code,{children:"dict"})," with query result\n(defining either ",(0,a.jsx)(n.code,{children:"data"}),", ",(0,a.jsx)(n.code,{children:"error"}),", or both keys) that should be returned to\nclient."]}),"\n",(0,a.jsx)(n.h3,{id:"required-arguments-23",children:"Required arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"schema"}),": a ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," instance that defines ",(0,a.jsx)(n.code,{children:"Query"})," type."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"data"}),": a ",(0,a.jsx)(n.code,{children:"dict"})," with query data (",(0,a.jsx)(n.code,{children:"query"})," string, optionally ",(0,a.jsx)(n.code,{children:"operationName"}),"\nstring and ",(0,a.jsx)(n.code,{children:"variables"})," dictionary)."]}),"\n",(0,a.jsx)(n.h3,{id:"optional-arguments-8",children:"Optional arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"context_value"}),": a context value to make accessible as 'context' attribute\nof second argument (",(0,a.jsx)(n.code,{children:"info"}),") passed to resolvers."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"root_value"}),": a ",(0,a.jsx)(n.a,{href:"/server/next/types-reference#rootvalue",children:(0,a.jsx)(n.code,{children:"RootValue"})})," to pass as first argument to resolvers set on\n",(0,a.jsx)(n.code,{children:"Query"})," and ",(0,a.jsx)(n.code,{children:"Mutation"})," types."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"query_parser"}),": a ",(0,a.jsx)(n.a,{href:"/server/next/types-reference#queryparser",children:(0,a.jsx)(n.code,{children:"QueryParser"})})," to use instead of default one. Is called\nwith two arguments: ",(0,a.jsx)(n.code,{children:"context_value"}),", and ",(0,a.jsx)(n.code,{children:"data"})," dict."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"query_validator"}),": a ",(0,a.jsx)(n.code,{children:"QueryValidator"})," to use instead of default one. Is called\nwith five arguments: ",(0,a.jsx)(n.code,{children:"schema"}),", 'document_ast', 'rules', 'max_errors' and 'type_info'."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"query_document"}),": an already parsed GraphQL query. Setting this option will\nprevent ",(0,a.jsx)(n.code,{children:"graphql"})," from parsing ",(0,a.jsx)(n.code,{children:"query"})," string from ",(0,a.jsx)(n.code,{children:"data"})," second time."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"debug"}),": a ",(0,a.jsx)(n.code,{children:"bool"})," for enabling debug mode. Controls presence of debug data\nin errors reported to client."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"introspection"}),": a ",(0,a.jsx)(n.code,{children:"bool"})," for disabling introspection queries."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"logger"}),": a ",(0,a.jsx)(n.code,{children:"str"})," with name of logger or logger instance to use for logging\nerrors."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"validation_rules"}),": a ",(0,a.jsx)(n.code,{children:"list"})," of or callable returning list of custom\nvalidation rules to use to validate query before it's executed."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"require_query"}),": a ",(0,a.jsx)(n.code,{children:"bool"})," controlling if GraphQL operation to execute must be\na query (vs. mutation or subscription)."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"error_formatter"}),": an ",(0,a.jsx)(n.a,{href:"/server/next/types-reference#errorformatter",children:(0,a.jsx)(n.code,{children:"ErrorFormatter"})})," callable to use to convert GraphQL\nerrors encountered during query execution to JSON-serializable format."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"middleware"}),": a ",(0,a.jsx)(n.code,{children:"list"})," of or callable returning list of GraphQL middleware\nto use by query executor."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"middleware_manager_class"}),": a ",(0,a.jsx)(n.code,{children:"MiddlewareManager"})," class to use by query\nexecutor."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"/server/next/types-reference#extensions",children:(0,a.jsx)(n.code,{children:"extensions"})}),": a ",(0,a.jsx)(n.code,{children:"list"})," of or callable returning list of extensions\nto use during query execution."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"execution_context_class"}),": ",(0,a.jsx)(n.code,{children:"ExecutionContext"})," class to use by query\nexecutor."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"**kwargs"}),": any kwargs not used by ",(0,a.jsx)(n.code,{children:"graphql"})," are passed to\n",(0,a.jsx)(n.code,{children:"graphql.graphql"}),"."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"graphql_sync",children:(0,a.jsx)(n.code,{children:"graphql_sync"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def graphql_sync(\n    schema: GraphQLSchema,\n    data: Any,\n    *,\n    context_value: Optional[Any],\n    root_value: Optional[RootValue],\n    query_parser: Optional[QueryParser],\n    query_validator: Optional[QueryValidator],\n    query_document: Optional[DocumentNode],\n    debug: bool,\n    introspection: bool,\n    logger: Union[None, str, Logger, LoggerAdapter],\n    validation_rules: Optional[ValidationRules],\n    require_query: bool,\n    error_formatter: ErrorFormatter,\n    middleware: MiddlewareList,\n    middleware_manager_class: Optional[Type[MiddlewareManager]],\n    extensions: Optional[ExtensionList],\n    execution_context_class: Optional[Type[ExecutionContext]],\n    **kwargs,\n) -> GraphQLResult:\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Execute GraphQL query synchronously."}),"\n",(0,a.jsx)(n.p,{children:"Returns a tuple with two items:"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"bool"}),": ",(0,a.jsx)(n.code,{children:"True"})," when no errors occurred, ",(0,a.jsx)(n.code,{children:"False"})," otherwise."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"dict"}),": an JSON-serializable ",(0,a.jsx)(n.code,{children:"dict"})," with query result\n(defining either ",(0,a.jsx)(n.code,{children:"data"}),", ",(0,a.jsx)(n.code,{children:"error"}),", or both keys) that should be returned to\nclient."]}),"\n",(0,a.jsx)(n.h3,{id:"required-arguments-24",children:"Required arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"schema"}),": a ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," instance that defines ",(0,a.jsx)(n.code,{children:"Query"})," type."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"data"}),": a ",(0,a.jsx)(n.code,{children:"dict"})," with query data (",(0,a.jsx)(n.code,{children:"query"})," string, optionally ",(0,a.jsx)(n.code,{children:"operationName"}),"\nstring and ",(0,a.jsx)(n.code,{children:"variables"})," dictionary)."]}),"\n",(0,a.jsx)(n.h3,{id:"optional-arguments-9",children:"Optional arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"context_value"}),": a context value to make accessible as 'context' attribute\nof second argument (",(0,a.jsx)(n.code,{children:"info"}),") passed to resolvers."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"root_value"}),": a ",(0,a.jsx)(n.a,{href:"/server/next/types-reference#rootvalue",children:(0,a.jsx)(n.code,{children:"RootValue"})})," to pass as first argument to resolvers set on\n",(0,a.jsx)(n.code,{children:"Query"})," and ",(0,a.jsx)(n.code,{children:"Mutation"})," types."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"query_parser"}),": a ",(0,a.jsx)(n.a,{href:"/server/next/types-reference#queryparser",children:(0,a.jsx)(n.code,{children:"QueryParser"})})," to use instead of default one. Is called\nwith two arguments: ",(0,a.jsx)(n.code,{children:"context_value"}),", and ",(0,a.jsx)(n.code,{children:"data"})," dict."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"query_validator"}),": a ",(0,a.jsx)(n.code,{children:"QueryValidator"})," to use instead of default one. Is called\nwith five arguments: ",(0,a.jsx)(n.code,{children:"schema"}),", 'document_ast', 'rules', 'max_errors' and 'type_info'."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"query_document"}),": an already parsed GraphQL query. Setting this option will\nprevent ",(0,a.jsx)(n.code,{children:"graphql_sync"})," from parsing ",(0,a.jsx)(n.code,{children:"query"})," string from ",(0,a.jsx)(n.code,{children:"data"})," second time."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"debug"}),": a ",(0,a.jsx)(n.code,{children:"bool"})," for enabling debug mode. Controls presence of debug data\nin errors reported to client."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"introspection"}),": a ",(0,a.jsx)(n.code,{children:"bool"})," for disabling introspection queries."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"logger"}),": a ",(0,a.jsx)(n.code,{children:"str"})," with name of logger or logger instance to use for logging\nerrors."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"validation_rules"}),": a ",(0,a.jsx)(n.code,{children:"list"})," of or callable returning list of custom\nvalidation rules to use to validate query before it's executed."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"require_query"}),": a ",(0,a.jsx)(n.code,{children:"bool"})," controlling if GraphQL operation to execute must be\na query (vs. mutation or subscription)."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"error_formatter"}),": an ",(0,a.jsx)(n.a,{href:"/server/next/types-reference#errorformatter",children:(0,a.jsx)(n.code,{children:"ErrorFormatter"})})," callable to use to convert GraphQL\nerrors encountered during query execution to JSON-serializable format."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"middleware"}),": a ",(0,a.jsx)(n.code,{children:"list"})," of or callable returning list of GraphQL middleware\nto use by query executor."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"middleware_manager_class"}),": a ",(0,a.jsx)(n.code,{children:"MiddlewareManager"})," class to use by query\nexecutor."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"/server/next/types-reference#extensions",children:(0,a.jsx)(n.code,{children:"extensions"})}),": a ",(0,a.jsx)(n.code,{children:"list"})," of or callable returning list of extensions\nto use during query execution."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"execution_context_class"}),": ",(0,a.jsx)(n.code,{children:"ExecutionContext"})," class to use by query\nexecutor."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"**kwargs"}),": any kwargs not used by ",(0,a.jsx)(n.code,{children:"graphql_sync"})," are passed to\n",(0,a.jsx)(n.code,{children:"graphql.graphql_sync"}),"."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"is_default_resolver",children:(0,a.jsx)(n.code,{children:"is_default_resolver"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def is_default_resolver(resolver: Optional[Resolver]) -> bool:\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Test if resolver function is default resolver implemented by\n",(0,a.jsx)(n.code,{children:"graphql-core"})," or Ariadne."]}),"\n",(0,a.jsxs)(n.p,{children:["Returns ",(0,a.jsx)(n.code,{children:"True"})," if resolver function is ",(0,a.jsx)(n.code,{children:"None"}),", ",(0,a.jsx)(n.code,{children:"graphql.default_field_resolver"}),"\nor was created by Ariadne's ",(0,a.jsx)(n.code,{children:"resolve_to"})," utility. Returns ",(0,a.jsx)(n.code,{children:"False"})," otherwise."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"True"})," is returned for ",(0,a.jsx)(n.code,{children:"None"})," because query executor defaults to the\n",(0,a.jsx)(n.code,{children:"graphql.default_field_resolver"})," is there's no resolver function set on a\nfield."]}),"\n",(0,a.jsx)(n.h3,{id:"required-arguments-25",children:"Required arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"resolver"}),": an function ",(0,a.jsx)(n.code,{children:"None"})," to test or ",(0,a.jsx)(n.code,{children:"None"}),"."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"load_schema_from_path",children:(0,a.jsx)(n.code,{children:"load_schema_from_path"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def load_schema_from_path(path: Union[str, os.PathLike]) -> str:\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Load schema definition in Schema Definition Language from file or directory."}),"\n",(0,a.jsxs)(n.p,{children:["If ",(0,a.jsx)(n.code,{children:"path"})," argument points to a file, this file's contents are read, validated\nand returned as ",(0,a.jsx)(n.code,{children:"str"}),". If its a directory, its walked recursively and every\nfile with ",(0,a.jsx)(n.code,{children:".graphql"}),", ",(0,a.jsx)(n.code,{children:".graphqls"})," or ",(0,a.jsx)(n.code,{children:".gql"})," extension is read and validated,\nand all files are then concatenated into single ",(0,a.jsx)(n.code,{children:"str"})," that is then returned."]}),"\n",(0,a.jsxs)(n.p,{children:["Returns a ",(0,a.jsx)(n.code,{children:"str"})," with schema definition that was already validated to be valid\nGraphQL SDL. Raises ",(0,a.jsx)(n.code,{children:"GraphQLFileSyntaxError"})," is any of loaded files fails to\nparse."]}),"\n",(0,a.jsx)(n.h3,{id:"required-arguments-26",children:"Required arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"path"}),": a ",(0,a.jsx)(n.code,{children:"str"})," or ",(0,a.jsx)(n.code,{children:"PathLike"})," object pointing to either file or directory\nwith files to load."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"make_executable_schema",children:(0,a.jsx)(n.code,{children:"make_executable_schema"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def make_executable_schema(\n    type_defs: Union[str, List[str]],\n    *bindables: SchemaBindables,\n    directives: Optional[Dict[str, Type[SchemaDirectiveVisitor]]],\n    convert_names_case: Union[bool, SchemaNameConverter],\n) -> GraphQLSchema:\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Create a ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:(0,a.jsx)(n.code,{children:"GraphQLSchema"})})," instance that can be used to execute queries."]}),"\n",(0,a.jsxs)(n.p,{children:["Returns a ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:(0,a.jsx)(n.code,{children:"GraphQLSchema"})})," instance with attributes populated with Python\nvalues and functions."]}),"\n",(0,a.jsx)(n.h3,{id:"required-arguments-27",children:"Required arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"type_defs"}),": a ",(0,a.jsx)(n.code,{children:"str"})," or list of ",(0,a.jsx)(n.code,{children:"str"})," with GraphQL types definitions in\nschema definition language (",(0,a.jsx)(n.code,{children:"SDL"}),")."]}),"\n",(0,a.jsx)(n.h3,{id:"optional-arguments-10",children:"Optional arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"/server/next/bindables",children:(0,a.jsx)(n.code,{children:"bindables"})}),": instances or lists of instances of schema ",(0,a.jsx)(n.a,{href:"/server/next/bindables",children:"bindables"}),". Order in\nwhich ",(0,a.jsx)(n.a,{href:"/server/next/bindables",children:"bindables"})," are passed to ",(0,a.jsx)(n.code,{children:"make_executable_schema"})," matters depending on\nindividual ",(0,a.jsx)(n.a,{href:"/server/next/bindables",children:"bindable"}),"'s implementation."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"directives"}),": a dict of GraphQL directives to apply to schema. Dict's keys must\ncorrespond to directives names in ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," and values should be\n",(0,a.jsx)(n.code,{children:"SchemaDirectiveVisitor"})," classes (",(0,a.jsx)(n.em,{children:"not"})," instances) implementing their logic."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"convert_names_case"}),": a ",(0,a.jsx)(n.code,{children:"bool"})," or function of ",(0,a.jsx)(n.code,{children:"SchemaNameConverter"})," type to\nuse to convert names in ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," between ",(0,a.jsx)(n.code,{children:"camelCase"})," used by GraphQL\nand ",(0,a.jsx)(n.code,{children:"snake_case"})," used by Python. Defaults to ",(0,a.jsx)(n.code,{children:"False"}),", making all conversion\nexplicit and up to developer to implement. Set ",(0,a.jsx)(n.code,{children:"True"})," to use\ndefault strategy using ",(0,a.jsx)(n.code,{children:"convert_camel_case_to_snake"})," for name conversions or\nset to custom function to customize this behavior."]}),"\n",(0,a.jsx)(n.h3,{id:"example-with-minimal-schema",children:"Example with minimal schema"}),"\n",(0,a.jsxs)(n.p,{children:["Below code creates minimal executable schema that doesn't implement any Python\nlogic, but still executes queries using ",(0,a.jsx)(n.code,{children:"root_value"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from ariadne import graphql_sync, make_executable_schema\n\nschema = make_executable_schema(\n    """\n    type Query {\n        helloWorld: String!\n    }\n    """\n)\n\nno_errors, result = graphql_sync(\n    schema,\n    {"query": "{ helloWorld }"},\n    root_value={"helloWorld": "Hello world!"},\n)\n\nassert no_errors\nassert result == {\n    "data": {\n        "helloWorld": "Hello world!",\n    },\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"example-with-bindables",children:"Example with bindables"}),"\n",(0,a.jsxs)(n.p,{children:["Below code creates executable schema that combines different ways of passing\n",(0,a.jsx)(n.a,{href:"/server/next/bindables",children:"bindables"})," to add Python logic to schema:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from dataclasses import dataclass\nfrom enum import Enum\nfrom ariadne import ObjectType, QueryType, UnionType, graphql_sync, make_executable_schema\n\n# Define some types representing database models in real applications\nclass UserLevel(str, Enum):\n    USER = "user"\n    ADMIN = "admin"\n\n@dataclass\nclass UserModel:\n    id: str\n    name: str\n    level: UserLevel\n\n@dataclass\nclass PostModel:\n    id: str\n    body: str\n\n# Create fake "database"\nresults = (\n    UserModel(id=1, name="Bob", level=UserLevel.USER),\n    UserModel(id=2, name="Alice", level=UserLevel.ADMIN),\n    UserModel(id=3, name="Jon", level=UserLevel.USER),\n    PostModel(id=1, body="Hello world!"),\n    PostModel(id=2, body="How\'s going?"),\n    PostModel(id=3, body="Sure thing!"),\n)\n\n\n# Resolve username field in GraphQL schema to user.name attribute\nuser_type = ObjectType("User")\nuser_type.set_alias("username", "name")\n\n\n# Resolve message field in GraphQL schema to post.body attribute\npost_type = ObjectType("Post")\npost_type.set_alias("message", "body")\n\n\n# Resolve results field in GraphQL schema to results array\nquery_type = QueryType()\n\n@query_type.field("results")\ndef resolve_results(*_):\n    return results\n\n\n# Resolve GraphQL type of individual result from it\'s Python class\nresult_type = UnionType("Result")\n\n@result_type.type_resolver\ndef resolve_result_type(obj: UserModel | PostModel | dict, *_) -> str:\n    if isinstance(obj, UserModel):\n        return "User"\n\n    if isinstance(obj, PostModel):\n        return "Post"\n\n    raise ValueError(f"Don\'t know GraphQL type for \'{obj}\'!")\n\n\n# Create executable schema that returns list of results\nschema = make_executable_schema(\n    """\n    type Query {\n        results: [Result!]!\n    }\n\n    union Result = User | Post\n\n    type User {\n        id: ID!\n        username: String!\n        level: UserLevel!\n    }\n\n    type Post {\n        id: ID!\n        message: String!\n    }\n\n    enum UserLevel {\n        USER\n        ADMIN\n    }\n    """,\n    # Bindables *args accept single instances:\n    query_type,\n    result_type,\n    # Bindables *args accepts lists of instances:\n    [user_type, post_type],\n    # Both approaches can be mixed\n    # Python Enums are also valid bindables:\n    UserLevel,\n)\n\n# Query the schema for results\nno_errors, result = graphql_sync(\n    schema,\n    {\n        "query": (\n            """\n            {\n                results {\n                    ... on Post {\n                        id\n                        message\n                    }\n                    ... on User {\n                        id\n                        username\n                        level\n                    }\n                }\n            }\n            """\n        ),\n    },\n)\n\n# Verify that it works\nassert no_errors\nassert result == {\n    "data": {\n        "results": [\n            {\n                "id": "1",\n                "username": "Bob",\n                "level": "USER",\n            },\n            {\n                "id": "2",\n                "username": "Alice",\n                "level": "ADMIN",\n            },\n            {\n                "id": "3",\n                "username": "Jon",\n                "level": "USER",\n            },\n            {\n                "id": "1",\n                "message": "Hello world!",\n            },\n            {\n                "id": "2",\n                "message": "How\'s going?",\n            },\n            {\n                "id": "3",\n                "message": "Sure thing!",\n            },\n        ],\n    },\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"example-with-directive",children:"Example with directive"}),"\n",(0,a.jsxs)(n.p,{children:["Below code uses ",(0,a.jsx)(n.code,{children:"directives"})," option to set custom directive on schema:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from functools import wraps\nfrom ariadne import SchemaDirectiveVisitor, graphql_sync, make_executable_schema\nfrom graphql import default_field_resolver\n\nclass UppercaseDirective(SchemaDirectiveVisitor):\n    def visit_field_definition(self, field, object_type):\n        org_resolver = field.resolve or default_field_resolver\n\n        @wraps(org_resolver)\n        def uppercase_resolved_value(*args, **kwargs):\n            value = org_resolver(*args, **kwargs)\n            if isinstance(value, str):\n                return value.upper()\n            return value\n\n        # Extend field\'s behavior by wrapping it\'s resolver in custom one\n        field.resolve = uppercase_resolved_value\n        return field\n\n\nschema = make_executable_schema(\n    """\n    directive @uppercase on FIELD_DEFINITION\n\n    type Query {\n        helloWorld: String! @uppercase\n    }\n    """,\n    directives={"uppercase": UppercaseDirective},\n)\n\nno_errors, result = graphql_sync(\n    schema,\n    {"query": "{ helloWorld }"},\n    root_value={"helloWorld": "Hello world!"},\n)\n\nassert no_errors\nassert result == {\n    "data": {\n        "helloWorld": "HELLO WORLD!",\n    },\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"example-with-converted-names",children:"Example with converted names"}),"\n",(0,a.jsxs)(n.p,{children:["Below code uses ",(0,a.jsx)(n.code,{children:"convert_names_case=True"})," option to resolve ",(0,a.jsx)(n.code,{children:"helloWorld"}),"\nfield to ",(0,a.jsx)(n.code,{children:"hello_world"})," key from ",(0,a.jsx)(n.code,{children:"root_value"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from ariadne import graphql_sync, make_executable_schema\n\nschema = make_executable_schema(\n    """\n    type Query {\n        helloWorld: String!\n    }\n    """,\n    convert_names_case=True,\n)\n\nno_errors, result = graphql_sync(\n    schema,\n    {"query": "{ helloWorld }"},\n    root_value={"hello_world": "Hello world!"},\n)\n\nassert no_errors\nassert result == {\n    "data": {\n        "helloWorld": "Hello world!",\n    },\n}\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"repair_schema_default_enum_values",children:(0,a.jsx)(n.code,{children:"repair_schema_default_enum_values"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def repair_schema_default_enum_values(schema: GraphQLSchema) -> None:\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Repairs Python values of default enums embedded in the ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Default enum values in the ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schemas"})," are represented as strings with enum\nmember names in Python. Assigning custom Python values to members of the\n",(0,a.jsx)(n.code,{children:"GraphQLEnumType"})," doesn't change those defaults."]}),"\n",(0,a.jsxs)(n.p,{children:["This function walks the ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"}),", finds default enum values strings and,\nif this string is a valid GraphQL member name, swaps it out for a valid Python\nvalue."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"resolve_to",children:(0,a.jsx)(n.code,{children:"resolve_to"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def resolve_to(attr_name: str) -> Resolver:\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Create a resolver that resolves to given attribute or dict key."}),"\n",(0,a.jsx)(n.p,{children:"Returns a resolver function that can be used as resolver."}),"\n",(0,a.jsx)(n.p,{children:"Usually not used directly  but through higher level features like aliases\nor schema names conversion."}),"\n",(0,a.jsx)(n.h3,{id:"required-arguments-28",children:"Required arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"attr_name"}),": a ",(0,a.jsx)(n.code,{children:"str"})," with name of attribute or ",(0,a.jsx)(n.code,{children:"dict"})," key to return from\nresolved object."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"snake_case_fallback_resolvers",children:(0,a.jsx)(n.code,{children:"snake_case_fallback_resolvers"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"snake_case_fallback_resolvers = SnakeCaseFallbackResolversSetter()\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"/server/next/bindables",children:"Bindable"})," instance of ",(0,a.jsx)(n.code,{children:"SnakeCaseFallbackResolversSetter"}),"."]}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Deprecated:"})," Use ",(0,a.jsx)(n.code,{children:"convert_names_case"})," from ",(0,a.jsx)(n.code,{children:"make_executable_schema"})," instead."]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"subscribe",children:(0,a.jsx)(n.code,{children:"subscribe"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"async def subscribe(\n    schema: GraphQLSchema,\n    data: Any,\n    *,\n    context_value: Optional[Any],\n    root_value: Optional[RootValue],\n    query_parser: Optional[QueryParser],\n    query_validator: Optional[QueryValidator],\n    query_document: Optional[DocumentNode],\n    debug: bool,\n    introspection: bool,\n    logger: Union[None, str, Logger, LoggerAdapter],\n    validation_rules: Optional[ValidationRules],\n    error_formatter: ErrorFormatter,\n    **kwargs,\n) -> SubscriptionResult:\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Subscribe to GraphQL updates."}),"\n",(0,a.jsx)(n.p,{children:"Returns a tuple with two items:"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"bool"}),": ",(0,a.jsx)(n.code,{children:"True"})," when no errors occurred, ",(0,a.jsx)(n.code,{children:"False"})," otherwise."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"AsyncGenerator"}),": an async generator that server implementation should\nconsume to retrieve messages to send to client."]}),"\n",(0,a.jsx)(n.h3,{id:"required-arguments-29",children:"Required arguments"}),"\n",(0,a.jsxs)(n.p,{children:["'schema': a ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," instance that defines ",(0,a.jsx)(n.code,{children:"Subscription"})," type."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"data"}),": a ",(0,a.jsx)(n.code,{children:"dict"})," with query data (",(0,a.jsx)(n.code,{children:"query"})," string, optionally ",(0,a.jsx)(n.code,{children:"operationName"}),"\nstring and ",(0,a.jsx)(n.code,{children:"variables"})," dictionary)."]}),"\n",(0,a.jsx)(n.h3,{id:"optional-arguments-11",children:"Optional arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"context_value"}),": a context value to make accessible as 'context' attribute\nof second argument (",(0,a.jsx)(n.code,{children:"info"}),") passed to resolvers and source functions."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"root_value"}),": a ",(0,a.jsx)(n.a,{href:"/server/next/types-reference#rootvalue",children:(0,a.jsx)(n.code,{children:"RootValue"})})," to pass as first argument to resolvers and\nsource functions set on ",(0,a.jsx)(n.code,{children:"Subscription"})," type."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"query_parser"}),": a ",(0,a.jsx)(n.a,{href:"/server/next/types-reference#queryparser",children:(0,a.jsx)(n.code,{children:"QueryParser"})})," to use instead of default one. Is called\nwith two arguments: ",(0,a.jsx)(n.code,{children:"context_value"}),", and ",(0,a.jsx)(n.code,{children:"data"})," dict."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"query_validator"}),": a ",(0,a.jsx)(n.code,{children:"QueryValidator"})," to use instead of default one. Is called\nwith five arguments: ",(0,a.jsx)(n.code,{children:"schema"}),", 'document_ast', 'rules', 'max_errors' and 'type_info'."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"query_document"}),": an already parsed GraphQL query. Setting this option will\nprevent ",(0,a.jsx)(n.code,{children:"subscribe"})," from parsing ",(0,a.jsx)(n.code,{children:"query"})," string from ",(0,a.jsx)(n.code,{children:"data"})," second time."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"debug"}),": a ",(0,a.jsx)(n.code,{children:"bool"})," for enabling debug mode. Controls presence of debug data\nin errors reported to client."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"introspection"}),": a ",(0,a.jsx)(n.code,{children:"bool"})," for disabling introspection queries."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"logger"}),": a ",(0,a.jsx)(n.code,{children:"str"})," with name of logger or logger instance to use for logging\nerrors."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"validation_rules"}),": a ",(0,a.jsx)(n.code,{children:"list"})," of or callable returning list of custom\nvalidation rules to use to validate query before it's executed."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"error_formatter"}),": an ",(0,a.jsx)(n.a,{href:"/server/next/types-reference#errorformatter",children:(0,a.jsx)(n.code,{children:"ErrorFormatter"})})," callable to use to convert GraphQL\nerrors encountered during query execution to JSON-serializable format."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"**kwargs"}),": any kwargs not used by ",(0,a.jsx)(n.code,{children:"subscribe"})," are passed to\n",(0,a.jsx)(n.code,{children:"graphql.subscribe"}),"."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"type_implements_interface",children:(0,a.jsx)(n.code,{children:"type_implements_interface"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def type_implements_interface(\n    interface: str,\n    graphql_type: GraphQLType,\n) -> bool:\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Test if type definition from ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," implements an interface."]}),"\n",(0,a.jsxs)(n.p,{children:["Returns ",(0,a.jsx)(n.code,{children:"True"})," if type implements interface and ",(0,a.jsx)(n.code,{children:"False"})," if it doesn't."]}),"\n",(0,a.jsx)(n.h3,{id:"required-arguments-30",children:"Required arguments"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"interface"}),": a ",(0,a.jsx)(n.code,{children:"str"})," with name of interface in ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"graphql_type"}),": a ",(0,a.jsx)(n.code,{children:"GraphQLType"})," interface to test. It may or may not have\nthe ",(0,a.jsx)(n.code,{children:"interfaces"})," attribute."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"unwrap_graphql_error",children:(0,a.jsx)(n.code,{children:"unwrap_graphql_error"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def unwrap_graphql_error(\n    error: Union[GraphQLError, Optional[Exception]],\n) -> Optional[Exception]:\n    ...\n"})}),"\n",(0,a.jsx)(n.p,{children:"Recursively unwrap exception when its instance of GraphQLError."}),"\n",(0,a.jsxs)(n.p,{children:["GraphQL query executor wraps exceptions in ",(0,a.jsx)(n.code,{children:"GraphQLError"})," instances which\ncontain information about exception's origin in GraphQL query or it's result."]}),"\n",(0,a.jsxs)(n.p,{children:["Original exception is available through ",(0,a.jsx)(n.code,{children:"GraphQLError"}),"'s ",(0,a.jsx)(n.code,{children:"original_error"}),"\nattribute, but sometimes ",(0,a.jsx)(n.code,{children:"GraphQLError"})," can be wrapped in other ",(0,a.jsx)(n.code,{children:"GraphQLError"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Returns unwrapped exception or ",(0,a.jsx)(n.code,{children:"None"})," if no original exception was found."]}),"\n",(0,a.jsx)(n.h3,{id:"example-10",children:"Example"}),"\n",(0,a.jsxs)(n.p,{children:["Below code unwraps original ",(0,a.jsx)(n.code,{children:"KeyError"})," from multiple ",(0,a.jsx)(n.code,{children:"GraphQLError"})," instances:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'error = KeyError("I am a test!")\n\nassert unwrap_graphql_error(\n    GraphQLError(\n        "Error 1",\n        GraphQLError(\n            "Error 2",\n            GraphQLError(\n                "Error 3",\n                original_error=error\n            )\n        )\n    )\n) == error\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Passing other exception to ",(0,a.jsx)(n.code,{children:"unwrap_graphql_error"})," results in same exception\nbeing returned:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'error = ValueError("I am a test!")\nassert unwrap_graphql_error(error) == error\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"upload_scalar",children:(0,a.jsx)(n.code,{children:"upload_scalar"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"upload_scalar = ScalarType('Upload')\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Optional Python logic for ",(0,a.jsx)(n.code,{children:"Upload"})," scalar."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"Upload"})," scalar doesn't require any custom Python logic to work, but this utility sets ",(0,a.jsx)(n.code,{children:"serializer"})," and ",(0,a.jsx)(n.code,{children:"literal_parser"})," to raise ValueErrors when ",(0,a.jsx)(n.code,{children:"Upload"})," is used either as return type for field or passed as literal value in GraphQL query."]}),"\n",(0,a.jsx)(n.h3,{id:"example-11",children:"Example"}),"\n",(0,a.jsxs)(n.p,{children:["Below code defines a schema with ",(0,a.jsx)(n.code,{children:"Upload"})," scalar using ",(0,a.jsx)(n.code,{children:"upload_scalar"})," utility:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from ariadne import MutationType, make_executable_schema, upload_scalar\n\nmutation_type = MutationType()\n\n@mutation_type.field("handleUpload")\ndef resolve_handle_upload(*_, upload):\n    return repr(upload)\n\n\nschema = make_executable_schema(\n    """\n    scalar Upload\n\n    type Query {\n        empty: String\n    }\n\n    type Mutation {\n        handleUpload(upload: Upload!): String\n    }\n    """,\n    upload_scalar,\n    mutation_type,\n)\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"validate_schema_default_enum_values",children:(0,a.jsx)(n.code,{children:"validate_schema_default_enum_values"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def validate_schema_default_enum_values(schema: GraphQLSchema) -> None:\n    ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Raises ",(0,a.jsx)(n.code,{children:"ValueError"})," if ",(0,a.jsx)(n.a,{href:"https://graphql-core-3.readthedocs.io/en/latest/modules/type.html#graphql.type.GraphQLSchema",children:"GraphQL schema"})," has input fields or arguments with\ndefault values that are undefined enum values."]}),"\n",(0,a.jsx)(n.h3,{id:"example-schema-with-invalid-field-argument",children:"Example schema with invalid field argument"}),"\n",(0,a.jsxs)(n.p,{children:["This schema fails to validate because argument ",(0,a.jsx)(n.code,{children:"role"})," on field ",(0,a.jsx)(n.code,{children:"users"}),"\nspecifies ",(0,a.jsx)(n.code,{children:"REVIEWER"})," as default value and ",(0,a.jsx)(n.code,{children:"REVIEWER"})," is not a member of\nthe ",(0,a.jsx)(n.code,{children:"UserRole"})," enum:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-graphql",children:"type Query {\n    users(role: UserRole = REVIEWER): [User!]!\n}\n\nenum UserRole {\n    MEMBER\n    MODERATOR\n    ADMIN\n}\n\ntype User {\n    id: ID!\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"example-schema-with-invalid-input-field",children:"Example schema with invalid input field"}),"\n",(0,a.jsxs)(n.p,{children:["This schema fails to validate because field ",(0,a.jsx)(n.code,{children:"role"})," on input ",(0,a.jsx)(n.code,{children:"UserFilters"}),"\nspecifies ",(0,a.jsx)(n.code,{children:"REVIEWER"})," as default value and ",(0,a.jsx)(n.code,{children:"REVIEWER"})," is not a member of\nthe ",(0,a.jsx)(n.code,{children:"UserRole"})," enum:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-graphql",children:"type Query {\n    users(filter: UserFilters): [User!]!\n}\n\ninput UserFilters {\n    name: String\n    role: UserRole = REVIEWER\n}\n\nenum UserRole {\n    MEMBER\n    MODERATOR\n    ADMIN\n}\n\ntype User {\n    id: ID!\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"example-schema-with-invalid-default-input-field-argument",children:"Example schema with invalid default input field argument"}),"\n",(0,a.jsxs)(n.p,{children:["This schema fails to validate because field ",(0,a.jsx)(n.code,{children:"field"})," on input ",(0,a.jsx)(n.code,{children:"ChildInput"}),"\nspecifies ",(0,a.jsx)(n.code,{children:"INVALID"})," as default value and ",(0,a.jsx)(n.code,{children:"INVALID"})," is not a member of\nthe ",(0,a.jsx)(n.code,{children:"Role"})," enum:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-graphql",children:"type Query {\n    field(arg: Input = {field: {field: INVALID}}): String\n}\n\ninput Input {\n    field: ChildInput\n}\n\ninput ChildInput {\n    field: Role\n}\n\nenum Role {\n    USER\n    ADMIN\n}\n"})})]})}function h(e={}){let{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}},84429:function(e,n,r){r.d(n,{R:()=>l,x:()=>i});var s=r(96540);let a={},t=s.createContext(a);function l(e){let n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);