"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["55149"],{91292:function(e,n,i){i.r(n),i.d(n,{frontMatter:()=>t,toc:()=>l,default:()=>h,metadata:()=>r,assets:()=>c,contentTitle:()=>o});var r=JSON.parse('{"id":"graphql-relay","title":"GraphQL Relay","description":"Since version 0.25, Ariadne includes a contrib module that simplifies the process of creating a GraphQL server compatible with the Relay specification.","source":"@site/server_versioned_docs/version-0.25/graphql-relay.md","sourceDirName":".","slug":"/graphql-relay","permalink":"/server/graphql-relay","draft":false,"unlisted":false,"tags":[],"version":"0.25","frontMatter":{"id":"graphql-relay","title":"GraphQL Relay","sidebar_label":"GraphQL Relay"}}'),s=i(74848),a=i(84429);let t={id:"graphql-relay",title:"GraphQL Relay",sidebar_label:"GraphQL Relay"},o,c={},l=[{value:"Minimal Example",id:"minimal-example",level:2},{value:"Node Query",id:"node-query",level:2},{value:"Connection Queries",id:"connection-queries",level:2},{value:"Creating the Server",id:"creating-the-server",level:2}];function d(e){let n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Since version ",(0,s.jsx)(n.strong,{children:"0.25"}),", Ariadne includes a ",(0,s.jsx)(n.code,{children:"contrib"})," module that simplifies the process of creating a GraphQL server compatible with the ",(0,s.jsx)(n.a,{href:"https://relay.dev/docs/guides/graphql-server-specification/",children:"Relay specification"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"minimal-example",children:"Minimal Example"}),"\n",(0,s.jsx)(n.p,{children:"Let's start with a minimal example using the following schema:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"interface Node {\n  id: ID!\n}\n\ntype Faction implements Node {\n  id: ID!\n  name: String\n  ships(first: Int!, after: ID): ShipConnection\n}\n\ntype Ship implements Node {\n  id: ID!\n  modelName: String\n}\n\ntype ShipConnection {\n  edges: [ShipEdge]\n  pageInfo: PageInfo!\n  ships: [Ship]\n  totalCount: Int\n}\n\ntype ShipEdge {\n  cursor: String!\n  node: Ship\n}\n\ntype PageInfo {\n  hasNextPage: Boolean!\n  hasPreviousPage: Boolean!\n  startCursor: String\n  endCursor: String\n}\n\ntype Query {\n  rebels: Faction\n  empire: Faction\n  node(id: ID!): Node\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Ariadne provides built-in objects within ",(0,s.jsx)(n.code,{children:"ariadne.contrib.relay"})," that help implement Relay features."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from ariadne.contrib.relay import (\n    RelayObjectType,\n    RelayQueryType,\n)\n\nquery = RelayQueryType()\nship = RelayObjectType("Ship")\n\n\n@ship.node_resolver\nasync def resolve_ship(_, info, id: str):\n    return ships_backend.get_by_id(id)\n\n\n@query.node.type_resolver\ndef resolve_node_type(obj, *_):\n    return obj["__typename"]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"RelayObjectType"})," class includes a ",(0,s.jsx)(n.code,{children:"node_resolver"})," decorator, which defines how instances of this type should be resolved when queried through ",(0,s.jsx)(n.code,{children:"query.node"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Additionally, ",(0,s.jsx)(n.code,{children:"RelayQueryType"})," includes a ",(0,s.jsx)(n.code,{children:"RelayNodeInterfaceType"}),", which functions like a standard Ariadne ",(0,s.jsx)(n.code,{children:"InterfaceType"})," and requires a ",(0,s.jsx)(n.a,{href:"/server/interfaces",children:(0,s.jsx)(n.code,{children:"type_resolver"})}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"node-query",children:"Node Query"}),"\n",(0,s.jsxs)(n.p,{children:["By default, ",(0,s.jsx)(n.code,{children:"RelayQueryType"})," uses an ID decoder that ",(0,s.jsx)(n.strong,{children:"Base64 decodes the ID"})," and splits it by ",(0,s.jsx)(n.code,{children:":"}),". The first part of the decoded ID determines which node resolver to use."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, an ID of ",(0,s.jsx)(n.code,{children:"U2hpcDox"})," decodes to ",(0,s.jsx)(n.code,{children:'"Ship"'})," and ",(0,s.jsx)(n.code,{children:'"1"'}),", meaning the ",(0,s.jsx)(n.code,{children:"resolve_ship"})," method will be called with ",(0,s.jsx)(n.code,{children:'"1"'})," as the ",(0,s.jsx)(n.code,{children:"id"})," argument."]}),"\n",(0,s.jsxs)(n.p,{children:["To customize this behavior, you can provide a custom ID decoder when instantiating ",(0,s.jsx)(n.code,{children:"RelayQueryType"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def decode_global_id(kwargs) -> GlobalIDTuple:\n    return GlobalIDTuple(*b64decode(kwargs["bid"]).decode().split(":"))\n\n\nquery = RelayQueryType(\n    global_id_decoder=decode_global_id,\n)\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The above example assumes a ",(0,s.jsxs)(n.strong,{children:["Node interface that uses ",(0,s.jsx)(n.code,{children:"bid"})," instead of ",(0,s.jsx)(n.code,{children:"id"})]}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"interface Node {\n  bid: ID!\n}\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"connection-queries",children:"Connection Queries"}),"\n",(0,s.jsxs)(n.p,{children:["Ariadne provides a ",(0,s.jsx)(n.code,{children:"connection"})," decorator that simplifies handling connection-based queries. Consider the following example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from ariadne.contrib.relay import (\n    ConnectionArguments,\n    RelayConnection,\n    RelayObjectType,\n)\n\nfaction = RelayObjectType("Faction")\n\n@faction.connection("ships")\nasync def resolve_ships(\n    faction_obj,\n    info,\n    connection_arguments: ConnectionArguments,\n    **kwargs,\n):\n    ships_slice = ships_backend.filter(id__gt=connection_arguments.after).first(connection_arguments.first)\n\n    return RelayConnection(\n        edges=ships_slice,\n        total=ships_slice.count(),\n        has_next_page=True if ships_slice.next_page else False,\n        has_previous_page=True if ships_slice.previous_page else False,\n    )\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["The example above assumes the presence of a backend capable of retrieving data. Ariadne itself does ",(0,s.jsx)(n.strong,{children:"not"})," fetch or store data\u2014this responsibility belongs to your application."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"resolve_ships"})," resolver, decorated with ",(0,s.jsx)(n.code,{children:"RelayObjectType.connection"}),", acts as a ",(0,s.jsx)(n.strong,{children:"Relay connection resolver"}),". It receives the standard ",(0,s.jsx)(n.code,{children:"obj"})," and ",(0,s.jsx)(n.code,{children:"info"})," arguments, along with ",(0,s.jsx)(n.code,{children:"connection_arguments"}),", which contains pagination-related data. Additional data, if present, is accessible via ",(0,s.jsx)(n.code,{children:"kwargs"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["This resolver must return a ",(0,s.jsx)(n.code,{children:"RelayConnection"})," instance, with ",(0,s.jsx)(n.strong,{children:"pagination handled externally"}),"\u2014Ariadne does ",(0,s.jsx)(n.strong,{children:"not"})," implement pagination logic for you."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"creating-the-server",children:"Creating the Server"}),"\n",(0,s.jsxs)(n.p,{children:["When creating an executable schema, ensure all ",(0,s.jsx)(n.strong,{children:"bindables"})," are included:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from ariadne import make_executable_schema\n\napp = GraphQL(\n    make_executable_schema(schema, *query.bindables, faction, ship),\n)\n"})})]})}function h(e={}){let{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},84429:function(e,n,i){i.d(n,{R:()=>t,x:()=>o});var r=i(96540);let s={},a=r.createContext(s);function t(e){let n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);