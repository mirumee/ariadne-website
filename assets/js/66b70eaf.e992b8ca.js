"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["66991"],{45446:function(e,t,n){n.r(t),n.d(t,{frontMatter:()=>s,toc:()=>p,default:()=>c,metadata:()=>r,assets:()=>l,contentTitle:()=>i});var r=JSON.parse('{"id":"starlette-integration","title":"Starlette integration","description":"Mounting ASGI application","source":"@site/docs/server/starlette-integration.md","sourceDirName":".","slug":"/starlette-integration","permalink":"/server/next/starlette-integration","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"starlette-integration","title":"Starlette integration","sidebar_label":"Starlette"},"sidebar":"tutorialSidebar","previous":{"title":"Flask","permalink":"/server/next/flask-integration"},"next":{"title":"Other technologies","permalink":"/server/next/other-integrations"}}'),a=n(74848),o=n(84429);let s={id:"starlette-integration",title:"Starlette integration",sidebar_label:"Starlette"},i,l={},p=[{value:"Mounting ASGI application",id:"mounting-asgi-application",level:2},{value:"Using routes",id:"using-routes",level:2},{value:"Using in custom routes",id:"using-in-custom-routes",level:2}];function u(e){let t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"mounting-asgi-application",children:"Mounting ASGI application"}),"\n",(0,a.jsx)(t.p,{children:"Ariadne is an ASGI application that can be mounted under Starlette. It will support both HTTP and WebSocket traffic used by subscriptions:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'from ariadne import QueryType, make_executable_schema\nfrom ariadne.asgi import GraphQL\nfrom starlette.applications import Starlette\n\ntype_defs = """\n    type Query {\n        hello: String!\n    }\n"""\n\nquery = QueryType()\n\n\n@query.field("hello")\ndef resolve_hello(*_):\n    return "Hello world!"\n\n\n# Create executable schema instance\nschema = make_executable_schema(type_defs, query)\n\n# Mount Ariadne GraphQL as sub-application for Starlette\napp = Starlette(debug=True)\n\napp.mount("/graphql/", GraphQL(schema, debug=True))\n'})}),"\n",(0,a.jsx)(t.h2,{id:"using-routes",children:"Using routes"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"GraphQL"})," provides methods that can be used as Starlette routes:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'from ariadne import QueryType, make_executable_schema\nfrom ariadne.asgi import GraphQL\nfrom ariadne.asgi.handlers import GraphQLTransportWSHandler\nfrom starlette.applications import Starlette\nfrom starlette.routing import Route, WebSocketRoute\n\ntype_defs = """\n    type Query {\n        hello: String!\n    }\n"""\n\nquery = QueryType()\n\n\n@query.field("hello")\ndef resolve_hello(*_):\n    return "Hello world!"\n\n\n# Create executable schema instance\nschema = make_executable_schema(type_defs, query)\n\n# Create GraphQL App instance\ngraphql_app = GraphQL(\n    schema,\n    debug=True,\n    websocket_handler=GraphQLTransportWSHandler(),\n)\n\n# Create Starlette App instance using method handlers from GraphQL as endpoints\napp = Starlette(\n    routes=[\n        Route("/graphql/", graphql_app.handle_request, methods=["GET", "POST", "OPTIONS"]),\n        WebSocketRoute("/graphql/", graphql_app.handle_websocket),\n    ],\n)\n'})}),"\n",(0,a.jsx)(t.h2,{id:"using-in-custom-routes",children:"Using in custom routes"}),"\n",(0,a.jsxs)(t.p,{children:["You can wrap Starlette routes in custom logic if you want to. This enables passing additional data or objects to the GraphQL through ",(0,a.jsx)(t.code,{children:"request.scope"}),":"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'from ariadne import QueryType, make_executable_schema\nfrom ariadne.asgi import GraphQL\nfrom ariadne.asgi.handlers import GraphQLTransportWSHandler\nfrom starlette.applications import Starlette\nfrom starlette.routing import Route, WebSocketRoute\n\ntype_defs = """\n    type Query {\n        hello: String!\n    }\n"""\n\nquery = QueryType()\n\n\n@query.field("hello")\ndef resolve_hello(*_):\n    return "Hello world!"\n\n\n# Create executable schema instance\nschema = make_executable_schema(type_defs, query)\n\n# Create GraphQL App instance\ngraphql_app = GraphQL(\n    schema,\n    debug=True,\n    websocket_handler=GraphQLTransportWSHandler(),\n)\n\n\n# Create custom routes wrapping default ones provided by Ariadne\nasync def graphql_route(request):\n    # Insert custom logic there\n    # For example, check if user is authenticated before displaying Playground\n    # Or pass something to GraphQL through request.scope\n    return await graphql_app.handle_request(request)\n\n\nasync def websocket_route(websocket):\n    # Insert custom logic there\n    await graphql_app.handle_websocket(websocket)\n\n\n# Create Starlette App instance using custom routes\napp = Starlette(\n    routes=[\n        Route("/graphql/", graphql_route, methods=["GET", "POST", "OPTIONS"]),\n        WebSocketRoute("/graphql/", graphql_app.handle_websocket),\n    ],\n)\n'})})]})}function c(e={}){let{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},84429:function(e,t,n){n.d(t,{R:()=>s,x:()=>i});var r=n(96540);let a={},o=r.createContext(a);function s(e){let t=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);