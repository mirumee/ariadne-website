"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["95383"],{75619:function(e,a,n){n.r(a),n.d(a,{frontMatter:()=>r,toc:()=>o,default:()=>p,metadata:()=>s,assets:()=>d,contentTitle:()=>t});var s=JSON.parse('{"id":"file-uploads","title":"File uploads","description":"Ariadne implements the GraphQL multipart request specification that describes how file uploads should be implemented by both API clients and servers.","source":"@site/server_versioned_docs/version-0.25/file-uploads.md","sourceDirName":".","slug":"/file-uploads","permalink":"/server/file-uploads","draft":false,"unlisted":false,"tags":[],"version":"0.25","frontMatter":{"id":"file-uploads","title":"File uploads"},"sidebar":"tutorialSidebar","previous":{"title":"Dataloaders","permalink":"/server/dataloaders"},"next":{"title":"Documenting schema","permalink":"/server/documenting-schema"}}'),i=n(74848),l=n(84429);let r={id:"file-uploads",title:"File uploads"},t,d={},o=[{value:"Enabling file uploads",id:"enabling-file-uploads",level:2},{value:"Limitations",id:"limitations",level:2},{value:"Implementation differences",id:"implementation-differences",level:2},{value:"<code>ariadne.asgi</code>",id:"ariadneasgi",level:3},{value:"<code>ariadne.wsgi</code>",id:"ariadnewsgi",level:3}];function c(e){let a={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(a.p,{children:["Ariadne implements the ",(0,i.jsx)(a.a,{href:"https://github.com/jaydenseric/graphql-multipart-request-spec",children:"GraphQL multipart request specification"})," that describes how file uploads should be implemented by both API clients and servers."]}),"\n",(0,i.jsxs)(a.blockquote,{children:["\n",(0,i.jsx)(a.p,{children:(0,i.jsx)(a.strong,{children:"Note"})}),"\n",(0,i.jsxs)(a.p,{children:["File uploads require ",(0,i.jsx)(a.code,{children:"python-multipart"})," library:"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-console",children:'pip install "ariadne[file-uploads]"\n'})}),"\n"]}),"\n",(0,i.jsx)(a.h2,{id:"enabling-file-uploads",children:"Enabling file uploads"}),"\n",(0,i.jsxs)(a.p,{children:["To enable file uploads on your server, define new a scalar named ",(0,i.jsx)(a.code,{children:"Upload"})," in your schema:"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-graphql",children:"scalar Upload\n"})}),"\n",(0,i.jsxs)(a.p,{children:["Next, import ",(0,i.jsx)(a.code,{children:"upload_scalar"})," from ",(0,i.jsx)(a.code,{children:"ariadne"})," package and use it during the creation of your executable schema:"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-python",children:"from ariadne import make_executable_schema, upload_scalar\n\n# ...your types definitions\n\nschema = make_executable_schema(type_defs, [..., upload_scalar])\n"})}),"\n",(0,i.jsxs)(a.p,{children:["You will now be able to use ",(0,i.jsx)(a.code,{children:"Upload"})," scalar arguments for your operations:"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-graphql",children:"type Mutation {\n    uploadUserImage(image: Upload!): Boolean!\n}\n"})}),"\n",(0,i.jsx)(a.h2,{id:"limitations",children:"Limitations"}),"\n",(0,i.jsxs)(a.p,{children:["The default ",(0,i.jsx)(a.code,{children:"Upload"})," scalar is a write-only scalar that supports only accessing the value that was passed through the ",(0,i.jsx)(a.code,{children:"variables"}),". It is not possible to use it as return value for a GraphQL field or set its value in a GraphQL Query:"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-graphql",children:'type User {\n    "This field will fail with ValueError"\n    image: Upload\n}\n'})}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-graphql",children:'mutation {\n    uploadUserImage(image: "data:text/plain;base64,QXJpYWRuZSByb2NrcyE=")\n}\n'})}),"\n",(0,i.jsxs)(a.blockquote,{children:["\n",(0,i.jsxs)(a.p,{children:["You are not required to use the ",(0,i.jsx)(a.code,{children:"Upload"})," scalar implementation provided by Ariadne. You can implement your own if you wish to, so you can (for example) support file literals as base64 data."]}),"\n"]}),"\n",(0,i.jsx)(a.h2,{id:"implementation-differences",children:"Implementation differences"}),"\n",(0,i.jsxs)(a.p,{children:["The Python value returned by the ",(0,i.jsx)(a.code,{children:"Upload"})," scalar is not standardized and depends on your technology stack:"]}),"\n",(0,i.jsx)(a.h3,{id:"ariadneasgi",children:(0,i.jsx)(a.code,{children:"ariadne.asgi"})}),"\n",(0,i.jsxs)(a.p,{children:["Ariadne's ASGI support is based on ",(0,i.jsx)(a.a,{href:"https://starlette.io",children:"Starlette"})," and hence uploaded files are instances of ",(0,i.jsx)(a.a,{href:"https://www.starlette.io/requests/#request-files",children:(0,i.jsx)(a.code,{children:"UploadFile"})}),"."]}),"\n",(0,i.jsx)(a.h3,{id:"ariadnewsgi",children:(0,i.jsx)(a.code,{children:"ariadne.wsgi"})}),"\n",(0,i.jsxs)(a.p,{children:["Ariadne's WSGI support uses the ",(0,i.jsx)(a.code,{children:"python-multipart"})," library that represents uploaded files as instances of ",(0,i.jsx)(a.a,{href:"https://github.com/andrew-d/python-multipart/blob/f1a275e73763d16a9dba45e2bd568860302786bd/multipart/multipart.py#L262",children:(0,i.jsx)(a.code,{children:"File"})}),"."]})]})}function p(e={}){let{wrapper:a}={...(0,l.R)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},84429:function(e,a,n){n.d(a,{R:()=>r,x:()=>t});var s=n(96540);let i={},l=s.createContext(i);function r(e){let a=s.useContext(l);return s.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function t(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(l.Provider,{value:a},e.children)}}}]);