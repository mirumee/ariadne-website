"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["36607"],{44621:function(e){e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/2024/12/19/ariadne-0-24","metadata":{"permalink":"/blog/2024/12/19/ariadne-0-24","source":"@site/blog/2024-12-19-ariadne-0-24.md","title":"Ariadne 0.24","description":"Ariadne 0.24 is now available.","date":"2024-12-19T00:00:00.000Z","tags":[],"readingTime":1.27,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne 0.24"},"unlisted":false,"nextItem":{"title":"Ariadne GraphQL Proxy 0.3","permalink":"/blog/2024/03/26/ariadne-graphql-proxy-0-3"}},"content":"Ariadne 0.24 is now available.\\n\\nAriadne 0.24 is a maintenance release that implements improvements and fixes to reported issues.\\n\\n\x3c!--truncate--\x3e\\n\\n## Added validation for directive declarations in `make_executable_schema` to prevent schema creation with undeclared directives\\n\\n`SchemaDirectiveVisitor` that `make_executable_schema` uses for GraphQL directives will now raise the `ValueError` if directive is not declared in the GraphQL schema.\\n\\n## Added `include_cookies` option to the `ExplorerApollo`\\n\\nApollo Explorer\'s `includeCookies` option can now be enabled in Ariadne via the `include_cookies` kwarg.\\n\\n## Added `share_enabled` param to `ExplorerPlayground` to enable share playground feature\\n\\nGraphQL Playground\'s `shareEnabled` option can now be enabled in Ariadne via the `share_enabled` kwarg.\\n\\n## Added support for nested attribute resolution in alias resolvers\\n\\nAriadne\'s `resolve_to` utility now supports data structure traversal in created resolvers when `.` is used in the `attr_name` argument:\\n\\n```python\\nresolver = resolve_to(\\"attr.child_attr.deeper_child_attr\\")\\n```\\n\\n## Replaced regexes in the Apollo Federation implementation with cleaner approach using GraphQL AST\\n\\nAriadne used series of regexes to process GraphQL schemas used for Apollo Federation. This approach was prone to errors and edge cases.\\n\\nIn 0.24 this approach was replaced with new one that instead parses schema to AST.\\n\\n## CHANGELOG\\n\\n- Added validation for directive declarations in `make_executable_schema` to prevent schema creation with undeclared directives.\\n- Replaced hardcoded HTTP statuses with `HTTPStatus` from the `http` stdlib module.\\n- Added `include_cookies` option to the `ExplorerApollo`.\\n- Fixed typing on `extract_data_from_request` method.\\n- Fixed tests websockets after starlette update.\\n- Added `share_enabled` param to `ExplorerPlayground` to enable share playground feature.\\n- Added support for nested attribute resolution in alias resolvers.\\n- Replaced regexes in the Apollo Federation implementation with cleaner approach using GraphQL AST."},{"id":"/2024/03/26/ariadne-graphql-proxy-0-3","metadata":{"permalink":"/blog/2024/03/26/ariadne-graphql-proxy-0-3","source":"@site/blog/2024-03-26-ariadne-graphql-proxy-0-3.md","title":"Ariadne GraphQL Proxy 0.3","description":"Ariadne GraphQL Proxy 0.3 is now available.","date":"2024-03-26T00:00:00.000Z","tags":[],"readingTime":1.68,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne GraphQL Proxy 0.3"},"unlisted":false,"prevItem":{"title":"Ariadne 0.24","permalink":"/blog/2024/12/19/ariadne-0-24"},"nextItem":{"title":"Ariadne 0.23","permalink":"/blog/2024/03/18/ariadne-0-23"}},"content":"Ariadne GraphQL Proxy 0.3 is now available.\\n\\nThis release implements new features we found necessary for our use cases and fixes the issues we\'ve found in testing.\\n\\n\x3c!--truncate--\x3e\\n\\n## Cache serializers\\n\\nCache backends now support serializer customization for better control on how data is dehydrated and re-hydrated for selected cache store.\\n\\n## Fixed schema proxy error when variable in operation was not in `variables`\\n\\nGraphQL supports optional variables. Those are variables which can be either `null` or are omitted from `variables`.\\n\\nPreviously, Ariadne GraphQL Proxy would crash with `KeyError` if optional variable was omitted from `variables`. This was fixed in 0.3 release.\\n\\n## Fixed `union` fields support\\n\\nAriadne GraphQL Proxy would attempt to retrieve a list of fields for `union` type, crashing with a `KeyError`.\\n\\nIn 0.3 release GraphQL Proxy is aware of `union` types and implements a dedicated query splitting logic for fields returning them.\\n\\n## Custom headers\\n\\nCustom headers configuration was improved for both `ProxyResolver` and `ProxySchema`.\\n\\nIt is now possible to set default headers that should be included in requests made by the Proxy, enabling GraphQL access to APIs requiring auth for schema introspection.\\n\\n## Proxy errors and extensions from upstream.\\n\\nFor remote schemas it is now possible to enable proxying of GraphQL errors and extensions.\\n\\nBecause proxy mechanism uses the strategy pattern, it\'s also possible to customize how proxied data appears in a final JSON with query\'s result.\\n\\n## Fields dependencies\\n\\nField\'s dependencies are additional fields that should be retrieved from the upstream GraphQL API when given field is requested.\\n\\nThis feature is useful when final schema includes new fields that should be resolved from other fields, which themselves shouldn\'t be included in the final schema.\\n\\n## CHANGELOG\\n\\n- Added `CacheSerializer`, `NoopCacheSerializer` and `JSONCacheSerializer`. Changed `CacheBackend`, `InMemoryCache`, `CloudflareCacheBackend` and `DynamoDBCacheBackend` to accept `serializer` initialization option.\\n- Fixed schema proxy returning an error when variable defined in an operation is missing from its variables.\\n- Fixed query `union` fields support.\\n- Improved custom headers handling in `ProxyResolver` and `ProxySchema`.\\n- Proxy errors and extensions from upstream.\\n- Added fields dependencies configuration option to `ProxySchema`."},{"id":"/2024/03/18/ariadne-0-23","metadata":{"permalink":"/blog/2024/03/18/ariadne-0-23","source":"@site/blog/2024-03-18-ariadne-0-23.md","title":"Ariadne 0.23","description":"Ariadne 0.23 is now out.","date":"2024-03-18T00:00:00.000Z","tags":[],"readingTime":1.34,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne 0.23"},"unlisted":false,"prevItem":{"title":"Ariadne GraphQL Proxy 0.3","permalink":"/blog/2024/03/26/ariadne-graphql-proxy-0-3"},"nextItem":{"title":"Ariadne Codegen 0.13","permalink":"/blog/2024/03/04/ariadne-codegen-0-13"}},"content":"Ariadne 0.23 is now out.\\n\\nAriadne 0.23 is a maintenance release that adds opt-in support for executing `query` operations over `GET` requests, bumps Apollo Federation support to 2.6 and addresses two small bugs.\\n\\n\x3c!--truncate--\x3e\\n\\n## Support for executing queries made with GET requests\\n\\nAriadne 0.23 brings support for query execution made with GET HTTP requests. Only \u201Cquery\u201D type operations are executed, \u201Cmutation\u201D and \u201Csubscription\u201D operations will raise errors.\\n\\nThis is useful for clients retrieving data from the GraphQL API that could be cached over the HTTP using solutions like Varnish.\\n\\n## Added support for the Apollo Federation versions up to 2.6\\n\\nOur amazing community has contributed a patch for Ariadne that increases support for Apollo Federation up to version 2.6.\\n\\n## Fixed deprecation warnings in Apollo Tracing extension\\n\\nFor those few who are using Apollo Tracing extension for utility of seeing resolvers execution time in response\u2019s JSON payload, we have fixed the deprecation warnings.\\n\\n## Blocked `subscription` execution in POST requests\\n\\nIt was possible to send a \u201Csubscription\u201D operation to Ariadne over POST HTTP request, and the query executor would attempt to execute it, skipping the `source` call and thus producing an error in a resolver expecting some payload.\\n\\nAriadne 0.23 includes an extra validation step that raises a dedicated error when this is attempted.\\n\\n## CHANGELOG\\n\\n- Added `execute_get_queries` setting to the `GraphQL` apps that controls execution of the GraphQL \\"query\\" operations made with GET requests. Defaults to `False`.\\n- Added support for the Apollo Federation versions up to 2.6.\\n- Fixed deprecation warnings in Apollo Tracing extension.\\n- Added a check to prevent `subscription` operation execution when a query is made with POST request."},{"id":"/2024/03/04/ariadne-codegen-0-13","metadata":{"permalink":"/blog/2024/03/04/ariadne-codegen-0-13","source":"@site/blog/2024-03-04-ariadne-codegen-0-13.md","title":"Ariadne Codegen 0.13","description":"Ariadne Codegen 0.13 is now available. This is a bugfix release that addresses reported issues.","date":"2024-03-04T00:00:00.000Z","tags":[],"readingTime":0.82,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne Codegen 0.13"},"unlisted":false,"prevItem":{"title":"Ariadne 0.23","permalink":"/blog/2024/03/18/ariadne-0-23"},"nextItem":{"title":"Ariadne GraphQL Modules 0.8","permalink":"/blog/2024/02/21/ariadne-graphql-modules-0-8"}},"content":"Ariadne Codegen 0.13 is now available. This is a bugfix release that addresses reported issues.\\n\\n\x3c!--truncate--\x3e\\n\\n## Re-added `model_rebuild` calls\\n\\nAriadne Codegen 0.11 removed `model_rebuild` calls from the generated code on the basis of Pydantic v2\'s self-healing capabilities.\\n\\nSadly reality verified this feature, making it necessary for us to mostly revert the change from 0.11.\\n\\nAriadne Codegen 0.13 scans generated models for forward references and includes `model_rebuild` calls for models that contain those.\\n\\n## Fixed potential name conflicts between field args and generated client\'s method code\\n\\nNaming a field argument `query`, `variables`, `data` or `result` would prevent the generated method to work or produce type errors for variable redefinition with different type.\\n\\nAriadne Codegen 0.13 detects name collisions and then prefixes its own names with `_` in generated client\'s methods.\\n\\n## CHANGELOG\\n\\n- Fixed `str_to_snake_case` utility to capture fully capitalized words followed by an underscore.\\n- Re-added `model_rebuild` calls for models with forward references.\\n- Fixed potential name conflicts between field args and generated client\'s method code."},{"id":"/2024/02/21/ariadne-graphql-modules-0-8","metadata":{"permalink":"/blog/2024/02/21/ariadne-graphql-modules-0-8","source":"@site/blog/2024-02-21-ariadne-graphql-modules-0-8.md","title":"Ariadne GraphQL Modules 0.8","description":"Ariadne GraphQL Modules 0.8 is now available.","date":"2024-02-21T00:00:00.000Z","tags":[],"readingTime":0.09,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne GraphQL Modules 0.8"},"unlisted":false,"prevItem":{"title":"Ariadne Codegen 0.13","permalink":"/blog/2024/03/04/ariadne-codegen-0-13"},"nextItem":{"title":"Ariadne Codegen 0.12","permalink":"/blog/2024/02/05/ariadne-codegen-0-12"}},"content":"Ariadne GraphQL Modules 0.8 is now available.\\n\\nThis release updates library to work with Ariadne 0.22.\\n\\n\x3c!--truncate--\x3e"},{"id":"/2024/02/05/ariadne-codegen-0-12","metadata":{"permalink":"/blog/2024/02/05/ariadne-codegen-0-12","source":"@site/blog/2024-02-05-ariadne-codegen-0-12.md","title":"Ariadne Codegen 0.12","description":"Ariadne Codegen 0.12 has been released!","date":"2024-02-05T00:00:00.000Z","tags":[],"readingTime":1.52,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne Codegen 0.12"},"unlisted":false,"prevItem":{"title":"Ariadne GraphQL Modules 0.8","permalink":"/blog/2024/02/21/ariadne-graphql-modules-0-8"},"nextItem":{"title":"Ariadne 0.22","permalink":"/blog/2024/01/31/ariadne-0-22-0"}},"content":"Ariadne Codegen 0.12 has been released!\\n\\nThis is a maintenance release that fixes reported bugs in Pydantic models creation, subscriptions, plugins and adds support for saving schema to `graphql` file.\\n\\n\x3c!--truncate--\x3e\\n\\n## Fixed `graphql-transport-ws` protocol implementation not waiting for the `connection_ack` message on new connection\\n\\nAsync client for `graphql-transport-ws` protocol didn\'t await for the `connection_ack` message on the new connection to the GraphQL server.\\n\\nThis has been addressed in Ariadne Codegen 0.12.\\n\\n## Fixed `get_client_settings` mutating `config_dict` instance\\n\\nAriadne Codegen mutated `config_dict` on initialization, which caused errors when plugins attempted to access changed or removed keys in the configuration dict.\\n\\nIn 0.12 `config_dict` is first copied before being changed, preserving the original dict for plugins.\\n\\n## Restored `model_rebuild` calls for top level fragment models\\n\\n`model_rebuild` calls were previously removed from Ariadne Codegen to improve the generated client\'s initialization performance.\\n\\nThis caused an issue where lazy references were not completed by Pydantic on initialization, breaking those in the client.\\n\\n0.12 attempts to detect scenarios where `model_rebuild` are necessary and includes them in the generated client.\\n\\n## Added support to `graphqlschema` for saving schema as a GraphQL file\\n\\nAriadne Codegen provides the `graphqlschema` command which creates a local copy of specified schema.\\n\\nPreviously this copy was always a Python declaration of the `GraphQLSchema` instance, but since 0.12 it is now possible to create a copy in GraphQL Schema Definition Language.\\n\\nOutput format is controlled by the file extension used in the `target_file_path` configuration option:\\n\\n- `.py` will produce a Python file with `GraphQLSchema` instance.\\n- `.graphql` and `.gql` will produce a GraphQL file with SDL schema definition.\\n\\n## Changelog\\n\\n- Fixed `graphql-transport-ws` protocol implementation not waiting for the `connection_ack` message on a new connection.\\n- Fixed `get_client_settings` mutating `config_dict` instance.\\n- Added support to `graphqlschema` for saving schema as a GraphQL file.\\n- Restored `model_rebuild` calls for top level fragment models."},{"id":"/2024/01/31/ariadne-0-22-0","metadata":{"permalink":"/blog/2024/01/31/ariadne-0-22-0","source":"@site/blog/2024-01-31-ariadne-0-22-0.md","title":"Ariadne 0.22","description":"Ariadne 0.22 has been released!","date":"2024-01-31T00:00:00.000Z","tags":[],"readingTime":0.95,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne 0.22"},"unlisted":false,"prevItem":{"title":"Ariadne Codegen 0.12","permalink":"/blog/2024/02/05/ariadne-codegen-0-12"},"nextItem":{"title":"Ariadne Codegen 0.11","permalink":"/blog/2023/12/05/ariadne-codegen-0-11"}},"content":"Ariadne 0.22 has been released!\\n\\nThis release fixes the invalid error message being returned from the `GraphQLTransportWSHandler` if the GraphQL error occurred for the query or mutation operations. It also improves implementation of enums handling.\\n\\n\x3c!--truncate--\x3e\\n\\n## Fixed `GraphQLTransportWSHandler` error responses\\n\\n`GraphQLTransportWSHandler` would return an incorrect error payload for `query` and `mutation` operations that errored. `payload` for `error` message should be a list of GraphQL errors, but due to a bug in implementation, it would be a list with single `{errors: [...]}` result.\\n\\n## Improvements to enum handling\\n\\nGraphQL comes with a number of quirks when it comes to enums behavior, especially converting their GraphQL values to Python, and vice-versa.\\n\\nPreviously Ariadne relied on the logic implemented by the `EnumType` bindable for handling this behavior, but Ariadne 0.22 moves this logic from `EnumType.bind_to_default_values` into a new `repair_schema_default_enum_values` utility. `validate_schema_enum_values` utility has been replaced with new `validate_schema_default_enum_values` utility.\\n\\n## Changelog\\n\\n- Deprecated `EnumType.bind_to_default_values` method. It will be removed in a future release.\\n- Added `repair_schema_default_enum_values` to public API.\\n- Removed `validate_schema_enum_values` and introduced `validate_schema_default_enum_values` in its place. This is a breaking change.\\n- Fixed an invalid error message returned by the `GraphQLTransportWSHandler` for `query` and `mutation` operations."},{"id":"/2023/12/05/ariadne-codegen-0-11","metadata":{"permalink":"/blog/2023/12/05/ariadne-codegen-0-11","source":"@site/blog/2023-12-05-ariadne-codegen-0-11.md","title":"Ariadne Codegen 0.11","description":"Ariadne Codegen 0.11 is now available!","date":"2023-12-05T00:00:00.000Z","tags":[],"readingTime":2.07,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne Codegen 0.11"},"unlisted":false,"prevItem":{"title":"Ariadne 0.22","permalink":"/blog/2024/01/31/ariadne-0-22-0"},"nextItem":{"title":"Ariadne Codegen 0.10","permalink":"/blog/2023/11/15/ariadne-codegen-0-10"}},"content":"Ariadne Codegen 0.11 is now available!\\n\\nThis release brings performance improvements and new options for default base clients.\\n\\n\x3c!--truncate--\x3e\\n\\n## Removed `model_rebuild` calls\\n\\nPydantic v2 has changed the way forward refs are handled during model class initialisation. If an annotation couldn\'t be resolved, an auto-rebuild is performed during the first validation attempt. Because of this, we\'re removing all `model_rebuild` calls from the generated package.\\n\\n## Generating only used inputs and enums\\n\\nVersion 0.11 introduces 2 new configuration flags that can be used to reduce the number of unused generated models:\\n\\n- `include_all_inputs` (defaults to `true`) - when set to `true` the generated package will include a model for every input defined in the schema, otherwise it will only generate inputs used by defined operations.\\n\\n- `include_all_enums` (defaults to `true`) - specifies whether to include all enums defined in the schema, or only those used in operations.\\n\\n## `NoReimportsPlugin`\\n\\nIn 0.11, we are adding `NoReimportsPlugin` to the `ariadne_codegen.contrib` package. It removes the contents of the generated `__init__.py`. This is useful in scenarios where the generated package contains so many Pydantic models that the client\'s eager initialisation of the entire package on first import is very slow.\\n\\n## Including `operationName` in payload\\n\\nThe generated client methods will now pass the name of the operation as the `operation_name` argument to the `execute` and `execute_ws` methods of the base client. For example:\\n\\n```python\\nasync def list_all_users(self, **kwargs: Any) -> ListAllUsers:\\n    query = gql(\\n        \\"\\"\\"\\n        query ListAllUsers {\\n          users {\\n            id\\n          }\\n        }\\n        \\"\\"\\"\\n    )\\n    variables: Dict[str, object] = {}\\n    response = await self.execute(\\n        query=query, operation_name=\\"ListAllUsers\\", variables=variables, **kwargs\\n    )\\n    data = self.get_data(response)\\n    return ListAllUsers.model_validate(data)\\n```\\n\\nDefault base clients will also include the given `operation_name` as `operationName` in the sent payload.\\n\\n## Payload without `data`, but with `errors` key\\n\\nWe have changed the base clients to raise `GraphQLClientGraphQLMultiError` instead of `GraphQLClientInvalidResponseError` for payloads without `data` but with `errors` key.\\n\\n## Renamed invalid response error\\n\\nTo match the convention of other exceptions included with the base default clients, we have renamed `GraphQLClientInvalidResponseError` to `GraphQLClientInvalidResponseError` (with a capital `L`).\\n\\n## Changelog\\n\\n- Removed `model_rebuild` calls for generated input, fragment and result models.\\n- Added `NoReimportsPlugin` that makes the `__init__.py` of generated client package empty.\\n- Added `include_all_inputs` config flag to generate only inputs used in supplied operations.\\n- Added `include_all_enums` config flag to generate only enums used in supplied operations.\\n- Added `operationName` to payload sent by generated client\'s methods.\\n- Fixed base clients to pass `mypy --strict` without installed optional dependencies.\\n- Renamed `GraphQlClientInvalidResponseError` to `GraphQLClientInvalidResponseError` (breaking change).\\n- Changed base clients to raise `GraphQLClientGraphQLMultiError` for payloads with `errors` key but no `data` (breaking change)."},{"id":"/2023/11/15/ariadne-codegen-0-10","metadata":{"permalink":"/blog/2023/11/15/ariadne-codegen-0-10","source":"@site/blog/2023-11-15-ariadne-codegen-0-10.md","title":"Ariadne Codegen 0.10","description":"Ariadne Codegen 0.10 has been released!","date":"2023-11-15T00:00:00.000Z","tags":[],"readingTime":4.14,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne Codegen 0.10"},"unlisted":false,"prevItem":{"title":"Ariadne Codegen 0.11","permalink":"/blog/2023/12/05/ariadne-codegen-0-11"},"nextItem":{"title":"Ariadne 0.21","permalink":"/blog/2023/11/08/ariadne-0-21-0"}},"content":"Ariadne Codegen 0.10 has been released!\\n\\nThis release improves the snake case conversion of operation names, adds opt-in support for Open Telemetry tracing, introduces the `ExtractOperationsPlugin` plugin, adds Python 3.12 to the supported versions, and brings other features and fixes.\\n\\n\x3c!--truncate--\x3e\\n\\n## Converting capitalized names and digits to snake case (breaking change)\\n\\nCodegen converts given operation name to snake case. Result will later be used as name of a file containing generated models for operation, optionally (if `convert_to_snake_case` is set to `true`) also as client\'s method name. This release introduces changes to how numbers and capitalised names are handled in the conversion process, e.g:\\n\\n| operation name   | old snake case         | new snake case     |\\n| ---------------- | ---------------------- | ------------------ |\\n| name             | name                   | name               |\\n| operationName    | operation_name         | operation_name     |\\n| operationNAME    | operation_n_a_m_e      | operation_name     |\\n| OPERATIONName    | o_p_e_r_a_t_i_o_n_name | operation_name     |\\n| operationName123 | operation_name123      | operation_name_123 |\\n| operationNAME123 | operation_n_a_m_e123   | operation_name_123 |\\n\\nThis is potentially a breaking change and may require changes in code using generated client.\\n\\n## Open Telemetry tracing\\n\\n`0.10` ships with two additional base clients that support the Open Telemetry tracing. When the `opentelemetry_client` configuration option is set to `true`, the default included base client is replaced with one that implements the opt-in Open Telemetry support - `BaseClientOpenTelemetry`/`AsyncBaseClientOpenTelemetry`. By default this support does nothing, but if the `opentelemetry-api` package is installed and the `tracer` argument is provided, then the client will create spans with data about requests made.\\n\\nTracing arguments accepted by `BaseClientOpenTelemetry`:\\n\\n- `tracer`: `Optional[Union[str, Tracer]] = None` - tracer object or name to pass to the `get_tracer` method\\n- `root_context`: `Optional[Context] = None` - optional context added to the root span\\n- `root_span_name`: `str = \\"GraphQL Operation\\"` - name of the root span\\n\\n`AsyncBaseClientOpenTelemetry` supports the same arguments as `BaseClientOpenTelemetry`, but also accepts additional arguments regarding websockets:\\n\\n- `ws_root_context`: `Optional[Context] = None` - optional context added to root span for websocket connection\\n- `ws_root_span_name`: `str = \\"GraphQL Subscription\\"` - name of root span for websocket connection\\n\\n## Included comments\\n\\nIn `0.10` we changed the `include_comments` option to allow selection of the style of comments to be included at the top of each generated file. Available options:\\n\\n- `\\"timestamp\\"` - comment with generation timestamp\\n- `\\"stable\\"` - comment with message that this is a generated file (new default)\\n- `\\"none\\"` - no comments\\n\\nPrevious boolean support is deprecated and will be dropped in future releases, but for now `false` is mapped to `\\"none\\"` and `true` to `\\"timestamp\\"`.\\n\\n## `ExtractOperationsPlugin`\\n\\nVersion `0.10` adds `ExtractOperationsPlugin` to the `ariadne_codegen.contrib` package. It moves query strings from the generated client\'s methods into a separate `operations.py` module and changes the generated client to import these definitions instead. The generated module name can be customized by adding `operations_module_name=\\"custom_name\\"` to the `[tool.ariadne-codegen.operations]` section in config. E.g:\\n\\n```gql\\n# queries.graphql\\nquery getName {\\n  name\\n}\\n```\\n\\n`pyproject.toml`:\\n\\n```toml\\n[tool.ariadne-codegen]\\n...\\nqueries_path = \\"..../queries.graphql\\"\\nplugins = [\\"ariadne_codegen.contrib.extract_operations.ExtractOperationsPlugin\\"]\\n\\n[tool.ariadne-codegen.extract_operations]\\noperations_module_name = \\"custom_operations\\"\\n```\\n\\nUsing the above configuration will result in the `custom_operations.py` being generated with following contents:\\n\\n```python\\n__all__ = [\\"GET_NAME\\"]\\n\\nGET_NAME = \\"\\"\\"\\nquery getName {\\n  name\\n}\\n\\"\\"\\"\\n```\\n\\nThe generated client imports `GET_NAME` and uses it instead of defining it\'s own operation string:\\n\\n```python\\nfrom .custom_operations import GET_NAME\\nfrom .get_name import GetName\\n\\n\\ndef gql(q: str) -> str:\\n    return q\\n\\n\\nclass Client(AsyncBaseClient):\\n    async def get_name(self, **kwargs: Any) -> GetName:\\n        variables: Dict[str, object] = {}\\n        response = await self.execute(query=GET_NAME, variables=variables, **kwargs)\\n        data = self.get_data(response)\\n        return GetName.model_validate(data)\\n```\\n\\n## Overloading arguments per call\\n\\nEach generated client\'s method now accepts `**kwargs` and passes them to the `http_client.post`/`ws_connect` call made in the base client.\\n\\n## Escaping enum values which are Python keywords\\n\\nGraphQL enum values that are Python reserved keywords will now be suffixed with `_` in generated code, just like this is the case with generated field names for models, e.g:\\n\\n```gql\\nenum CustomEnum {\\n  valid\\n  import\\n}\\n```\\n\\n```python\\n# enums.py\\nfrom enum import Enum\\n\\n\\nclass CustomEnum(str, Enum):\\n    valid = \\"valid\\"\\n    import_ = \\"import\\"\\n```\\n\\n## Adding `__typename` to all models generated from unions and interfaces\\n\\nIn previous versions, models created from single-member unions or from interfaces that were queried without inline fragments didn\'t have a `__typename` field added. Now `0.10` includes this special field in all models generated from abstract types.\\n\\n## Nullable fields with nullable directives\\n\\n`0.10` fixes behaviour when the default `None` was not added to a nullable field with a `@skip`/`@include` directive.\\n\\n## Ignored `enums_module_name`\\n\\nCodegen now correctly reads `enums_module_name` and uses its value instead of always generating `enums.py`.\\n\\n## Changelog\\n\\n- Fixed generating results for nullable fields with nullable directives.\\n- Changed `include_comments` option to accept enum value, changed default to `\\"stable\\"`, deprecated boolean support. Added `get_file_comment` plugin hook.\\n- Changed `str_to_snake_case` utility to correctly handle capitalized words.\\n- Digits in Python names are now preceded by an underscore (breaking change).\\n- Fixed parsing of unions and interfaces to always add `__typename` to generated result models.\\n- Added escaping of enum values which are Python keywords by appending `_` to them.\\n- Fixed `enums_module_name` option not being passed to generators.\\n- Added additional base clients supporting the Open Telemetry tracing. Added `opentelemetry_client` config option.\\n- Changed generated client\'s methods to pass `**kwargs` to base client\'s `execute` and `execute_ws` methods (breaking change for custom base clients).\\n- Added `operation_definition` argument to `generate_client_method` plugin hook.\\n- Added `ExtractOperationsPlugin` that extracts operation strings from client methods to separate module.\\n- Added Python 3.12 to tested versions."},{"id":"/2023/11/08/ariadne-0-21-0","metadata":{"permalink":"/blog/2023/11/08/ariadne-0-21-0","source":"@site/blog/2023-11-08-ariadne-0-21-0.md","title":"Ariadne 0.21","description":"Ariadne 0.21 is now available.","date":"2023-11-08T00:00:00.000Z","tags":[],"readingTime":0.52,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne 0.21"},"unlisted":false,"prevItem":{"title":"Ariadne Codegen 0.10","permalink":"/blog/2023/11/15/ariadne-codegen-0-10"},"nextItem":{"title":"Ariadne Codegen 0.9","permalink":"/blog/2023/09/11/ariadne-codegen-0-9"}},"content":"Ariadne 0.21 is now available.\\n\\nThis is a maintenance release that updates Ariadne\'s dependencies and adds Python 3.12 to supported versions.\\n\\n\x3c!--truncate--\x3e\\n\\n## Subscriptions support in GraphiQL explorer\\n\\nAriadne\'s GraphiQL explorer template has been updated with configuration necessary for GraphQL subscriptions.\\n\\nYou will still need to add subscriptions support to your server in order for those to work, but you will no longer have to rely on custom `GraphiQL` configuration to enable those in explorer.\\n\\n## Changelog\\n\\n- Added Python 3.12 to tested versions.\\n- Updated integration tests to run against FastAPI 0.104, Flask 3.0 and Starlette 0.32.\\n- Updated GraphiQL explorer to initialize with support for subscriptions."},{"id":"/2023/09/11/ariadne-codegen-0-9","metadata":{"permalink":"/blog/2023/09/11/ariadne-codegen-0-9","source":"@site/blog/2023-09-11-ariadne-codegen-0-9.md","title":"Ariadne Codegen 0.9","description":"Ariadne Codegen 0.9 is now available!","date":"2023-09-11T00:00:00.000Z","tags":[],"readingTime":2.55,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne Codegen 0.9"},"unlisted":false,"prevItem":{"title":"Ariadne 0.21","permalink":"/blog/2023/11/08/ariadne-0-21-0"},"nextItem":{"title":"Ariadne Codegen 0.8","permalink":"/blog/2023/08/22/ariadne-codegen-0-8"}},"content":"Ariadne Codegen 0.9 is now available!\\n\\nThis release includes a number of fixes and improvements related to Pydantic v2.\\n\\n\x3c!--truncate--\x3e\\n\\n## Custom scalars\\n\\nIn the last refactoring of custom scalars, we introduced a bug that caused custom `parse` to be called on already correct objects within generated input models. To fix this, we are again changing the way custom scalars are represented in the generated package. We are removing `scalars.py`, the related option and plugin hooks. Instead, scalars will be represented directly as provided types.\\n\\n### Custom scalar without custom parse and serialize\\n\\n```toml\\n[tool.ariadne-codegen.scalars.SCALARA]\\ntype = \\"str\\"\\n```\\n\\nEach occurrence of `SCALARA` is represented as `str`.\\n\\n```toml\\n[tool.ariadne-codegen.scalars.DATETIME]\\ntype = \\"datetime.datetime\\"\\n```\\n\\nIn this case, `DATETIME` is treated in the same way, but the necessary import is added: `from datetime import datetime`.\\n\\n### Custom scalar with custom parse and serialize\\n\\n```toml\\n[tool.ariadne-codegen]\\n...\\nfiles_to_include = [\\".../type_b.py\\"]\\n\\n[tool.ariadne-codegen.scalars.SCALARB]\\ntype = \\".type_b.TypeB\\"\\nparse = \\".type_b.parse_b\\"\\nserialize = \\".type_b.serialize_b\\"\\n```\\n\\n`SCALARB` is represented as `TypeB`, but annotated according to its specific usage.\\n\\nIn models representing input types it will be annotated with `PlainSerializer`. This allows the user to create an input model with an existing `TypeB` instance, and serialization will take place automatically during query execution.\\n\\n```py\\n# inputs.py\\n\\nclass TestInput(BaseModel):\\n    value_b: Annotated[TypeB, PlainSerializer(serialize_b)]\\n```\\n\\n```py\\nb = TypeB(...)\\ntest_input = TestInput(value_b=b)\\n```\\n\\nIn result models `TypeB` will be annotated with `BeforeValidator`, which will use `parse_b` to deserialize `TypeB`\\\\`s data from the server.\\n\\n```py\\n# get_b.py\\n\\nclass GetB(BaseModel):\\n    query_b: Annotated[TypeB, BeforeValidator(parse_b)]\\n```\\n\\n```py\\nasync with Client(...) as client:\\n    b_data = await client.get_b()\\n\\nassert isinstance(b_data.query_b, TypeB)\\n```\\n\\nIf `SCALARB` is used as the type of the operation argument, it will be represented as an unannotated `TypeB`, but `serialize_b` will still be used in `variables` dict.\\n\\n```py\\n# client.py\\n\\nclass Client(AsyncBaseClient):\\n    async def test_mutation(self, value: TypeB) -> TestMutation:\\n        ...\\n        variables: Dict[str, object] = {\\n            \\"value\\": serialize_b(value),\\n        }\\n        ...\\n```\\n\\n## Pydantic\\\\`s warnings\\n\\nBy default, Pydantic gives a warning if the name of a field starts with `model_`, but throws an error if there is a collision with an existing attribute. In the last release we took care of the collisions and now we are changing the configuration of `BaseModel` to not give these warnings.\\n\\n## Nullable directives\\n\\nCodegen detects `@skip\' and `@include\' directives and marks fields with them as `Optional`, even if the type is not nullable. With pydantic v1 this worked fine, but with v2 there is an error if the response does not include a key for such a field. To maintain previous functionality, we will add an explicit `None` default for fields with one of these directives.\\n\\n## Operation string with nested inline fragments\\n\\nVersion `0.9` fixes the way we generate the operation string for the case where fragments are only used within an inline fragment. From now on we include these nested fragments.\\n\\n## Changelog\\n\\n- Fixed generating operation string for nested inline fragments.\\n- Removed scalars module. Changed generated models and client to use annotated types for custom scalars. Removed `scalars_module_name` option. Removed `generate_scalars_module`, `generate_scalars_cod`, `generate_scalar_annotation` and `generate_scalar_imports` plugin hooks.\\n- Removed pydantic warnings for fields with `model_` prefix.\\n- Fixed generating result types with nullable directives."},{"id":"/2023/08/22/ariadne-codegen-0-8","metadata":{"permalink":"/blog/2023/08/22/ariadne-codegen-0-8","source":"@site/blog/2023-08-22-ariadne-codegen-0-8.md","title":"Ariadne Codegen 0.8","description":"Ariadne Codegen 0.8 has been released!","date":"2023-08-22T00:00:00.000Z","tags":[],"readingTime":3.37,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne Codegen 0.8"},"unlisted":false,"prevItem":{"title":"Ariadne Codegen 0.9","permalink":"/blog/2023/09/11/ariadne-codegen-0-9"},"nextItem":{"title":"GraphQL Gathering EU in Berlin","permalink":"/blog/2023/07/10/graphql-gathering"}},"content":"Ariadne Codegen 0.8 has been released!\\n\\nThis release brings support for file uploads, pydantic v2 compliance, improved custom scalars handling, and few other features and fixes.\\n\\n\x3c!--truncate--\x3e\\n\\n## File uploads\\n\\nFrom now on, the default base client (sync or async) checks if any part of `variables` is an instance of `Upload`. If such an instance is found, the client sends a multipart request according to [GraphQL multipart request specification](https://github.com/jaydenseric/graphql-multipart-request-spec). `Upload` is a class that stores necessary data about the file:\\n\\n```python\\nclass Upload:\\n    def __init__(self, filename: str, content: IOBase, content_type: str):\\n        self.filename = filename\\n        self.content = content\\n        self.content_type = content_type\\n```\\n\\nIt is part of the generated client, and can be imported from it:\\n\\n```python\\nfrom {target_package_name} import Upload\\n```\\n\\nBy default, this class represents the graphql scalar `Upload`, but using custom scalar configuration, it can also be used for other scalars, e.g:\\n\\n```toml\\n[tool.ariadne-codegen.scalars.OTHERSCALAR]\\ntype = \\"Upload\\"\\n```\\n\\n## Pydantic v2\\n\\nVersion `0.8` changes the supported version of `pydantic` to `>=2.0.0,<3.0.0`. List of changes in the generated client:\\n\\n- Renamed `parse_obj` to `model_validate`.\\n- Renamed `dict` to `model_dump`.\\n- Preconfigured `BaseModel` uses `model_config` attribute instead of `Config` class.\\n- Renamed `update_forward_refs` to `model_rebuild`.\\n- Changed json encoder used by default base clients from `pydantic.json.pydantic_encoder` to `pydantic_core.to_jsonable_python`.\\n- Optional input fields now have an explicit default `None` value (if the schema doesn\'t specify another value).\\n\\n## Improved custom scalars\\n\\nIn `0.8`, we removed custom scalar logic from the preconfigured `BaseModel`, instead using pydantic\'s `BeforeValidator` and `PlainSerializer`. Now for every custom scalar provided in `pyproject.toml`, we generate an annotation that is used in generated arguments, results, and input models.\\n\\nExample of generated annotations:\\n\\n```toml\\n[tool.ariadne-codegen]\\n...\\nfiles_to_include = [\\".../type_b.py\\"]\\n\\n[tool.ariadne-codegen.scalars.SCALARA]\\ntype = \\"str\\"\\n\\n[tool.ariadne-codegen.scalars.DATETIME]\\ntype = \\"datetime.datetime\\"\\n\\n[tool.ariadne-codegen.scalars.SCALARB]\\ntype = \\".type_b.TypeB\\"\\nparse = \\".type_b.parse_b\\"\\nserialize = \\".type_b.serialize_b\\"\\n```\\n\\n```py\\n# scalars.py\\n\\nfrom datetime import datetime\\nfrom typing import Annotated\\n\\nfrom pydantic import BeforeValidator, PlainSerializer\\n\\nfrom .type_b import TypeB, parse_b, serialize_b\\n\\nSCALARA = str\\nDATETIME = datetime\\nSCALARB = Annotated[TypeB, PlainSerializer(serialize_b), BeforeValidator(parse_b)]\\n```\\n\\n`BaseModel` no longer depends on `scalars.py`, so now we can customize file name through the `scalars_module_name` option.\\n\\nScalars file has complellty different structure, so we removed `generate_scalars_parse_dict` and `generate_scalars_serialize_dict` plugin hooks. Instead, we introduced `generate_scalar_annotation` and `generate_scalar_imports` hooks.\\n\\n## Mixin directive\\n\\nAriadne Codegen 0.8 brings support for using the `mixin` directive on fragment definitions.\\n\\nFor example, given this fragment definition:\\n\\n```gql\\nfragment fragmentA on TypeA @mixin(from: \\".mixins\\", import: \\"MixinA\\") {\\n  fieldA\\n}\\n```\\n\\nGenerated `FragmentA` will inherit from `MixinA`:\\n\\n```python\\n# fragments.py\\n\\nfrom .base_model import BaseModel\\nfrom .mixins import MixinA\\n\\n\\nclass FragmentA(BaseModel, MixinA):\\n    field_a: int = Field(alias=\\"fieldA\\")\\n```\\n\\nAdditionally, from now on, the `mixin` directive will be excluded from the operation string, which is sent to a graphql server.\\n\\n## Field names\\n\\nVersion `0.8` introduces improvements in generating field names. It will append `_` to generated field name that would be already reserved by pydantic `BaseModel`\'s methods and attributes.\\n\\nWe also added handling of field names which consist only of underscores. It will be generated as `underscore_named_field_`. This behavior has the lowest priority in our name processing, so such a field\'s name can be altered by using an alias or utilizing `process_name` plugin hook.\\n\\n## Unified annotations\\n\\nWe changed the generated client to use `typing.Dict` and `typing.List` instead of `dict` and `list`. That way, used annotations don\'t prevent using a generated client with older versions of Python.\\n\\n## Changelog\\n\\n- Added support for `Upload` scalar. Added support for file uploads to `AsyncBaseClient` and `BaseClient`.\\n- Added validation of defined operations against the schema.\\n- Removed `mixin` directive from fragment string included in operation string sent to server.\\n- Added support for `mixin` directive on fragments definitions.\\n- Added support for fragments defined on subtype of field\'s type.\\n- Added default representation for a field name consisting only of underscores.\\n- Changed generated client and models to use pydantic v2.\\n- Changed custom scalars implementation to utilize pydantic\'s `BeforeValidator` and `PlainSerializer`. Added `scalars_module_name` option. Replaced `generate_scalars_parse_dict` and `generate_scalars_serialize_dict` with `generate_scalar_annotation` and `generate_scalar_imports` plugin hooks.\\n- Unified annotations in generated client to be compatible with python < 3.9.\\n- Fixed generating default values of input types from remote schemas.\\n- Changed generating of input and result field names to add `_` to names reserved by pydantic."},{"id":"/2023/07/10/graphql-gathering","metadata":{"permalink":"/blog/2023/07/10/graphql-gathering","source":"@site/blog/2023-07-10-graphql-gathering.md","title":"GraphQL Gathering EU in Berlin","description":"On the 4th of July Mirumee organized the GraphQL Gathering EU event together with The Guild, Saleor, Stellate, Escape and Hasura and support from the GraphQL Foundation.","date":"2023-07-10T00:00:00.000Z","tags":[],"readingTime":3.72,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"GraphQL Gathering EU in Berlin"},"unlisted":false,"prevItem":{"title":"Ariadne Codegen 0.8","permalink":"/blog/2023/08/22/ariadne-codegen-0-8"},"nextItem":{"title":"Ariadne 0.20.1","permalink":"/blog/2023/06/27/ariadne-0-20-1"}},"content":"On the 4th of July Mirumee organized the GraphQL Gathering EU event together with The Guild, Saleor, Stellate, Escape and Hasura and support from the GraphQL Foundation.\\n\\nThis event took place in Spielfeld Digital Hub in Berlin. It used the unconference format where instead of a series of talks the attendees first submit the topics for discussion, then those topics are divided between three time slots, and people join the designated tables to discuss those based on their own interests.\\n\\nBetween those tables and talks in corridors, we\'ve got a few takeaways that we\'ve found relevant to the Ariadne and GraphQL developers using it.\\n\\n\x3c!--truncate--\x3e\\n\\n## Performance metrics\\n\\nAriadne out of the box provides extensions for enabling the Open Telemetry and Open Tracing metrics. Those extensions work by wrapping in telemetry spans all calls of custom resolvers by the GraphQL engine.\\n\\nDuring the Gathering and and even before we\'ve heard an opinion that this approach to GraphQL metrics is not good, as it fills the APM software with tons of data which can be best described as noise. Better approach postulated is having developers themselves implement those traces explicitly in resolvers they like to track performance of.\\n\\nWe are not planning to drop OpenTelemetry (or OpenTracing) extensions from Ariadne, but we may consider updating the existing documentation with a short note that the out of the box approach may not be what they want. Maybe the solution to the issue of having a lot of noise in metrics would be the `fields` option on extensions, enabling developers to limit them only to selected fields?\\n\\n## Persisted queries\\n\\nOne of GraphQL\'s selling points is getting only the data you\'ve queried for. But what about situations when this control should be reversed, and it\'s the server which should decide on fields to return it? One could go about implementing a separate REST or RPC API on the side, but now they need to maintain two separate APIs which can be considered grossly suboptimal.\\n\\nOne proposed solution to this issue is introduction of persisted queries to GraphQL. The idea is if GraphQL server received `operationName` within its payload, but not `query`, it would look up the list of predefined operations on its side using the name received. It would then either return an error, or run a query from persisted operation. This enables GraphQL to act as both the GraphQL API, but also, when needed, an RPC server.\\n\\nThis idea requires further development as there are still questions that need answering like how should stored procedures be discoverable by the clients in introspections.\\n\\nAriadne could provide limited support for persisted queries inside the `ariadne.contrib` package.\\n\\n## Query complexity and cost checks\\n\\nOne discussion we\'ve had at the Gathering was about the query complexity and validation. Ariadne implements a query cost validator that will calculate query cost and prevent query execution when a predefined limit is exceeded. However this topic is little more, well, complex than setting those costs limits:\\n\\n- The biggest offenders are deep queries exploiting cycles within schema. Queries like products list -> category -> category products list -> reviewers -> reviewed products list. Prevent those from happening by avoiding fields returning lists outside of `Query` and `Mutation` results types.\\n- When in doubt, make fields returning lists paginated.\\n- Consider writing a GraphQL validator that limits the number of fields from `Query` or `Mutation` that can be queried in a single operation.\\n- Understand your users. Slow queries may not be the end of the world when they happen rarely. Maybe clients are looking for an easy way to pull a bunch of data to avoid waterfalls and you can improve the schema for them? Or maybe those clients are maintained by people sitting in the next room in the office and the issue may be resolved by asking nicely? Not every problem must be an engineering one.\\n\\n## Combining and composing APIs in single GraphQL schema\\n\\nFew weeks ago we launched the Ariadne GraphQL Proxy - our (prototype) solution for the problem of combining multiple APIs under a single GraphQL endpoint.\\n\\nDuring the Gathering we\'ve participated in a few discussions on the subject that gave us both ideas for future improvements to the API, but also understanding of priorities people have when implementing GraphQL gateways. We understand now people expect to be able to deploy those solutions as part of their CDN layer (like CloudFlare workers), to easily repackage OpenAPI compliant APIs as GraphQL, and to be able to quickly enable caching for hot paths."},{"id":"/2023/06/27/ariadne-0-20-1","metadata":{"permalink":"/blog/2023/06/27/ariadne-0-20-1","source":"@site/blog/2023-06-27-ariadne-0-20-1.md","title":"Ariadne 0.20.1","description":"Ariadne 0.20.1 has been released.","date":"2023-06-27T00:00:00.000Z","tags":[],"readingTime":0.16,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne 0.20.1"},"unlisted":false,"prevItem":{"title":"GraphQL Gathering EU in Berlin","permalink":"/blog/2023/07/10/graphql-gathering"},"nextItem":{"title":"Ariadne 0.20","permalink":"/blog/2023/06/21/ariadne-0-20-0"}},"content":"Ariadne 0.20.1 has been released.\\n\\n0.20.1 is a bugfix release that updates the GraphiQL template to use new URL for explorer plugin, if its enabled through the `explorer_plugin=True` option.\\n\\n\x3c!--truncate--\x3e"},{"id":"/2023/06/21/ariadne-0-20-0","metadata":{"permalink":"/blog/2023/06/21/ariadne-0-20-0","source":"@site/blog/2023-06-21-ariadne-0-20-0.md","title":"Ariadne 0.20","description":"Ariadne 0.20 has been released!","date":"2023-06-21T00:00:00.000Z","tags":[],"readingTime":3.91,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne 0.20"},"unlisted":false,"prevItem":{"title":"Ariadne 0.20.1","permalink":"/blog/2023/06/27/ariadne-0-20-1"},"nextItem":{"title":"Introducing Ariadne GraphQL Proxy","permalink":"/blog/2023/06/15/ariadne-graphql-proxy"}},"content":"Ariadne 0.20 has been released!\\n\\nThis release removes support for Python 3.7, adds Open Telemetry extension, deprecates Open Tracing and Apollo Tracing extensions.\\n\\nIt also includes bugfixes, new configuration options and updated GraphQL extensions that should perform better than previous ones in asynchronous servers.\\n\\n\x3c!--truncate--\x3e\\n\\n## Dropped Python 3.7 support\\n\\nPython 3.7 reaches end of life on 27 June 2023, but we are already experiencing some of Ariadne\'s tests failing for it due to the dependencies being ahead of us in dropping support.\\n\\nAriadne 0.20 drops support for Python 3.7. It may still work on Python 3.7, we will not test against it anymore and bugs and crashes specific to it will not be addressed.\\n\\n## New extensions implementation\\n\\n> **Note:** This is a breaking change. See the [middleware](/server/middleware) document for new guide for developers.\\n\\nIn the past Ariadne shipped with both synchronous and asynchronous GraphQL extensions. Our users reported that asynchronous extensions suffered from performance issues, which we\'ve attempted to resolve together with the community through extra configuration options enabling exclusion of specified fields from tracing, but this didn\'t lead to noticeable improvements.\\n\\nWe\'ve received an important tip from Christoph Zwerschke, developer of the `GraphQL-core 3` library which powers Ariadne\'s GraphQL implementation. In short, using asynchronous middleware resulted in every GraphQL field becoming asynchronous, even those excluded from tracing. Async/await in Python is generally fast enough, but it\'s overhead is non-negligible, especially for thousands of calls that happen during GraphQL query execution.\\n\\nAriadne 0.20 adds a benchmarks suite to the project. This suite allowed us to measure the performance hit on no-op asynchronous GraphQL extension (around 1.66 times slower than baseline query execution on Python 3.11).\\n\\nIn this release we have also dropped separate implementations for asynchronous and synchronous extensions. Ariadne\'s GraphQL extensions are now always synchronous, but in scenarios where the GraphQL resolver or its return value is asynchronous, those extensions return asynchronous closure for GraphQL\'s query executor to evaluate.\\n\\nQuick results from last benchmarks are:\\n\\n- 1x: GraphQL query execution without any extensions enabled.\\n- 1.1x slower: GraphQL query execution with single no-op extension enabled.\\n- 1.31x slower: GraphQL query execution with single extension enabled, using the `OpenTelemetry` extension.\\n\\nWe are happy with those gains and hope that our community will share our optimism at this change, even if the extensions system becomes more complex for extension developers.\\n\\nDocumentation for extensions and middleware was updated accordingly to explain the performance pitfall of using async extensions and new way to implement extensions that support both async and sync resolvers.\\n\\n### Migrating existing projects to new extensions\\n\\nTo update your project to use new extensions:\\n\\n- replace `OpenTracingSync` with `OpenTracing`.\\n- replace `opentracing_extension_sync` with `opentracing_extension`.\\n- replace `ApolloTracingSync` with `ApolloTracing`.\\n\\n`ExtensionSync` base class was also removed from Ariadne. Please use `Extension` as base class for custom extensions. See the [middleware](/server/middleware) document for the guide for new middlewares what support both async and sync execution.\\n\\n## Deprecated Open Tracing and Apollo Tracing\\n\\nThe Open Tracing standard has been deprecated and is superseded by the Open Telemetry.\\n\\nApollo Tracing was deprecated by Apollo, with new a APM solution available but not supported by Ariadne.\\n\\nBoth of those extensions will be dropped in future release of Ariadne.\\n\\n## New features\\n\\nAriadne\'s `ASGI` and `WSGI` applications now implement new `query_validator` option that enables customization of GraphQL query validation process.\\n\\nAdded `OpenTelemetry` and `opentelemetry_extension` extensions for enabling the Open Telemetry APM for GraphQL servers. Those are importable from `ariadne.tracing.opentelemetry`.\\n\\n## Bugs fixed\\n\\nFixed `ERROR` message in GraphQL-WS protocol having invalid payload type. This error occurred in a limited number of cases but was still a pain point for scenarios where Ariadne was used for GraphQL subscriptions.\\n\\nAriadne\'s GraphQL query cost validator did not handle the inline fragments. This was reported and fixed by our amazing friends at [Saleor](https://saleor.io)!\\n\\n`make_executable_schema` would raise an error if GraphQL SDL passed to it contained `field(arg: InputType = null)`. This was corrected.\\n\\nGraphiQL2\'s default template shipped with Ariadne used development builds of React.js. This template was updated to use production builds instead.\\n\\n## Changelog\\n\\n- Dropped support for Python 3.7.\\n- Added `OpenTelemetry` and `opentelemetry_extension` extension, importable form `ariadne.tracing.opentelemetry`.\\n- Added `query_validator` option to ASGI and WSGI `GraphQL` applications that enables customization of query validation step.\\n- Fixed `ERROR` message in GraphQL-WS protocol having invalid payload type.\\n- Fixed query cost validator incorrect handling of inline fragments.\\n- Fixed `make_executable_schema` error when `null` is used as default value for `input` typed field argument.\\n- Updated default GraphiQL2 template to use production build of React.js.\\n- Removed `ExtensionSync`. `Extension` now supports both async and sync contexts.\\n- Removed `OpenTracingSync` and `opentracing_extension_sync`. `OpenTracing` and `opentracing_extension` now support both async and sync contexts.\\n- Removed `ApolloTracingSync`. `ApolloTracing` now supports both async and sync contexts."},{"id":"/2023/06/15/ariadne-graphql-proxy","metadata":{"permalink":"/blog/2023/06/15/ariadne-graphql-proxy","source":"@site/blog/2023-06-15-ariadne-graphql-proxy.md","title":"Introducing Ariadne GraphQL Proxy","description":"Ariadne GraphQL Proxy is now available!","date":"2023-06-15T00:00:00.000Z","tags":[],"readingTime":2.44,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Introducing Ariadne GraphQL Proxy"},"unlisted":false,"prevItem":{"title":"Ariadne 0.20","permalink":"/blog/2023/06/21/ariadne-0-20-0"},"nextItem":{"title":"Ariadne Codegen 0.7","permalink":"/blog/2023/06/01/ariadne-codegen-0-7"}},"content":"Ariadne GraphQL Proxy is now available!\\n\\nAriadne GraphQL Proxy is a Python toolkit for implementing GraphQL APIs that can combine local and remote schemas into single graph.\\n\\nWhile this is a 0.1 release, plenty of utilities are already implemented:\\n\\n- Query router that splits GraphQL queries from clients into a valid subqueries for upstream GraphQL servers.\\n- Foreign keys and relations between schemas.\\n- Caching framework for both resolvers and parts of queries.\\n- Functions for schema manipulation that enable adding, replacing and removing existing GraphQL types, fields and resolvers.\\n\\nPlease note that Ariadne GraphQL Proxy is currently in technology preview stage.\\n\\n\x3c!--truncate--\x3e\\n\\n## Getting the code\\n\\nAriadne GraphQL Proxy from PyPi:\\n\\n```\\npip install ariadne-graphql-proxy\\n```\\n\\nSource code is hosted on [GitHub](https://github.com/mirumee/ariadne-graphql-proxy/tree/main).\\n\\n## Minimal proxy example\\n\\nFollowing code uses Ariadne and Ariadne GraphQL Proxy to create simple pass-through proxy for remote GraphQL API:\\n\\n```python\\nfrom ariadne.asgi import GraphQL\\nfrom ariadne_graphql_proxy import ProxySchema, get_context_value\\n\\nproxy_schema = ProxySchema()\\nproxy_schema.add_remote_schema(\\"https://example.com/first-graphql/\\")\\n\\nfinal_schema = proxy_schema.get_final_schema()\\n\\napp = GraphQL(\\n    final_schema,\\n    context_value=get_context_value,\\n    root_value=proxy_schema.root_resolver,\\n)\\n```\\n\\n## Combining schemas\\n\\nIf multiple schemas are added to `ProxySchema`, those are combined with latter fields replacing former\'s:\\n\\n```python\\nfrom ariadne.asgi import GraphQL\\nfrom ariadne_graphql_proxy import ProxySchema, get_context_value\\n\\nfrom myapp.schema import local_schema\\n\\nproxy_schema = ProxySchema()\\nproxy_schema.add_remote_schema(\\"https://example.com/first-graphql/\\")\\nproxy_schema.add_remote_schema(\\"https://example.com/other-graphql/\\")\\nproxy_schema.add_schema(local_schema)\\n\\nfinal_schema = proxy_schema.get_final_schema()\\n\\napp = GraphQL(\\n    final_schema,\\n    context_value=get_context_value,\\n    root_value=proxy_schema.root_resolver,\\n)\\n```\\n\\nAriadne GraphQL Proxy will split root GraphQL query received from clients into separate queries it then will route to other services.\\n\\n## Caching fields\\n\\nAriadne GraphQL Proxy implements two caching strategies for GraphQL resolvers:\\n\\n- simple strategy where resolver\'s return value is cached based on its arguments.\\n- strategy where resolver\'s return value is cached based on its arguments and queried subfields.\\n\\nAdditional cache schemes based on contents of GraphQL context are also supported.\\n\\nBasic caching framework with swap-able cache backends is implemented, with example in-memory backend.\\n\\nSee [cache guide](https://github.com/mirumee/ariadne-graphql-proxy/blob/main/GUIDE.md#cache-framework) for more detailed information.\\n\\n## Relations\\n\\nAriadne GraphQL Proxy supports relations spanning multiple schemas. Those relations enable one schema to define mutation returning a type which\'s definition lives in other schema.\\n\\nSee the [foreign keys guide](https://github.com/mirumee/ariadne-graphql-proxy/blob/main/GUIDE.md#foreign-keys).\\n\\n## Further reading\\n\\nNo full documentation for Ariadne GraphQL Proxy currently exists, but for available use cases see the [developer guide document](https://github.com/mirumee/ariadne-graphql-proxy/blob/main/GUIDE.md).\\n\\n## Future plans\\n\\nThis is only a beginning of the Ariadne GraphQL Proxy\'s story. We\'ve got plenty of new ideas and insights from the experience of building the 0.1 version alone. In coming weeks and months we will experiment with different scenarios and setups to see what improvements and new features can be added to project.\\n\\nWe would also like to invite other Python developers to join us. We welcome feedback, bug reports and feature requests on [our GitHub](https://github.com/mirumee/ariadne-graphql-proxy/issues)."},{"id":"/2023/06/01/ariadne-codegen-0-7","metadata":{"permalink":"/blog/2023/06/01/ariadne-codegen-0-7","source":"@site/blog/2023-06-01-ariadne-codegen-0-7.md","title":"Ariadne Codegen 0.7","description":"Ariadne Codegen 0.7 is now available!","date":"2023-06-01T00:00:00.000Z","tags":[],"readingTime":5.25,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne Codegen 0.7"},"unlisted":false,"prevItem":{"title":"Introducing Ariadne GraphQL Proxy","permalink":"/blog/2023/06/15/ariadne-graphql-proxy"},"nextItem":{"title":"Ariadne Codegen 0.6","permalink":"/blog/2023/04/18/ariadne-codegen-0-6"}},"content":"Ariadne Codegen 0.7 is now available!\\n\\nThis release brings support for subscriptions, changes how fragments are represented in generated code, introduces the `ShorterResultsPlugin` plugin developed by our amazing community, and more features and fixes.\\n\\n\x3c!--truncate--\x3e\\n\\n## Subscriptions\\n\\nVersion `0.7` introduces support for subscriptions. We generate them as async generators, which means that we don\'t support subscriptions when the generated client is not async (`async_client` is set to `false`).\\n\\nFor example, given the following operation:\\n\\n```gql\\nsubscription GetUsersCounter {\\n  usersCounter\\n}\\n```\\n\\nGenerated client will have following method:\\n\\n```py\\n    async def get_users_counter(self) -> AsyncIterator[GetUsersCounter]:\\n        query = gql(\\n            \\"\\"\\"\\n            subscription GetUsersCounter {\\n              usersCounter\\n            }\\n            \\"\\"\\"\\n        )\\n        variables: dict[str, object] = {}\\n        async for data in self.execute_ws(query=query, variables=variables):\\n            yield GetUsersCounter.parse_obj(data)\\n```\\n\\nOur default async base client uses [websockets](https://github.com/python-websockets/websockets) package and implements [graphql-transport-ws](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md) subprotocol.\\n\\nRequired dependencies can be installed with pip:\\n\\n```\\n$ pip install ariadne-codegen[subscriptions]\\n```\\n\\n## Fragments\\n\\nIn previous versions of Codegen fragments were \\"unpacked\\" in queries. For example, given the following operations:\\n\\n```gql\\nquery GetA {\\n  getTypeA {\\n    ...FragmentA\\n  }\\n}\\n\\nquery ListA {\\n  listTypeA {\\n    ...FragmentA\\n  }\\n}\\n\\nfragment FragmentA on TypeA {\\n  id\\n  name\\n}\\n```\\n\\nGenerated `get_a.py` and `list_a.py` files had types looking like this:\\n\\n```py\\n# get_a.py\\n\\nclass GetA(BaseModel):\\n    get_type_a: \\"GetAGetTypeA\\" = Field(alias=\\"GetTypeA\\")\\n\\n\\nclass GetAGetTypeA(BaseModel):\\n    id: str\\n    name: str\\n```\\n\\n```py\\n# list_a.py\\n\\nclass ListA(BaseModel):\\n    list_type_a: List[\\"ListAListTypeA\\"] = Field(alias=\\"ListTypeA\\")\\n\\n\\nclass ListAListTypeA(BaseModel):\\n    id: str\\n    name: str\\n```\\n\\nBoth of these operations use the same `FragmentA` to represent `TypeA`, but generated models didn\'t reflect that.\\n\\nTo make working with fragments easier, in Ariadne Codegen 0.7 we are changing this behavior. Instead of unpacking fragments, we generate separate models from them and use those as mixins. The above operation will now result in 3 files being generated: `get_a.py`, `list_a.py`, and `fragments.py`\\n\\n```py\\n# get_a.py\\n\\nclass GetA(BaseModel):\\n    get_type_a: \\"GetAGetTypeA\\" = Field(alias=\\"GetTypeA\\")\\n\\n\\nclass GetAGetTypeA(FragmentA):\\n    pass\\n```\\n\\n```py\\n# list_a.py\\n\\nclass ListA(BaseModel):\\n    list_type_a: List[\\"ListAListTypeA\\"] = Field(alias=\\"ListTypeA\\")\\n\\n\\nclass ListAListTypeA(FragmentA):\\n    pass\\n```\\n\\n```py\\n# fragments.py\\n\\nclass FragmentA(BaseModel):\\n    id: str\\n    name: str\\n```\\n\\nWith this change you can use fragments as reusable types in your Python logic using the client, eg. `def process_a(a: FragmentA)...`. New `fragments.py` consists of fragments collected from all parsed operations.\\n\\n### Unions and Interfaces\\n\\nThere is an exception from new fragments behaviour. If a fragment represents `Union` then we unpack it as before:\\n\\n```gql\\nquery getAnimal {\\n  animal {\\n    ...AnimalData\\n  }\\n}\\n\\nfragment AnimalData on AnimalInterface {\\n  name\\n  ... on Dog {\\n    dogField\\n  }\\n  ... on Cat {\\n    catField\\n  }\\n}\\n```\\n\\nFor the above fragment, this Python code will be generated:\\n\\n```py\\nclass GetAnimal(BaseModel):\\n    animal: Union[\\n        \\"GetAnimalAnimalAnimalInterface\\", \\"GetAnimalAnimalDog\\", \\"GetAnimalAnimalCat\\"\\n    ] = Field(discriminator=\\"typename__\\")\\n\\n\\nclass GetAnimalAnimalAnimalInterface(BaseModel):\\n    typename__: Literal[\\"AnimalInterface\\", \\"Fish\\"] = Field(alias=\\"__typename\\")\\n    name: str\\n\\n\\nclass GetAnimalAnimalDog(BaseModel):\\n    typename__: Literal[\\"Dog\\"] = Field(alias=\\"__typename\\")\\n    name: str\\n    dog_field: str = Field(alias=\\"dogField\\")\\n\\n\\nclass GetAnimalAnimalCat(BaseModel):\\n    typename__: Literal[\\"Cat\\"] = Field(alias=\\"__typename\\")\\n    name: str\\n    cat_field: str = Field(alias=\\"catField\\")\\n```\\n\\n## `ShorterResultsPlugin`\\n\\nIn version 0.7 we are including `ShorterResultsPlugin` developed by our community. It can be used when operations have only one top-level field. For example, given the following operation:\\n\\n```gql\\nquery GetUser($userId: ID!) {\\n  user(id: $userId) {\\n    id\\n  }\\n}\\n```\\n\\nFrom this operation, the generated method looks like this:\\n\\n```py\\nasync def get_user(self, user_id: str) -> GetUser:\\n    query = gql(\\n        \\"\\"\\"\\n        query GetUser($userId: ID!) {\\n            user(id: $userId) {\\n                id\\n            }\\n        }\\n        \\"\\"\\"\\n    )\\n    variables: dict[str, object] = {\\"userId\\": user_id}\\n    response = await self.execute(query=query, variables=variables)\\n    data = self.get_data(response)\\n    return GetUser.parse_obj(data)\\n```\\n\\nTo get the value of `user`, we need to always get it by attribute, eg. `await get_user(\\"1\\").user`. By using `ShorterResultsPlugin` our `get_user` returns the value of `user` directly.\\n\\n```toml\\n[tool.ariadne-codegen]\\n...\\nplugins = [\\"ariadne_codegen.contrib.shorter_results.ShorterResultsPlugin\\"]\\n```\\n\\n```py\\nasync def get_user(self, user_id: str) -> GetUserUser:\\n    ...\\n    return GetUser.parse_obj(data).user\\n\\n```\\n\\n## Discriminated unions\\n\\nTo ensure that data is represented as a correct class we use pydantic\'s [discriminated unions](https://docs.pydantic.dev/dev-v2/usage/types/unions/#discriminated-unions-aka-tagged-unions). We add `__typename` to queries with unions and then use its value as `discriminator`. Let\'s take an example schema and query:\\n\\n```gql\\ntype Query {\\n  animal: Animal!\\n}\\n\\ninterface Animal {\\n  name: String!\\n}\\n\\ntype Dog implements Animal {\\n  name: String!\\n  dogField: String!\\n}\\n\\ntype Cat implements Animal {\\n  name: String!\\n  catField: String!\\n}\\n\\ntype Fish implements Animal {\\n  name: String!\\n}\\n```\\n\\n```gql\\nquery GetAnimal {\\n  animal {\\n    name\\n    ... on Dog {\\n      dogField\\n    }\\n    ... on Cat {\\n      catField\\n    }\\n  }\\n}\\n```\\n\\nFrom this query and operation, we generate following types:\\n\\n```py\\nclass GetAnimal(BaseModel):\\n    animal: Union[\\n        \\"GetAnimalAnimalAnimal\\", \\"GetAnimalAnimalDog\\", \\"GetAnimalAnimalCat\\"\\n    ] = Field(discriminator=\\"typename__\\")\\n\\n\\nclass GetAnimalAnimalAnimal(BaseModel):\\n    typename__: Literal[\\"Animal\\", \\"Fish\\"] = Field(alias=\\"__typename\\")\\n    name: str\\n\\n\\nclass GetAnimalAnimalDog(BaseModel):\\n    typename__: Literal[\\"Dog\\"] = Field(alias=\\"__typename\\")\\n    name: str\\n    dog_field: str = Field(alias=\\"dogField\\")\\n\\n\\nclass GetAnimalAnimalCat(BaseModel):\\n    typename__: Literal[\\"Cat\\"] = Field(alias=\\"__typename\\")\\n    name: str\\n    cat_field: str = Field(alias=\\"catField\\")\\n```\\n\\nWe added `typename__` to this query, and by its value pydantic determines which model to choose.\\n\\n## Leading underscores\\n\\nAriadne Codegen 0.7 will remove leading `_` from field names. Fields with `_` are ignored by pydantic and it is impossible to save the value of such fields.\\n\\n## Removal of `mixin` directive from operation sent to a server\\n\\nWe support a custom `mixin` directive, which allows extending of generated types. In 0.7 we are removing it from the operation string included in generated client\'s methods. This directive is only used in the process of generation and caused servers to return errors because of an unknown directive.\\n\\n## `process_schema` plugin hook\\n\\nPlugins can now define a `process_schema` hook to change schema before Codegen uses it for generation. From now on we allow invalid schemas to be parsed from files or URLs, and then we call this plugin hook. After `process_schema` is finished, the processed schema must pass `graphql.assert_valid_schema` validation.\\n\\nFor example, it can be used to add Apollo Federation directives definitions:\\n\\n```py\\nclass MyPlugin:\\n    def process_schema(self, schema: GraphQLSchema) -> GraphQLSchema:\\n        extends_directive_def = GraphQLDirective(...)\\n        schema.directives += (extends_directive_def, )\\n\\n        return schema\\n```\\n\\n## Changelog\\n\\n- Added support for subscriptions as async generators.\\n- Changed how fragments are handled to generate separate module with fragments as mixins.\\n- Fixed `ResultTypesGenerator` to trigger `generate_result_class` for each result model.\\n- Changed processing of models fields to trim leading underscores.\\n- Added `ShorterResultsPlugin` to standard plugins.\\n- Fixed handling of inline fragments inside other fragments.\\n- Changed generated unions to use pydantic\'s discriminated unions feature.\\n- Replaced HTTPX\'s `json=` serializer for query payloads with pydantic\'s `pydantic_encoder`.\\n- Removed `mixin` directive from operation string sent to server.\\n- Fixed `ShorterResultsPlugin` that generated faulty code for discriminated unions.\\n- Changed generator to ignore unused fragments which should be unpacked in queries.\\n- Changed type hints for parse and serialize methods of scalars to `typing.Any`.\\n- Added `process_schema` plugin hook."},{"id":"/2023/04/18/ariadne-codegen-0-6","metadata":{"permalink":"/blog/2023/04/18/ariadne-codegen-0-6","source":"@site/blog/2023-04-18-ariadne-codegen-0-6.md","title":"Ariadne Codegen 0.6","description":"Ariadne Codegen 0.6 has been released!","date":"2023-04-18T00:00:00.000Z","tags":[],"readingTime":1.55,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne Codegen 0.6"},"unlisted":false,"prevItem":{"title":"Ariadne Codegen 0.7","permalink":"/blog/2023/06/01/ariadne-codegen-0-7"},"nextItem":{"title":"Ariadne Codegen 0.5","permalink":"/blog/2023/04/05/ariadne-codegen-0-5"}},"content":"Ariadne Codegen 0.6 has been released!\\n\\nThis release brings further improvements and fixes to issues reported to us by our amazing community. It also adds `process_name` plugin hook as an escape hatch for developers not happy with Python names created for GraphQL schema items.\\n\\n\x3c!--truncate--\x3e\\n\\n## Changed scalars setting\\n\\nIn previous versions of Codegen custom scalars were configured using two callables and a a module to import them from:\\n\\n```\\nserialize = \\"serialize_datetime\\"\\nparse = \\"parse_datetime\\"\\nimport = \\"datetime_scalar\\"\\n```\\n\\nCodegen 0.6 simplifies this to two full paths to callables:\\n\\n```\\nserialize = \\"datetime_scalar.serialize_datetime\\"\\nparse = \\"datetime_scalar.parse_datetime\\"\\n```\\n\\nOld approach is still supported but is considered deprecated and will stop working in future release.\\n\\n## Support for GraphQL names that are Python keywords\\n\\nAriadne Codegen 0.6 will append `_` to generated Python names that would be valid Python keywords otherwise.\\n\\nFor example, given following type:\\n\\n```\\ntype Example {\\n    in: String\\n}\\n```\\n\\nThe `in` field will be represented as following declaration in generated Python code:\\n\\n```python\\nclass MyExampleResult:\\n    in_: Optional[str] = Field(alias=\\"in\\")\\n```\\n\\n## Unset and `None`\\n\\nA lot of GraphQL servers differentiate between inputs fields not being set and them being set to empty value (`None`/`null`).\\n\\nAriadne Codegen 0.6 introduces new `Unset` type and defaults to not setting optional fields on inputs sent in queries `variables`.\\n\\n## `process_name` plugin hook\\n\\nPlugins can now define `process_name` hook to customize the generation of Python names for schema items:\\n\\n```python\\nfrom typing import Optional\\n\\nfrom graphql import Node, ObjectTypeDefinitionNode\\n\\n\\nclass MyPlugin:\\n    def process_name(self, name: str, node: Optional[Node] = None) -> str:\\n        if isinstance(node, ObjectTypeDefinitionNode):\\n            ...  # return custom name for object type\\n\\n        return name  # return name generated by from Ariadne Codegen\\n```\\n\\n## Changelog\\n\\n- Changed logic how custom scalar imports are generated. Deprecated `import_` key.\\n- Added escaping of GraphQL names which are Python keywords by appending `_` to them.\\n- Fixed parsing of list variables.\\n- Changed base clients to remove unset arguments and input fields from variables payload.\\n- Added `process_name` plugin hook."},{"id":"/2023/04/05/ariadne-codegen-0-5","metadata":{"permalink":"/blog/2023/04/05/ariadne-codegen-0-5","source":"@site/blog/2023-04-05-ariadne-codegen-0-5.md","title":"Ariadne Codegen 0.5","description":"Ariadne Codegen 0.5 is now available!","date":"2023-04-05T00:00:00.000Z","tags":[],"readingTime":1.56,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne Codegen 0.5"},"unlisted":false,"prevItem":{"title":"Ariadne Codegen 0.6","permalink":"/blog/2023/04/18/ariadne-codegen-0-6"},"nextItem":{"title":"Ariadne 0.19.1","permalink":"/blog/2023/03/28/ariadne-0-19-1"}},"content":"Ariadne Codegen 0.5 is now available!\\n\\nThis release brings multiple bunch of new options and improvements to the `ariande-codegen` command.\\n\\n\x3c!--truncate--\x3e\\n\\n## Disabling SSL verification for remote schemas\\n\\nNew `remote_schema_verify_ssl` option can now be used to control SSL certificate verification during the remote schema download.\\n\\nThis option is enabled by default and should only be disabled with good reasons, like when you are running calls over the internal network that uses self-signed certificates.\\n\\n## Support for custom names of operation types\\n\\n`ariadne-codegen` previously assumed that root types in GraphQL schema are always named `Query` and `Mutation`, but we were informed that this is not always the case as for example [Hasura](https://hasura.io/) defaults to `query_root` and `mutation_root` instead.\\n\\nStarting with 0.5 release operation roots are instead resolved from `Schema` types\'s `query` and `mutation` fields.\\n\\n## Generating Python declarations for GraphQL schemas\\n\\n`ariadne-codegen` has new `graphqlschema` mode which generates a Python file containing complete declaration of GraphQL schema as `graphql.GraphQLSchema` instance.\\n\\nThis schema can be further converted into a string using the `graphql.print_schema` utility.\\n\\n## Unlocked dependencies used in development\\n\\nVersions of `black`, `isort`, `autoflake` and other dependencies used by code generation logic as final processing step were previously pinned, forcing projects that used `ariadne-codegen` as their dependency to pin those themselves.\\n\\nWe\'ve unpinned those packages versions in `ariadne-codegen`, assuming that its better for project owners do use `ariadne-codegen` version used by them compatible with their dev deps than for us to force them into specific versions.\\n\\n## Changelog\\n\\n- Added generation of GraphQL schema\'s Python representation.\\n- Fixed annotations for lists.\\n- Fixed support of custom operation types names.\\n- Unlocked versions of black, isort, autoflake and dev dependencies\\n- Added `remote_schema_verify_ssl` option.\\n- Changed how default values for inputs are generated to handle potential cycles.\\n- Fixed `BaseModel` incorrectly calling `parse` and `serialize` methods on entire list instead of its items for `List[Scalar]`."},{"id":"/2023/03/28/ariadne-0-19-1","metadata":{"permalink":"/blog/2023/03/28/ariadne-0-19-1","source":"@site/blog/2023-03-28-ariadne-0-19-1.md","title":"Ariadne 0.19.1","description":"Ariadne 0.19.1 has been released.","date":"2023-03-28T00:00:00.000Z","tags":[],"readingTime":0.14,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne 0.19.1"},"unlisted":false,"prevItem":{"title":"Ariadne Codegen 0.5","permalink":"/blog/2023/04/05/ariadne-codegen-0-5"},"nextItem":{"title":"Ariadne 0.19","permalink":"/blog/2023/03/27/ariadne-0-19"}},"content":"Ariadne 0.19.1 has been released.\\n\\n0.19.1 is a bugfix release that includes `graphql` files with definitions required by Apollo Federation component, which were missing from 0.19 release.\\n\\n\x3c!--truncate--\x3e"},{"id":"/2023/03/27/ariadne-0-19","metadata":{"permalink":"/blog/2023/03/27/ariadne-0-19","source":"@site/blog/2023-03-27-ariadne-0-19.md","title":"Ariadne 0.19","description":"Ariadne 0.19 is now out!","date":"2023-03-27T00:00:00.000Z","tags":[],"readingTime":1.79,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne 0.19"},"unlisted":false,"prevItem":{"title":"Ariadne 0.19.1","permalink":"/blog/2023/03/28/ariadne-0-19-1"},"nextItem":{"title":"Ariadne Codegen 0.4","permalink":"/blog/2023/03/20/ariadne-codegen-0-4"}},"content":"Ariadne 0.19 is now out!\\n\\nAriadne 0.19 is a feature release that brings improvements for GraphQL inputs and enums. It also includes improvements to the Apollo Federation implementation contributed by the community.\\n\\n\x3c!--truncate--\x3e\\n\\n## Input handling improvements\\n\\nAriadne now provides an `InputType` class which can be used to setup custom Python representation of GraphQL input types and mappings between input\'s fields and original Python directory with values:\\n\\n```python\\n# Store input field\'s values under custom dict keys\\nInputType(\\n    \\"InputName\\",\\n    out_names={\\n        \\"isClosed\\": \\"is_closed\\",\\n        \\"isActive\\": \\"requires_activation\\",\\n    },\\n)\\n```\\n\\n```python\\n@dataclass\\nclass UserInput:\\n    name: str\\n    email: str\\n    requires_activation: Optional[bool] = None\\n\\n\\nInputType(\\n    \\"UserInput\\",\\n    # Logic for converting input\'s data to Python repr is customizable\\n    lambda data: UserInput(**data),\\n    {\\"isActive\\": \\"requires_activation\\"},\\n)\\n```\\n\\n## Enum handling improvements\\n\\nAriadne already provides an `EnumType` class which can be used to assign custom Python values to GraphQL enums:\\n\\n```python\\nclass TaskPriority(enum.IntEnum):\\n    VERY_LOW = 0\\n    LOW = 1\\n    STANDARD = 2\\n    HIGH = 3\\n    URGENT = 4\\n\\n\\nEnumType(\\"TaskPriority\\", TaskPriority)\\n```\\n\\n`make_executable_schema` now accepts `Enum`s directly and attempts to associate them with their GraphQL counterparts on their name. In above case if there\'s already an enum in GraphQL schema named `TaskPriority`, `TaskPriority` can be passed to schema directly.\\n\\n`EnumType` still remains useful in situations when enum\'s names are different between Python and GraphQL schema, and when enum\'s Python values are set using `dict`.\\n\\n## Federation improvements\\n\\nOur community has contributed few improvements to Ariadne\'s `contrib.federation` package, providing utilities for writing Apollo Federation subgraphs.\\n\\nThanks to Alexis Rhote\'s contributions, `make_federated_schema` now supports `convert_names_case` just like how `make_executable_schema` does.\\n\\nDan Lepadatu has contributed a support for `@interfaceObject` directive.\\n\\nDan Ring has contributed an improvements to Ariadne\'s federated schema processing logic, making it more tight and less error prone.\\n\\nWe would also like to give a shout out to Dariusz Kuc for keeping an eye on Ariadne\'s Federation support, and to Patrick Arminio for contributing template for federalable [Ariadne Fast API service](https://github.com/mirumee/subgraph-template-ariadne-fastapi).\\n\\n## CHANGELOG\\n\\n- Added `InputType` for setting Python representations of GraphQL Input types\\n- Added support for passing `Enum` types directly to `make_executable_schema`\\n- Added `convert_names_case` option to `make_federated_schema`.\\n- Added support for the `@interfaceObject` directive in Apollo Federation.\\n- Fixed federation support for directives without surrounding whitespace."},{"id":"/2023/03/20/ariadne-codegen-0-4","metadata":{"permalink":"/blog/2023/03/20/ariadne-codegen-0-4","source":"@site/blog/2023-03-20-ariadne-codegen-0-4.md","title":"Ariadne Codegen 0.4","description":"Ariadne Codegen 0.4 is now available!","date":"2023-03-20T00:00:00.000Z","tags":[],"readingTime":0.97,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne Codegen 0.4"},"unlisted":false,"prevItem":{"title":"Ariadne 0.19","permalink":"/blog/2023/03/27/ariadne-0-19"},"nextItem":{"title":"Ariadne 0.18.1","permalink":"/blog/2023/02/22/ariadne-0-18-1"}},"content":"Ariadne Codegen 0.4 is now available!\\n\\n\x3c!--truncate--\x3e\\n\\nThis release deprecates `[ariadne-codegen]` as configuration section used by the library. New section used is `[tool.ariadne-codegen]` which follows PEP 518. While old name will still be support for a while, you are recommended to update your `pyproject.toml` to use new section name.\\n\\nNew in this release is also a plugin system, enabling better customization of generated Python AST for developers who need it. See the [plugins guide](https://github.com/mirumee/ariadne-codegen/blob/0.4.0/PLUGINS.md) for examples and reference.\\n\\nFinally, `ariadne-codegen` now accepts `--config` option, enabling usage of custom named configuration files and usage of multiple separate configuration files for generating clients for APIs within single project.\\n\\n## Changelog\\n\\n- Fixed generating models from interfaces with inline fragments.\\n- Added default `None` values for generated methods optional arguments.\\n- Added basic plugin system.\\n- Added `InitFileGenerator`, `EnumsGenerator`, `ClientGenerator` and `ArgumentsGenerator` plugin hooks.\\n- Added `InputTypesGenerator` and `ResultTypesGenerator` plugin hooks.\\n- Added `ScalarsDefinitionsGenerator` and `PackageGenerator` plugin hooks.\\n- Added support for `[tool.ariadne-codegen]` section key. Deprecated `[ariadne-codegen]`.\\n- Added support for environment variables to remote schema headers values.\\n- Added `--config` argument to `ariadne-codegen` script, to support reading configuration from custom path."},{"id":"/2023/02/22/ariadne-0-18-1","metadata":{"permalink":"/blog/2023/02/22/ariadne-0-18-1","source":"@site/blog/2023-02-22-ariadne-0-18-1.md","title":"Ariadne 0.18.1","description":"Ariadne 0.18.1 has been released.","date":"2023-02-22T00:00:00.000Z","tags":[],"readingTime":0.12,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne 0.18.1"},"unlisted":false,"prevItem":{"title":"Ariadne Codegen 0.4","permalink":"/blog/2023/03/20/ariadne-codegen-0-4"},"nextItem":{"title":"Ariadne 0.18","permalink":"/blog/2023/02/21/ariadne-0-18"}},"content":"Ariadne 0.18.1 has been released.\\n\\n0.18.1 is a bugfix release that fixes types annotation on `EnumType`\'s constructor, Mypy errors on correct use.\\n\\n\x3c!--truncate--\x3e"},{"id":"/2023/02/21/ariadne-0-18","metadata":{"permalink":"/blog/2023/02/21/ariadne-0-18","source":"@site/blog/2023-02-21-ariadne-0-18.md","title":"Ariadne 0.18","description":"Ariadne shipped!","date":"2023-02-21T00:00:00.000Z","tags":[],"readingTime":5.8,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne 0.18"},"unlisted":false,"prevItem":{"title":"Ariadne 0.18.1","permalink":"/blog/2023/02/22/ariadne-0-18-1"},"nextItem":{"title":"Announcing Ariadne Codegen!","permalink":"/blog/2023/02/02/ariadne-codegen"}},"content":"![Ariadne shipped!](assets/ariadne-0-18.jpg)\\n\\nAriadne 0.18 is now available! \u{1F680}\\n\\n0.18 is a feature release bringing multiple new features and improvements to Ariadne.\\n\\n\x3c!--truncate--\x3e\\n\\n## New GraphQL explorers\\n\\nIn previous Ariadne versions GraphQL explorer was hardcoded into the `GraphQL` server. To customize or replace the GraphQL Playground, one had to create custom class inheriting from `GraphQL` and implement their own `render_playground` method.\\n\\nIn Ariadne 0.18 GraphQL explorers have been made into separate Python classes. To customize the explorer in your server, pass instance of `Explorer` class implementing the GraphQL explorer UI you wish to use to the `explorer` option of `GraphQL` class.\\n\\nAriadne 0.18 ships with following GraphQL explorers out of the box:\\n\\n- GraphiQL 2\\n- Apollo Sandbox\\n- GraphQL Playground\\n\\nIn addition to implementing GraphQL explorers, those classes also provide different configuration options specific to their explorer.\\n\\nImplementing custom explorers is also supported!\\n\\nSee [the explorers guide](/server/explorers) for more details.\\n\\n### GraphiQL 2 as default GraphQL explorer\\n\\nBecause GraphQL Playground is officially no longer maintainer, [GraphiQL 2](https://github.com/graphql/graphiql) is now a default GraphQL explorer in Ariadne.\\n\\nGraphQL Playground is still available as an option.\\n\\n### Disabling the GraphQL explorer\\n\\nAriadne now provides the `ExplorerHttp405` GraphQL explorer which actually doesn\'t implement any UI at all, but instead triggers the `405 not allowed` response from the GraphQL server when explorer is accessed.\\n\\nThis is now the official way for disabling the GraphQL explorer UI in Ariadne.\\n\\n## New approach for managing different name cases between Python and GraphQL\\n\\nLeading naming convention in Python is `PascalCase` for types and `snake_case` for attributes (and frequently dict keys). This causes conflict with GraphQL where fields are usually named using the `camelCase`.\\n\\nAriadne ships with `snake_case_fallback_resolvers` and `convert_kwargs_to_snake_case` utilities to create this convention automatically in places where no explicit convention was already specified by developer, namely in custom resolvers.\\n\\nAriadne 0.18 adds `convert_schema_names` option to `make_executable_schema` that sets this conversion automatically for entire schema:\\n\\n- Fields without custom resolvers set on them\\n- Fields arguments\\n- Inputs fields\\n\\nSee the [name case conversion guide](/server/case-conversion) to learn more about this feature.\\n\\nSee the [reference](/server/api-reference#convert_camel_case_to_snake) for details on algorithm used by Ariadne to convert `camelCase` names to `snake_cases`.\\n\\n`snake_case_fallback_resolvers`, `convert_kwargs_to_snake_case` as well as `FallbackResolversSetter` and `fallback_resolvers` are now deprecated and will be removed from Ariadne in future version. We understand that migrating away from them may take a while for Ariadne\'s users, so we plan to keep those for few more months at least before announcing the final version those will be part of.\\n\\n## Better integration story for FastAPI and Starlette\\n\\nInstances of the `asgi.GraphQL` class now expose the `handle_request` and `handle_websocket` methods which can be called from Starlette\'s and FastAPI\'s routes. This alternative approach to `mount`ing the `GraphQL` as subapplication is intended to offer better integration in projects that rely heavily on other services or FastAPI\'s dependency injection.\\n\\nAriadne\'s documentation has been updated to show both of those use cases:\\n\\n- [FastAPI](/server/fastapi-integration)\\n- [Starlette](/server/starlette-integration)\\n\\n## Dataloaders support for synchronous servers\\n\\nAriadne\'s public API was updated to support custom GraphQL execution contexts. This enables use of synchronous dataloaders in Ariadne.\\n\\nSee the [dataloaders guide](/server/dataloaders) to learn more about dataloaders and see the code examples.\\n\\n## Updated reference documents\\n\\nWe have replaced all documents in existing \\"API Reference\\" section with new ones that are wholly generated from Ariadne\'s source code.\\n\\nThis makes them 100% accurate and much more useful to the developers already familiar with GraphQL development with Ariadne, but looking to learn about APIs and features not covered by other documents, or just to refresh their memory of the APIs.\\n\\n## Backwards incompatible changes\\n\\n### `context_value` function is now called with two arguments\\n\\n`context_value` is now called with two arguments instead of one:\\n\\n- `request`: an representation of HTTP request specific to the framework used.\\n- `data`: an unvalidated JSON which may be a valid GraphQL request payload.\\n\\nCurrently Ariadne supports both old and new functions, but it will show a warning when old function is used. To future-proof your function you can change it\'s signature from `request` to `request, *_`.\\n\\nSee the [`ContextValue` reference](/server/types-reference#contextvalue).\\n\\n### `root_value` function is now called with four arguments\\n\\n`root_value` is now called with four arguments instead of one:\\n\\n- `context_value`: a context value specific to this GraphQL server.\\n- `operation_name`: a str with name of operation to execute (or None).\\n- `variables`: a dict with variables to pass to query\'s resolvers (or None).\\n- `document`: a DocumentNode with parsed GraphQL query.\\n\\nCurrently Ariadne supports both old and new functions, but it will show a warning when old function is used. To future-proof your function you can change it\'s signature from `context` to `context, *_`.\\n\\nSee the [`RootValue` reference](/server/types-reference#rootvalue).\\n\\n### `middleware` option now expects a list of middlewares or callable returning list of middlewares\\n\\n`middleware` option now expects a list of middlewares or callable returning list of middlewares.\\n\\nThis is in line with documentation that always described this use.\\n\\nIf you relied on custom `MiddlewareManager`, you can still pass it to Ariadne through the `middleware_manager_class` option that was added as part of this change.\\n\\n## Other improvements\\n\\nThere are few other improvements that we\'ve found noteworthy for Ariadne 0.18:\\n\\n`logger` option now supports `Logger` and `LoggerAdapter` instances in addition to `str` with logger name.\\n\\n[`load_schema_from_path`](/server/api-reference#load_schema_from_path) now supports `Path`-like objects in addition to `str` with path to schema.\\n\\n[`query_parser`](/server/types-reference#queryparser) option now enables replacement of default query parser used with custom one.\\n\\n## Security guide\\n\\nExcellent folk from [the Escape](https://escape.tech/) have contributed the security guide for GraphQl to Ariadne\'s docs.\\n\\nYou can find it [here](/server/security-overview).\\n\\n## Changelog\\n\\n- GraphiQL2 is now default API explorer.\\n- Added `explorer` option to ASGI and WSGI `GraphQL` applications that enables API explorer customization.\\n- Added `ExplorerHttp405` API explorer that returns `405 Method Not Allowed` for GET HTTP requests.\\n- Added implementations for GraphiQL2, GraphQL-Playground and Apollo Sandbox explorers.\\n- Added `convert_names_case` option to `make_executable_schema` to convert all names in schema to Python case using default or custom strategy.\\n- Added support for `Path`-like objects to `load_schema_from_path`.\\n- Changed `logger` option to also support `Logger` and `LoggerAdapter` instance in addition to `str` with logger name.\\n- Added support for `@tag` directive used by Apollo Federation.\\n- Moved project configuration from `setup.py` to `pyproject.toml`.\\n- Changed `context_value` option in ASGI and WSGI applications for callables to take query data as second argument.\\n- Changed `root_value` option in ASGI and WSGI applications for callables to take operation and and variables in addition to context and parsed query.\\n- Added `execution_context_class` option to ASGI and WSGI applications.\\n- Added `query_parser` option to ASGI and WSGI `GraphQL` applications that enables query parsing customization.\\n- Changed `middleware` option to work with callable or list of middlewares instead of `MiddlewareManager` instance.\\n- Added `middleware_manager_class` option to ASGI and WSGI applications.\\n- Added `handle_request` and `handle_websocket` methods to `ASGI` application that takes Starlette/FastAPI `Request` and `Websocket` objects.\\n- Fixed type annotations for middlewares.\\n- Added docstrings to members of public API."},{"id":"/2023/02/02/ariadne-codegen","metadata":{"permalink":"/blog/2023/02/02/ariadne-codegen","source":"@site/blog/2023-02-02-ariadne-codegen.md","title":"Announcing Ariadne Codegen!","description":"Ariadne Codegen!","date":"2023-02-02T00:00:00.000Z","tags":[],"readingTime":4,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Announcing Ariadne Codegen!"},"unlisted":false,"prevItem":{"title":"Ariadne 0.18","permalink":"/blog/2023/02/21/ariadne-0-18"},"nextItem":{"title":"Ariadne 0.17.1","permalink":"/blog/2023/01/09/ariadne-0-17-1"}},"content":"![Ariadne Codegen!](assets/ariadne-codegen.jpg)\\n\\nToday we are announcing first release of [Ariadne Codegen](https://github.com/mirumee/ariadne-codegen)!\\n\\nAriadne Codegen is our solution for the problem of writing and maintaining a Python boilerplate code for GraphQL clients. It\'s a code generator that converts GraphQL queries into production ready GraphQL client for Python.\\n\\n\x3c!--truncate--\x3e\\n\\n## The story\\n\\nAriadne Codegen was created from our need for better solution for GraphQL Clients. At [Mirumee Software](https://mirumee.com) we are writing a lot of Python services that integrate with or extend [Saleor](https://graphql.com/saleor/saleor), our GraphQL-first e-commerce software.\\n\\nThis means we are writing a lot of GraphQL clients, and a lot of those clients follow same structure:\\n\\n- There\'s a module that evolves into a package named `saleor_client`.\\n- This client implements functions like `get_shipping_methods` or `create_checkout` that map 1:1 to GraphQL queries and mutations implemented by Saleor.\\n- Each of those functions takes arguments it packages into a variables dictionary and combines them with Python string containing a GraphQL query.\\n- Each of those functions then does a `POST` request, handles errors and returns the result.\\n\\nBasically, we wrote functions upon a functions upon a functions that looked like this:\\n\\n```python\\nasync def create_checkout(client, email: str,  lines: dict, address: Address):\\n    address_json = address.json()\\n\\n    variables = {\\n        \\"channel\\": \\"USD\\",\\n        \\"email\\" email,\\n        \\"lines\\": [\\n            {\\"variantId\\": variant, \\"quantity\\": quantity}\\n            for variant, quantity in lines.items()\\n        ],\\n        \\"shippingAddress\\": address,\\n        \\"billingAddress\\": address,\\n    }\\n\\n    query = \\"\\"\\"\\n    mutation CheckoutCreate($input: CheckoutCreateInput!) {\\n        checkoutCreate(input: $input) {\\n            checkout {\\n                id\\n            }\\n            errors {\\n                field\\n                message\\n                code\\n                variants\\n                lines\\n                addressType\\n            }\\n        }\\n    }\\n    \\"\\"\\"\\n\\n    result = await client.post(\\n        GRAPHQL_URL,\\n        json={\\n            \\"query\\": query,\\n            \\"operationName\\": \\"CheckoutCreate\\",\\n            \\"variables\\": {\\"input\\": variables}\\n        }\\n    )\\n\\n    # Repackages HTTP errors from httpx into errors like\\n    # `SaleorAuthenticationError`\\n    raise_saleor_error(result)\\n\\n    data = await result.json()\\n\\n    if data.get(\\"errors\\"):\\n        # Repackage GraphQL errors\\n        raise_graphql_error(data[\\"errors\\"])\\n\\n    return data[\\"checkoutCreate\\"][\\"checkout\\"][\\"id\\"]\\n```\\n\\nThere\'s actually a very little variety in logic of those functions, and many of them are created by copying an already existing function and changing the variables and query string. For functions that return an objects, we would also maintain Pydantic models so we have result data packaged as types with code suggestions and MyPy checks instead of dicts and lists.\\n\\n### Automatization\\n\\nVery quickly we\'ve started to experiment with different approaches to automating this away:\\n\\n- Code generator which is aware of the GraphQL schema and converted GraphQL operations into a Python package.\\n- An WSDL-like client for GraphQL which also is aware of the GraphQL schema but did it\'s logic on the fly.\\n\\nFirst approach had a downside of requiring package to be regenerated on every new or changed query, but it had three upsides that we liked:\\n\\n- It didn\'t have extra logic executed on the runtime, making it **faster**.\\n- It\'s behavior didn\'t change on the runtime, making it easy to **learn and debug**.\\n- Generated code played nicely with code suggestions in IDEs and Mypy without need for any extra work.\\n\\nAriadne Codegen has grown from a complete rewrite of the original code generator that was created and used internally by a member of the Saleor Integrations Team.\\n\\n## Ariadne Codegen\\n\\nAriadne Codegen can be installed with pip:\\n\\n```\\n$ pip install ariadne-codegen\\n```\\n\\nThis will give you a new command, `ariadne-codegen`, which consumes the `ariadne-codegen` configuration from the `pyproject.toml` file.\\n\\nMinimum required configuration is just paths to where the schema and queries are:\\n\\n```\\n[ariadne-codegen]\\nschema_path = \\"schema.graphql\\"\\nqueries_path = \\"queries.graphql\\"\\n```\\n\\nCreate `schema.graphql`:\\n\\n```graphql\\ntype Query {\\n  hello: String!\\n}\\n```\\n\\nCreate `queries.graphql`:\\n\\n```graphql\\nquery GetHello {\\n  hello\\n}\\n```\\n\\nNow run the codegen:\\n\\n```\\n$ ariadne-codegen\\n```\\n\\nNew directory `graphql_client` will be created for you. Feel free to explore its contents. It\'s `__init__.py` file will reexport what can be considered \\"public API\\" of your new GraphQL client.\\n\\nYou can now use the client in your project by importing the `Client` class from the `graphql_client` package:\\n\\n```python\\nfrom graphql_client import Client\\n\\n\\nasync def do_smth_with_graphql_api():\\n    with Client(base_url = \\"http://my-client.com\\") as client:\\n        result = await client.get_hello()\\n        # `result` will be an instance of Pydantic model representing the result of\\n        # `GetHello` query!\\n        print(result.hello)\\n```\\n\\n## Available options and features\\n\\nAriadne Codegen already provides quite a few configuration and customization options:\\n\\n- It can be setup to generate either async or sync GraphQL client.\\n- It can be told to use custom base HTTP client class instead of default one.\\n- It can include extra files in the final package.\\n- Generated classes can be extended with extra behaviors using the `@mixin(...)` directive.\\n\\nSee the [readme file](https://github.com/mirumee/ariadne-codegen#readme) for all available options.\\n\\n## Known limitations\\n\\nFile uploads and GraphQL subscriptions are not supported.\\n\\n## Moving forward\\n\\nYou are welcome to share the love and give feedback for this library on [Ariadne forums](https://github.com/mirumee/ariadne/discussions)!\\n\\nIf you\'ve found a bug or have a PR, please use [Github issues](https://github.com/mirumee/ariadne-codegen/issues/).\\n\\nWe\'ve already started planning new features and improvements. Those are also public on [project\'s Github](https://github.com/mirumee/ariadne-codegen/issues/)."},{"id":"/2023/01/09/ariadne-0-17-1","metadata":{"permalink":"/blog/2023/01/09/ariadne-0-17-1","source":"@site/blog/2023-01-09-ariadne-0-17-1.md","title":"Ariadne 0.17.1","description":"Ariadne 0.17.1 is a bug fix release that fixes an error that occurred when schema that defines an interface type with fields having enum arguments with default values (eg. field(arg: Enum = ENUM_MEMBER)) is introspected.","date":"2023-01-09T00:00:00.000Z","tags":[],"readingTime":0.31,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne 0.17.1"},"unlisted":false,"prevItem":{"title":"Announcing Ariadne Codegen!","permalink":"/blog/2023/02/02/ariadne-codegen"},"nextItem":{"title":"Ariadne GraphQL Chat Example","permalink":"/blog/2022/12/15/chat-example"}},"content":"Ariadne 0.17.1 is a bug fix release that fixes an error that occurred when schema that defines an interface type with fields having enum arguments with default values (eg. `field(arg: Enum = ENUM_MEMBER)`) is introspected.\\n\\n\x3c!--truncate--\x3e\\n\\n## CHANGELOG\\n\\n- Fixed an error when schema that defines an interface type with fields having enum arguments with default values (eg. `field(arg: Enum = ENUM_MEMBER)`) is introspected."},{"id":"/2022/12/15/chat-example","metadata":{"permalink":"/blog/2022/12/15/chat-example","source":"@site/blog/2022-12-15-chat-example.md","title":"Ariadne GraphQL Chat Example","description":"We have created the Ariadne GraphQL Chat Example repository on GitHub that expands the Chat example from \\"Subscriptions\\" documentation with chat history, React.js client (using Apollo-Client), Redis for Broadcaster\'s messaging backend and Uvicorn HTTP/WebSocket server.","date":"2022-12-15T00:00:00.000Z","tags":[],"readingTime":0.56,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne GraphQL Chat Example"},"unlisted":false,"prevItem":{"title":"Ariadne 0.17.1","permalink":"/blog/2023/01/09/ariadne-0-17-1"},"nextItem":{"title":"Ariadne 0.17","permalink":"/blog/2022/12/14/ariadne-0-17-0"}},"content":"We have created the [Ariadne GraphQL Chat Example](https://github.com/mirumee/ariadne-graphql-chat-example) repository on GitHub that expands the [Chat example from \\"Subscriptions\\" documentation](/server/subscriptions#simple-chat-example) with chat history, React.js client (using [Apollo-Client](https://www.apollographql.com/docs/react/data/subscriptions/)), Redis for Broadcaster\'s messaging backend and Uvicorn HTTP/WebSocket server.\\n\\n\x3c!--truncate--\x3e\\n\\nOur intention behind it is to provide a practical learning tool for Ariadne users and a foundation for future experimentation with new implementations and changes to subscriptions in future versions of Ariadne and third party WebSocket handlers.\\n\\n![Animated gif with Ariadne Chat in action](https://user-images.githubusercontent.com/750553/205963257-39d062a8-34d5-4f65-b8a5-608aee5c2a46.gif)"},{"id":"/2022/12/14/ariadne-0-17-0","metadata":{"permalink":"/blog/2022/12/14/ariadne-0-17-0","source":"@site/blog/2022-12-14-ariadne-0-17-0.md","title":"Ariadne 0.17","description":"Ariadne 0.17 is a maintenance release that unpins Starlette requirement and removes use of deprecated CGI module in WSGI implementation.","date":"2022-12-14T00:00:00.000Z","tags":[],"readingTime":1.35,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne 0.17"},"unlisted":false,"prevItem":{"title":"Ariadne GraphQL Chat Example","permalink":"/blog/2022/12/15/chat-example"},"nextItem":{"title":"Ariadne 0.16.1","permalink":"/blog/2022/09/26/ariadne-0-16-1"}},"content":"Ariadne 0.17 is a maintenance release that unpins Starlette requirement and removes use of deprecated CGI module in WSGI implementation.\\n\\n\x3c!--truncate--\x3e\\n\\n## Unpinned Starlette dependency\\n\\nAriadne relies on [Starlette](https://starlette.io) library for its ASGI implementation. In past releases Starlette dependency was always pinned to a specific version, which forced new Ariadne release whenever new Starlette minor version was released.\\n\\nStarting with Ariadne 0.17, Starlette dependency is specified as `<1.0`. Reasoning for this is that Ariadne only uses Starlette\'s ASGI implementation and no other features and in last 4 years of project\'s existence there was a single case when Starlette\'s update forced Us to change our implementation - early in 2019.\\n\\n## Removed `cgi` dependency\\n\\n`cgi` module is part of Python\'s standard library, providing utilities for writing HTTP servers. Ariadne\'s WSGI implementation used this module for extracting uploaded files from requests payloads.\\n\\nStarting with Python 3.11, `cgi` module is now deprecated and Ariadne was moved to custom implementation using [python-multipart](https://github.com/andrew-d/python-multipart) library, and uploaded files are now instances of `File` class.\\n\\n## `asgi-file-uploads` optional dependency renamed to `file-uploads`\\n\\nBecause both ASGI and WSGI implementation now requires `python-multipart` library, `asgi-file-uploads` was renamed to `file-uploads`. To make upgrade easier, both names are currently supported by Ariadne, but projects dependencies should be changed for Ariadne 0.18 which will drop `asgi-file-uploads`.\\n\\n## Python 3.11\\n\\nStarting with this release Ariadne is tested against Python 3.11.\\n\\n## CHANGELOG\\n\\n- Bumped starlette dependency in setup.py to `<1.0`.\\n- Added Python 3.11 to test matrix.\\n- Removed usage of deprecated `cgi` module.\\n- Renamed `asgi-file-uploads` optional dependency to `file-uploads`."},{"id":"/2022/09/26/ariadne-0-16-1","metadata":{"permalink":"/blog/2022/09/26/ariadne-0-16-1","source":"@site/blog/2022-09-26-ariadne-0-16-1.md","title":"Ariadne 0.16.1","description":"Ariadne 0.16.1 is now available. This release fixes incorrect implementation of GraphQLTransportWSHandler causing it to support only a single connection over a websocket.","date":"2022-09-26T00:00:00.000Z","tags":[],"readingTime":0.16,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne 0.16.1"},"unlisted":false,"prevItem":{"title":"Ariadne 0.17","permalink":"/blog/2022/12/14/ariadne-0-17-0"},"nextItem":{"title":"Ariadne GraphQL Modules 0.7.0","permalink":"/blog/2022/09/13/ariadne-graphql-modules-0-7-0"}},"content":"Ariadne 0.16.1 is now available. This release fixes incorrect implementation of `GraphQLTransportWSHandler` causing it to support only a single connection over a websocket.\\n\\n\x3c!--truncate--\x3e\\n\\n## CHANGELOG\\n\\n- Fixed `GraphQLTransportWSHandler` implementation to handle multiple connections."},{"id":"/2022/09/13/ariadne-graphql-modules-0-7-0","metadata":{"permalink":"/blog/2022/09/13/ariadne-graphql-modules-0-7-0","source":"@site/blog/2022-09-13-ariadne-graphql-modules-0-7-0.md","title":"Ariadne GraphQL Modules 0.7.0","description":"Ariadne GraphQL Modules 0.7 has been released. This release adds support for Ariadne\'s approach to defining a schema to makeexecutableschema, enabling developers to incrementally switch their schema definition to modular approach (or vice versa).","date":"2022-09-13T00:00:00.000Z","tags":[],"readingTime":0.78,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne GraphQL Modules 0.7.0"},"unlisted":false,"prevItem":{"title":"Ariadne 0.16.1","permalink":"/blog/2022/09/26/ariadne-0-16-1"},"nextItem":{"title":"Ariadne 0.16.0","permalink":"/blog/2022/09/08/ariadne-0-16-0"}},"content":"[Ariadne GraphQL Modules](https://github.com/mirumee/ariadne-graphql-modules) 0.7 has been released. This release adds support for Ariadne\'s approach to defining a schema to `make_executable_schema`, enabling developers to incrementally switch their schema definition to modular approach (or vice versa).\\n\\n\x3c!--truncate--\x3e\\n\\n## `make_executable_schema` accepts SDL strings and schema bindables\\n\\n`make_executable_schema` importable from `ariadne_graphql_modules` is now almost a drop-in replacement for it\'s `ariadne` counterpart:\\n\\n```python\\nfrom ariadne import make_executable_schema\\n\\nschema = make_executable_schema(type_defs, query_type, user_type)\\n```\\n\\nNew code:\\n\\n```python\\nfrom ariadne_graphql_modules import make_executable_schema\\n\\nschema = make_executable_schema(type_defs, query_type, user_type)\\n```\\n\\n### Explicit unpacking\\n\\n`ariadne` version supports passing lists of bindables and type_defs (strings with SDL). For `ariadne_graphql_modules` you need to explicitly unpack those by prefixing their names with `*`:\\n\\n```python\\nfrom ariadne_graphql_modules import make_executable_schema\\n\\nschema = make_executable_schema(type_defs, query_type, *user_types)\\n```\\n\\n### Directives\\n\\n`directives` option is named `extra_directives` in `ariadne_graphql_modules` version of `make_executable_schema`:\\n\\n```python\\nfrom ariadne_graphql_modules import make_executable_schema\\n\\nschema = make_executable_schema(\\n    type_defs, type_a, type_b, type_c,\\n    extra_directives={\\"date\\": MyDateDirective},\\n)\\n```\\n\\n## Changelog\\n\\n- Added support for Ariadne schema definitions to `make_executable_schema`."},{"id":"/2022/09/08/ariadne-0-16-0","metadata":{"permalink":"/blog/2022/09/08/ariadne-0-16-0","source":"@site/blog/2022-09-08-ariadne-0-16-0.md","title":"Ariadne 0.16.0","description":"Ariadne 0.16 release brings refactor to Ariadne\'s ASGI app which makes it more modular and adds support for old and new GraphQL websocket protocols. It also updates loadschemafrom_path to support gql and graphqls file types. Finally it bumps library\'s support for Starlette to version 0.20 and updates other dependencies to latest versions.","date":"2022-09-08T00:00:00.000Z","tags":[],"readingTime":1.02,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne 0.16.0"},"unlisted":false,"prevItem":{"title":"Ariadne GraphQL Modules 0.7.0","permalink":"/blog/2022/09/13/ariadne-graphql-modules-0-7-0"},"nextItem":{"title":"Ariadne GraphQL Modules 0.4.0","permalink":"/blog/2022/05/04/ariadne-graphql-modules-0-4-0"}},"content":"Ariadne 0.16 release brings refactor to Ariadne\'s ASGI app which makes it more modular and adds support for old and new GraphQL websocket protocols. It also updates `load_schema_from_path` to support `gql` and `graphqls` file types. Finally it bumps library\'s support for Starlette to version 0.20 and updates other dependencies to latest versions.\\n\\nWe thank our community for contributing features to this release. You rock! \u2764\uFE0F\\n\\n\x3c!--truncate--\x3e\\n\\n## Refactored `ariadne.asgi.GraphQL`\\n\\n`GraphQL`\'s HTTP and WebSocket protocols support has been factored out to separate classes, making it easier to implement and customize HTTP and WebSocket handling.\\n\\n### Updating to 0.16\\n\\nIf you are using subscriptions in your GraphQL API, you have to update your code:\\n\\n```python\\nfrom ariadne.asgi import GraphQL\\nfrom ariadne.asgi.handlers import GraphQLWSHandler\\n\\napp = GraphQL(\\n    schema,\\n    websocket_handler=GraphQLWSHandler(),\\n)\\n```\\n\\nIf you used event handlers for websocket connections, those should now be set on WebSocket handler directly:\\n\\n```python\\nfrom ariadne.asgi import GraphQL\\nfrom ariadne.asgi.handlers import GraphQLWSHandler\\n\\napp = GraphQL(\\n    schema,\\n    websocket_handler=GraphQLWSHandler(\\n        on_connect=...,\\n        on_disconnect=...,\\n        on_operation=...,\\n        on_complete=...,\\n    ),\\n)\\n```\\n\\n## `gql` and `graphqls` support for `load_schema_from_path`\\n\\n`load_schema_from_path` will now load files with `gql` and `graphqls` extensions in addition to `graphql`.\\n\\n## CHANGELOG\\n\\n- Refactored `ariadne.asgi.GraphQL` to use strategy pattern for handling HTTP and WebSockets.\\n- Updated `load_schema_from_path` to also support `.gql` and `.graphqls` files.\\n- Added support for `starlette` 0.20."},{"id":"/2022/05/04/ariadne-graphql-modules-0-4-0","metadata":{"permalink":"/blog/2022/05/04/ariadne-graphql-modules-0-4-0","source":"@site/blog/2022-05-04-ariadne-graphql-modules-0-4-0.md","title":"Ariadne GraphQL Modules 0.4.0","description":"Ariadne GraphQL Modules 0.4.0 has been released!","date":"2022-05-04T00:00:00.000Z","tags":[],"readingTime":0.36,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne GraphQL Modules 0.4.0"},"unlisted":false,"prevItem":{"title":"Ariadne 0.16.0","permalink":"/blog/2022/09/08/ariadne-0-16-0"},"nextItem":{"title":"Ariadne GraphQL Modules 0.3.0","permalink":"/blog/2022/04/25/ariadne-graphql-modules-0-3-0"}},"content":"Ariadne GraphQL Modules 0.4.0 has been released!\\n\\nThis release changes datamodel, simplifying the `BaseType` and moving its logic to new `DefinitionType` and `BindableType` base classes.\\n\\nIt also introduces new `CollectionType` that can be used to gather multiple types into single type, eg.:\\n\\n```python\\nclass UserMutations(CollectionType):\\n    __types__ = [\\n        UserAvatarUploadMutation,\\n        UserAvatarRemoveMutation,\\n        UserCreateMutation,\\n        UserUpdateMutation,\\n        UserDeleteMutation,\\n    ]\\n```\\n\\n\x3c!--truncate--\x3e\\n\\n## Changelog\\n\\n- Split logic from `BaseType` into `DefinitionType` and `BindableType`.\\n- Add `CollectionType` utility type for gathering types into single type."},{"id":"/2022/04/25/ariadne-graphql-modules-0-3-0","metadata":{"permalink":"/blog/2022/04/25/ariadne-graphql-modules-0-3-0","source":"@site/blog/2022-04-25-ariadne-graphql-modules-0-3-0.md","title":"Ariadne GraphQL Modules 0.3.0","description":"Ariadne GraphQL Modules 0.3.0 is now available.","date":"2022-04-25T00:00:00.000Z","tags":[],"readingTime":0.17,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne GraphQL Modules 0.3.0"},"unlisted":false,"prevItem":{"title":"Ariadne GraphQL Modules 0.4.0","permalink":"/blog/2022/05/04/ariadne-graphql-modules-0-4-0"},"nextItem":{"title":"Ariadne 0.15.1","permalink":"/blog/2022/04/22/ariadne-0-15-1"}},"content":"Ariadne GraphQL Modules 0.3.0 is now available.\\n\\n0.3.0 is a bugfix release fixing dependency checker not recognizing `Float` as builtin scalar.\\n\\n\x3c!--truncate--\x3e\\n\\n## Changelog\\n\\n- Fix \\"dependency required\\" error raised for GraphQL `Float` scalar type."},{"id":"/2022/04/22/ariadne-0-15-1","metadata":{"permalink":"/blog/2022/04/22/ariadne-0-15-1","source":"@site/blog/2022-04-22-ariadne-0-15-1.md","title":"Ariadne 0.15.1","description":"Ariadne 0.15.1 has been released!","date":"2022-04-22T00:00:00.000Z","tags":[],"readingTime":0.19,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne 0.15.1"},"unlisted":false,"prevItem":{"title":"Ariadne GraphQL Modules 0.3.0","permalink":"/blog/2022/04/25/ariadne-graphql-modules-0-3-0"},"nextItem":{"title":"Ariadne 0.15","permalink":"/blog/2022/04/13/ariadne-0-15"}},"content":"Ariadne 0.15.1 has been released!\\n\\n0.15.1 is a maintenance release dedicated to fixing performance issue in `make_federated_schema` function that makes generation of schema object very slow when GraphQL types have descriptions.\\n\\n\x3c!--truncate--\x3e\\n\\n## Changelog\\n\\n- Fix performance regression in `make_federated_schema`."},{"id":"/2022/04/13/ariadne-0-15","metadata":{"permalink":"/blog/2022/04/13/ariadne-0-15","source":"@site/blog/2022-04-13-ariadne-0-15.md","title":"Ariadne 0.15","description":"Ariadne 0.15 is out!","date":"2022-04-13T00:00:00.000Z","tags":[],"readingTime":1.01,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne 0.15"},"unlisted":false,"prevItem":{"title":"Ariadne 0.15.1","permalink":"/blog/2022/04/22/ariadne-0-15-1"},"nextItem":{"title":"Introducing Ariadne GraphQL Modules","permalink":"/blog/2022/04/13/ariadne-graphql-modules"}},"content":"Ariadne 0.15 is out!\\n\\nThis release updates GraphQL Core compatibility to version 3.2 and Starlette to versions 0.18 and 0.19. It also brings bunch of bug fixes and small improvements to the library contributed by the community. \u2764\uFE0F\\n\\nWith this release we are also dropping support for Python 3.6, which reached end of support as of 23 December 2021.\\n\\n\x3c!--truncate--\x3e\\n\\n## Changelog\\n\\n- Updated `graphql-core` requirement to 3.2.0.\\n- Bumped `starlette` supported versions to 0.18 and 0.19.\\n- Drop Python 3.6 support.\\n- Added basic support for `OPTIONS` HTTP request.\\n- Refactor `ariadne.asgi.GraphQL` to make it easier to customize JSON response.\\n- Added `trace_default_resolver` to `ApolloTracingExtension` that enables tracing for default resolvers.\\n- Fixed `make_federated_schema` error when custom directive in schema has description.\\n- Moved `set_default_enum_values_on_schema`, `validate_schema_enum_values` and `type_implements_interface` to public API.\\n- Changed `graphql_sync` to use `execute_sync` instead of `execute`.\\n- Added `on_operation` hook to `ariadne.asgi.GraphQL` that\'s called when individual subscription operation is started.\\n- Added `on_complete` hook to `ariadne.asgi.GraphQL` that\'s called when individual subscription operation is completed.\\n- Updated `on_disconnect` hook so its called in Webhook handler\'s `finally` clause, making it called in more situations.\\n- Marked `Extension`, `ExtensionSync` and `SchemaBindable` protocols as `@runtime_checkable`.\\n- Renamed `parent` to `obj` in `ApolloTracing` and `OpenTracing` extensions so arg name won\'t cause conflict when custom resolver has `parent` arg."},{"id":"/2022/04/13/ariadne-graphql-modules","metadata":{"permalink":"/blog/2022/04/13/ariadne-graphql-modules","source":"@site/blog/2022-04-13-ariadne-graphql-modules.md","title":"Introducing Ariadne GraphQL Modules","description":"Ariadne GraphQL Modules library is now available \u{1F389}","date":"2022-04-13T00:00:00.000Z","tags":[],"readingTime":3.06,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Introducing Ariadne GraphQL Modules"},"unlisted":false,"prevItem":{"title":"Ariadne 0.15","permalink":"/blog/2022/04/13/ariadne-0-15"},"nextItem":{"title":"Ariadne 0.14.1","permalink":"/blog/2022/01/28/ariadne-0-14-1"}},"content":"[Ariadne GraphQL Modules library is now available](https://github.com/mirumee/ariadne-graphql-modules) \u{1F389}\\n\\nThis library provides developers with modular way for implementing GraphQL schemas in their projects.\\n\\n\x3c!--truncate--\x3e\\n\\n## Example\\n\\nIn Ariadne GraphQL Modules, every GraphQL type is defined as Python type:\\n\\n```python\\nfrom ariadne_graphql_modules import ObjectType, gql\\n\\n\\nclass UserType(ObjectType):\\n    __schema__ = gql(\\n        \\"\\"\\"\\n        type User {\\n            id: ID!\\n            name: String!\\n            email: String\\n        }\\n        \\"\\"\\"\\n    )\\n\\n    @staticmethod\\n    def resolve_email(user, info):\\n        if info.context[\\"user\\"] == user or info.context[\\"is_admin\\"]:\\n            return user.email\\n\\n        return None\\n```\\n\\nTypes can depend on other types:\\n\\n```python\\nfrom ariadne_graphql_modules import ObjectType, gql\\nfrom my_app.users.models import User\\n\\n\\nclass UsersQueries(ObjectType):\\n    __schema__ = gql(\\n        \\"\\"\\"\\n        type Query {\\n            user(id: ID!): User\\n            lastUsers: [User!]!\\n        }\\n        \\"\\"\\"\\n    )\\n    __aliases__ = {\\"lastUsers\\": \\"last_users\\"}\\n    __requires__ = [UserType]  # UsersQueries requires User definition\\n\\n    @staticmethod\\n    async def resolver_user(*_, id):\\n        return await User.objects.filter(id=id).one()\\n\\n    @staticmethod\\n    async def resolve_last_users(*_):\\n        return await User.objects.order_by(\\"-id\\").limit(10)\\n```\\n\\nTypes are then passed to `make_executable_schema` which flattens types graph, and produces executable `GraphQL` schema instance:\\n\\n```python\\nfrom ariadne.asgi import GraphQL\\nfrom ariadne_graphql_modules import make_executable_schema\\nfrom my_app.users.graphql import UsersQueries\\n\\nschema = make_executable_schema(UsersQueries)\\napp = GraphQL(schema)\\n```\\n\\n## Automatic merging of multiple roots\\n\\n`make_executable_schema` by default merges multiple `Query`, `Mutation` and `Subscription` types into one, so you don\'t have to define \\"throwaway\\" type with single unused field to extend in other places:\\n\\n```python\\nfrom datetime import date\\n\\nfrom ariadne.asgi import GraphQL\\nfrom ariadne_graphql_modules import ObjectType, gql, make_executable_schema\\n\\n\\nclass YearQuery(ObjectType):\\n    __schema__ = gql(\\n        \\"\\"\\"\\n        type Query {\\n            year: Int!\\n        }\\n        \\"\\"\\"\\n    )\\n\\n    @staticmethod\\n    def resolve_year(*_):\\n        return date.today().year\\n\\n\\nclass MessageQuery(ObjectType):\\n    __schema__ = gql(\\n        \\"\\"\\"\\n        type Query {\\n            message: String!\\n        }\\n        \\"\\"\\"\\n    )\\n\\n    @staticmethod\\n    def resolve_message(*_):\\n        return \\"Hello world!\\"\\n\\n\\nschema = make_executable_schema(YearQuery, MessageQuery)\\napp = GraphQL(schema=schema, debug=True)\\n```\\n\\nFinal schema will contain single `Query` type thats result of merged tupes:\\n\\n```graphql\\ntype Query {\\n  message: String!\\n  year: Int!\\n}\\n```\\n\\nFields on final type will be ordered alphabetically.\\n\\n## Better case mapping between `clientWorld` and `python_world`\\n\\nAbove example contained explicit mapping of `lastUsers` field in GraphQL schema to `last_users` Python name using the `__aliases__` option.\\n\\nLibrary also provides `convert_case` utility that performs this conversion automatically for given type:\\n\\n```python\\nfrom ariadne_graphql_modules import ObjectType, convert_case\\n\\n\\nclass UsersQueries(ObjectType):\\n    __schema__ = gql(\\n        \\"\\"\\"\\n        type Query {\\n            user(id: ID!): User\\n            lastUsers: [User!]!\\n        }\\n        \\"\\"\\"\\n    )\\n    __aliases__ = convert_case\\n    __requires__ = [UserType]  # UsersQueries requires User definition\\n```\\n\\nThis utility also handles mapping of arguments names:\\n\\n```python\\nclass UserRegisterMutation(MutationType):\\n    __schema__ = gql(\\n        \\"\\"\\"\\n        type Mutation {\\n            registerUser(fullName: String!, email: String!): Boolean!\\n        }\\n        \\"\\"\\"\\n    )\\n    __fields_args__ = convert_case\\n\\n    @staticmethod\\n    async def resolve_mutation(*_, full_name: str, email: str):\\n        user = await create_user(\\n            full_name=full_name,\\n            email=email,\\n        )\\n        return bool(user)\\n```\\n\\nIt also takes care of input fields:\\n\\n```python\\nclass UserRegisterInput(InputType):\\n    __schema__ = gql(\\n        \\"\\"\\"\\n        input UserRegisterInput {\\n            fullName: String!\\n            email: String!\\n        }\\n        \\"\\"\\"\\n    )\\n    __args__ = convert_case\\n\\n\\nclass UserRegisterMutation(MutationType):\\n    __schema__ = gql(\\n        \\"\\"\\"\\n        type Mutation {\\n            registerUser(input: UserRegisterInput!): Boolean!\\n        }\\n        \\"\\"\\"\\n    )\\n    __requires__ = [UserRegisterInput]\\n\\n    @staticmethod\\n    async def resolve_mutation(*_, input: dict):\\n        user = await create_user(\\n            full_name=input[\\"full_name\\"],\\n            email=input[\\"email\\"],\\n        )\\n        return bool(user)\\n```\\n\\n## Installation\\n\\nAriadne GraphQL Modules can be installed with pip:\\n\\n```console\\npip install ariadne-graphql-modules\\n```\\n\\n> Ariadne 0.15 or later is required.\\n\\n## Using modules in your project\\n\\nBecause there\'s no way to mix old and new approach within single GraphQL API we are recommending this library for teams starting new schemas or maintaining smaller existing schemas and are unhappy with \\"default\\" approach for schema definition that Ariadne provides. Just remember that we **don\'t consider current API stable** and we plan to iterate and change things based on our own experience with it and feedback from other users.\\n\\nWe don\'t know yet if in future we will merge modules code into Ariadne proper. For the time being we want to maintain it as a separate library so we can make frequent releases as bugs are discovered and improvements are found.\\n\\n## Feedback\\n\\nWe\'d **LOVE** to hear what you think about Ariadne GraphQL Modules. You can let us know using [Ariadne\'s discussions on GitHub](https://github.com/mirumee/ariadne/discussions)."},{"id":"/2022/01/28/ariadne-0-14-1","metadata":{"permalink":"/blog/2022/01/28/ariadne-0-14-1","source":"@site/blog/2022-01-28-ariadne-0-14-1.md","title":"Ariadne 0.14.1","description":"Ariadne 0.14.1 has been released!","date":"2022-01-28T00:00:00.000Z","tags":[],"readingTime":0.35,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne 0.14.1"},"unlisted":false,"prevItem":{"title":"Introducing Ariadne GraphQL Modules","permalink":"/blog/2022/04/13/ariadne-graphql-modules"},"nextItem":{"title":"Ariadne 0.14.0","permalink":"/blog/2021/11/24/ariadne-0-14-0"}},"content":"Ariadne 0.14.1 has been released!\\n\\n0.14.1 is a maintenance release that locks `graphql-core` dependency version at `<3.2`, preventing Ariadne from crashing due to incompatibility with recently released GraphQL-core 3.2 package.\\n\\nThis release also removes `ariadne.contrib.django` package which by mistake made it\'s way to 0.14 release which was supposed to be first Ariadne release without it.\\n\\n\x3c!--truncate--\x3e\\n\\n## Changelog\\n\\n- Remove `ariadne.contrib.django` from release.\\n- Lock `GraphQL-core` requirement at `<3.2`."},{"id":"/2021/11/24/ariadne-0-14-0","metadata":{"permalink":"/blog/2021/11/24/ariadne-0-14-0","source":"@site/blog/2021-11-24-ariadne-0-14-0.md","title":"Ariadne 0.14.0","description":"Ariadne shipped!","date":"2021-11-24T00:00:00.000Z","tags":[],"readingTime":1.9,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne 0.14.0"},"unlisted":false,"prevItem":{"title":"Ariadne 0.14.1","permalink":"/blog/2022/01/28/ariadne-0-14-1"},"nextItem":{"title":"Ariadne community is moving to GitHub discussions","permalink":"/blog/2021/03/19/moving-to-gh-discussions"}},"content":"![Ariadne shipped!](assets/ariadne-0-14.jpg)\\n\\nAriadne 0.14 is now available!\\n\\n0.14 is a maintenance release focused mostly on addressing bugs and updating dependencies. It also brings one breaking change for Django users.\\n\\n\x3c!--truncate--\x3e\\n\\n## `ariadne.contrib.django` has been moved into a third party library\\n\\n`ariadne.contrib.django` has been removed from Ariadne\'s codebase and is now available as [ariadne_django](https://github.com/reset-button/ariadne_django) library maintained by third party.\\n\\nThis was [originally planned for Ariadne 0.13](/blog/2020/08/04/ariadne-0-12-0#notice-about-ariadnecontribdjango) but we\'ve decided to delay it by one release, to 0.14.\\n\\nWe have explained our justification for this decision in the past, but I would like to take a moment to reiterate it here. Originally it was our goal to have good Django support in the core, but we\'ve quickly migrated our Ariadne GraphQL APIs to ASGI frameworks like Starlette and FastAPI. This resulted in us having to maintain three backends (ASGI, WSGI and Django).\\n\\nThis also had three additional downsides, each worsened by previous one:\\n\\n- It tied releases of fixes to Django to Ariadne.\\n- It made people try contributing additional features and improvements to Django GraphQL support to Ariadne instead of releasing them as their own libs.\\n- It sent message to other frameworks communities that they can expect support for their frameworks to eventually appear under `ariadne.contrib` (eg. `ariadne.contrib.flask`), while we would like those communities to develop and maintain those as their own libraries.\\n\\nThank you for your understanding. \u{1F64F}\\n\\n> Please note that `ariadne_django` package is currently looking for maintainers.\\n>\\n> As copyright holders for `ariadne.contrib.django` and it\'s documentation, we also offer our backing to initiative for extracting this code into library under\\n\\n## Updated Starlette dependency to 0.17.1\\n\\nUsually we don\'t single updated dependencies, but we\'ve got a word that old Starlette version that Ariadne used caused conflict with recent versions of FastAPI.\\n\\nThis issue should now be resolved.\\n\\n## Changelog\\n\\n- Added `on_connect` and `on_disconnect` options to `ariadne.asgi.GraphQL`, enabling developers to run additional initialization and cleanup for websocket connections.\\n- Updated Starlette dependency to 0.17.1.\\n- Added support for multiple keys for GraphQL federations.\\n- Made `Query` type optional in federated schemas.\\n- Updated default resolvers to test for `Mapping` instead of `dict`.\\n- Removed `ariadne.contrib.django`. (Use [ariadne_django](https://github.com/reset-button/ariadne_django) instead).\\n- Updated query cost validator to handle optional variables."},{"id":"/2021/03/19/moving-to-gh-discussions","metadata":{"permalink":"/blog/2021/03/19/moving-to-gh-discussions","source":"@site/blog/2021-03-19-moving-to-gh-discussions.md","title":"Ariadne community is moving to GitHub discussions","description":"Hello!","date":"2021-03-19T00:00:00.000Z","tags":[],"readingTime":0.3,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne community is moving to GitHub discussions"},"unlisted":false,"prevItem":{"title":"Ariadne 0.14.0","permalink":"/blog/2021/11/24/ariadne-0-14-0"},"nextItem":{"title":"Ariadne 0.13.0","permalink":"/blog/2021/03/17/ariadne-0-13-0"}},"content":"Hello!\\n\\nIf you\'ve recently visited any Spectrum community, you are likely aware that [GitHub is now sunsetting](https://spectrum.chat/spectrum/general/join-us-on-our-new-journey~e4ca0386-f15c-4ba8-8184-21cf5fa39cf5) Spectrum for GitHub discussions.\\n\\nBecause of this, we\'ve made decision to move Ariadne\'s community to [GitHub discussions](https://github.com/mirumee/ariadne/discussions)!\\n\\nThanks and see you there! \u{1F44B}\\n\\n\x3c!--truncate--\x3e"},{"id":"/2021/03/17/ariadne-0-13-0","metadata":{"permalink":"/blog/2021/03/17/ariadne-0-13-0","source":"@site/blog/2021-03-17-ariadne-0-13-0.md","title":"Ariadne 0.13.0","description":"Ariadne\'s Jet Plane","date":"2021-03-17T00:00:00.000Z","tags":[],"readingTime":1.94,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne 0.13.0"},"unlisted":false,"prevItem":{"title":"Ariadne community is moving to GitHub discussions","permalink":"/blog/2021/03/19/moving-to-gh-discussions"},"nextItem":{"title":"Ariadne 0.12.0","permalink":"/blog/2020/08/04/ariadne-0-12-0"}},"content":"![Ariadne\'s Jet Plane](assets/ariadne-0-13.jpg)\\n\\nWhooosh! \u2708\uFE0F\\n\\nAriadne 0.13 is a maintenance release that brings speed improvements and Python 3.9 support of GraphQL core 3.1 to the library!\\n\\nWe\'ve also managed to sneak in some other small improvements to the project.\\n\\n\x3c!--truncate--\x3e\\n\\n## Updated GraphQL core to 3.1.3\\n\\nAriadne is now using GraphQL core version 3.1.3 for GraphQL standard implementation. This release [brings much sought performance improvements](https://github.com/graphql-python/graphql-core/issues/54) to the GraphQL query execution engine which are now available to all Ariadne users!\\n\\nWe give our thank you to Nick Harris who [contributed this change](https://github.com/mirumee/ariadne/pull/393)!\\n\\n## Python 3.9 support\\n\\nGraphQL core 3.1 is first release to officially support Python 3.9. As such we\'ve added Python 3.9 to the testing matrix and list of officially supported Python versions.\\n\\n## `None` is now returned for empty entities in federation.\\n\\nAriadne used to return `{\\"__typename\\": typename}` when federated resolver returned `None`, causing compatibility issues with Apollo Federation.\\n\\nIn 0.13 `None` is returned instead, properly communicating federated service\'s intention to the upstream server.\\n\\nThanks to Delyan who [contributed this fix](https://github.com/mirumee/ariadne/pull/449)!\\n\\n## Nested variables support in query price validation\\n\\nIt is now possible to define nested variables as multipliers for query cost when using query price validation. This is useful when complexity should be calculated using the value of field belonging to input type, eg:\\n\\n```graphql\\ntype Query {\\n  users(pagination: PaginationInput): UsersListPage!\\n}\\n\\ninput PaginationInput {\\n  pageSize: Int!\\n}\\n```\\n\\n```python\\ncost_map = {\\n    \\"Query\\": {\\n        \\"users\\": {\\"complexity\\": 1, \\"multipliers\\": [\\"pagination.pageSize\\"]},\\n    },\\n}\\n```\\n\\nThank you T.Kameyama for [contributing this](https://github.com/mirumee/ariadne/pull/410)!\\n\\n## Improved `convert_kwargs_to_snake_case` and `snake_case_fallback_resolvers`.\\n\\nAriadne\'s case conversion mechanic is a hot topic for developers and new release brings improvements to this feature contributed by two users.\\n\\nStarting with 0.13 release, Ariadne\'s case conversion utils now recognize both numbers and acronyms:\\n\\n- `testWithUPPERPart` is now converted to `test_with_upper_part`.\\n- `test134part` is now converted to `test_134_part`.\\n\\nThank you both [Ben Motz](https://github.com/mirumee/ariadne/pull/452) and [nilsdet](https://github.com/mirumee/ariadne/pull/451) for contributing those improvements!\\n\\n## CHANGELOG\\n\\n- Updated `graphQL-core` requirement to 3.1.3.\\n- Added support for Python 3.9.\\n- Added support for using nested variables as cost multipliers in the query price validator.\\n- `None` is now correctly returned instead of `{\\"__typename\\": typename}` within federation.\\n- Fixed some surprising behaviors in `convert_kwargs_to_snake_case` and `snake_case_fallback_resolvers`."},{"id":"/2020/08/04/ariadne-0-12-0","metadata":{"permalink":"/blog/2020/08/04/ariadne-0-12-0","source":"@site/blog/2020-08-04-ariadne-0-12-0.md","title":"Ariadne 0.12.0","description":"This one took us a while, but Ariadne 0.12 is now available!","date":"2020-08-04T00:00:00.000Z","tags":[],"readingTime":3.19,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne 0.12.0"},"unlisted":false,"prevItem":{"title":"Ariadne 0.13.0","permalink":"/blog/2021/03/17/ariadne-0-13-0"},"nextItem":{"title":"Ariadne 0.11.0","permalink":"/blog/2020/04/01/ariadne-0-11-0"}},"content":"This one took us a while, but Ariadne 0.12 is now available!\\n\\nAriadne 0.12 is a feature release that adds support for custom query validators, adds query cost validator that enables developers to limit maximum complexity of GraphQL query that can be executed by the server, and adds an option for disabling the GraphQL introspection and the GraphQL Playground IDE on servers.\\n\\nThis release also locks required GraphQL core version at 3.0. Support for 3.1 is coming in future version.\\n\\nFinally, this release also adds `extensions` support to the Django view, and fixes a reported bug in `ScalarType` default `parse_literal` producing an error when GraphQL query contained both literal and query variables.\\n\\n\x3c!--truncate--\x3e\\n\\n## Custom query validators and query cost validator\\n\\nIt is now possible to implement custom GraphQL query validators. This is an advanced feature intended for developers who need to block malicious GraphQL queries from being executed by their server.\\n\\nOut of the box, Ariadne includes a [query cost validator](/server/query-validators) that enables developers to assign costs values to GraphQL fields in the schema and limit size or complexity of a single GraphQL query that may be executed by the server.\\n\\n## Added `introspection` option in ASGI, WSGI apps and Django view\\n\\nOne of the most requested features of Ariadne was an option to disable GraphQL Playground. This request had its basis on security concerns, however, disabling GraphQL Playground in Ariadne would not prevent malicious users from using a local GraphQL API client like Insomnia or the desktop version of GraphQL Playground to continue interacting with the API.\\n\\nThis is because when users request the ability to disable GraphQL Playground, they in fact seek an option to disable introspection, a GraphQL feature enabling clients to query a GraphQL server to learn what types, fields, and mutations are implemented by its schema.\\n\\nThanks to a contribution from the community, Ariadne\'s ASGI app, the WSGI app, and the Django view now support an `introspection` argument. Setting this option to `False` will result in GraphQL Playground becoming unavailable and will also prevent any introspection queries from being executed by the server.\\n\\n## Fixed default `parse_literal` implementation in `ScalarType`\\n\\nGraphQL.js reference which is used in development of Ariadne didn\'t document that scalar\'s `parse_literal` method takes two arguments instead of one, with second argument being present when scalar\'s literal value was used in query that was also called with variable values.\\n\\nWe\'ve re-tested default behavior of GraphQL-Core library and found it already provides default `parse_literal` implementation mirroring Ariadne\'s one. In light of this we have removed default `parse_literal` from Ariadne\'s codebase and updated [scalars documentation](/server/scalars) to skip `parse_literal`. At later date we will follow up with new documentation exploring scenarios when custom `parse_literal` is useful.\\n\\n## Notice about `ariadne.contrib.django`\\n\\nAriadne ships with the `ariadne.contrib` package which, amongst different useful utils, includes a `django` package that implements a Django app complete with a GraphQL view and a few scalars specific to Django.\\n\\n**Today we would like to notify the community about our plan to split `ariadne.contrib.django` into a separate package. Ariadne 0.13 will be final Ariadne release to ship with `ariadne.contrib.django`.**\\n\\nWe are doing this to separate Ariadne releases from `ariadne.contrib.django` and also to set an example on how we are envisioning packages providing Ariadne integration with 3rd party web frameworks.\\n\\n## CHANGELOG\\n\\n- Added `validation_rules` option to query executors as well as ASGI and WSGI apps and Django view that allow developers to include custom query validation logic in their APIs.\\n- Added `introspection` option to ASGI and WSGI apps, allowing developers to disable GraphQL introspection on their server.\\n- Added `validation.cost_validator` query validator that allows developers to limit maximum allowed query cost/complexity.\\n- Removed default literal parser from `ScalarType` because GraphQL already provides one.\\n- Added `extensions` and `introspection` configuration options to Django view.\\n- Updated requirements list to require `graphql-core` 3."},{"id":"/2020/04/01/ariadne-0-11-0","metadata":{"permalink":"/blog/2020/04/01/ariadne-0-11-0","source":"@site/blog/2020-04-01-ariadne-0-11-0.md","title":"Ariadne 0.11.0","description":"No joke, today we are releasing Ariadne 0.11!","date":"2020-04-01T00:00:00.000Z","tags":[],"readingTime":2.01,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne 0.11.0"},"unlisted":false,"prevItem":{"title":"Ariadne 0.12.0","permalink":"/blog/2020/08/04/ariadne-0-12-0"},"nextItem":{"title":"Ariadne 0.10.0","permalink":"/blog/2020/02/11/ariadne-0-10-0"}},"content":"No joke, today we are releasing Ariadne 0.11!\\n\\nAriadne 0.11 is an maintenance release focused on resolving few small but annoying issues reported by the community.\\n\\n\x3c!--truncate--\x3e\\n\\n## Removed support for sending queries and mutations via WebSocket\\n\\nFew weeks back we\'ve merged to Ariadne a change that enabled execution of GraphQL queries and mutations over the websocket connection - a feature implemented by some GraphQL client libraries such as [apollo-link-ws](https://www.apollographql.com/docs/link/links/ws/).\\n\\nOnly after release we have learned that logic testing if incoming GraphQL operation is subscription or not is incorrect, classifying correct subscription payloads sent by clients as queries, making it impossible to implement subscriptions in Ariadne 0.10.\\n\\nWe have decided to roll-back the change in 0.11, to make sure that subscriptions are still available to users that rely on them.\\n\\nWe have also added the feature to our [roadmap](https://github.com/mirumee/ariadne/issues/341) - contributions are welcome!\\n\\n## Unified default `info.context` value for WSGI to be dict with single `request` key\\n\\nThe type of default value of `info.context` differed between `ariadne.wsgi` and `ariadne.asgi`.\\n\\nWhile in ASGI it was a dict with single key `request` containing instance of current HTTP request, it in WSGI it was a dict containing HTTP request data as its attributes.\\n\\nCode examples in documentation assumed `info.context[\\"request\\"]` as means for accessing current HTTP request from resolver, which was source of confusion for those using Ariadne with WSGI.\\n\\nStarting with Ariadne 0.11, the default `context` value passed to resolvers is also dict with single key: `request`. This key\'s value is a dict containing current HTTP\'s request data as described by [WSGI specification](https://www.python.org/dev/peps/pep-0333/#environ-variables).\\n\\nIf you\'ve haven\'t customized the `context_value` option of your GraphQL application and your resolvers rely on `info.context`, this is a breaking change. You will have to update your resolvers to use `info.context[\\"request\\"]` for request data, or provide custom `context_value` function returning context in old shape:\\n\\n```\\napp = GraphQL(\\n    schema,\\n    type_defs,\\n    context_value=lambda environ: environ\\n)\\n```\\n\\n> _Note:_ This change applies only to `GraphQL` class importable directly from `ariadne.wsgi` module. If you are using Ariadne with `ariadne.contrib.django`, `info.context` will remain `django.http.HTTPRequest` instance.\\n\\n## CHANGELOG\\n\\n- Fixed `convert_kwargs_to_snake_case` utility so it also converts the case in lists items.\\n- Removed support for sending queries and mutations via WebSocket.\\n- Freezed `graphql-core` dependency at version 3.0.3.\\n- Unified default `info.context` value for WSGI to be dict with single `request` key."},{"id":"/2020/02/11/ariadne-0-10-0","metadata":{"permalink":"/blog/2020/02/11/ariadne-0-10-0","source":"@site/blog/2020-02-11-ariadne-0-10-0.md","title":"Ariadne 0.10.0","description":"We are happy to announce that Ariadne 0.10 is now available, bringing support for Apollo Federation to the library and adding the ability to send queries to the same channel as the subscription via WebSocket.","date":"2020-02-11T00:00:00.000Z","tags":[],"readingTime":0.91,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne 0.10.0"},"unlisted":false,"prevItem":{"title":"Ariadne 0.11.0","permalink":"/blog/2020/04/01/ariadne-0-11-0"},"nextItem":{"title":"Ariadne 0.9.0","permalink":"/blog/2019/12/11/ariadne-0-9-0"}},"content":"We are happy to announce that Ariadne 0.10 is now available, bringing support for `Apollo Federation` to the library and adding the ability to send queries to the same channel as the subscription via WebSocket.\\n\\n\x3c!--truncate--\x3e\\n\\n## Apollo Federation\\n\\nAriadne now supports building federated schemas. This means that we can compose many GraphQL services built with Ariadne (or other GraphQL libraries), into a single data graph and use it as if it was implemented as a monolithic service.\\n\\n```python\\nfrom ariadne import QueryType\\nfrom ariadne.asgi import GraphQL\\nfrom ariadne.contrib.federation import FederatedObjectType, make_federated_schema\\n\\ntype_defs = \\"\\"\\"\\n  type Query {\\n    me: User\\n  }\\n\\n  type User @key(fields: \\"email\\") {\\n    id: ID!\\n    name: String\\n    email: String!\\n  }\\n\\"\\"\\"\\n\\nquery = QueryType()\\nuser = FederatedObjectType(\\"User\\")\\n\\n\\n@user.reference_resolver\\ndef resolve_user_reference(_, _info, representation):\\n    return get_user_by_email(representation.get(\\"email\\"))\\n\\n\\nschema = make_federated_schema(type_defs, [query, user])\\napplication = GraphQL(schema)\\n```\\n\\nMany thanks to Delyan who [contributed this feature](https://github.com/mirumee/ariadne/pull/285). This is another time when community contributes such a large and much-requested feature to Ariadne. Thank you!\\n\\n## CHANGELOG\\n\\n- Added support for `Apollo Federation`.\\n- Added the ability to send queries to the same channel as the subscription via WebSocket."},{"id":"/2019/12/11/ariadne-0-9-0","metadata":{"permalink":"/blog/2019/12/11/ariadne-0-9-0","source":"@site/blog/2019-12-11-ariadne-0-9-0.md","title":"Ariadne 0.9.0","description":"Today we are releasing Ariadne 0.9 which moves from GraphQL-core-next to GraphQL-core v3 as its GraphQL implementation.","date":"2019-12-11T00:00:00.000Z","tags":[],"readingTime":1.55,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne 0.9.0"},"unlisted":false,"prevItem":{"title":"Ariadne 0.10.0","permalink":"/blog/2020/02/11/ariadne-0-10-0"},"nextItem":{"title":"Ariadne 0.8.0","permalink":"/blog/2019/11/25/ariadne-0-8-0"}},"content":"Today we are releasing Ariadne 0.9 which moves from GraphQL-core-next to GraphQL-core v3 as its GraphQL implementation.\\n\\n\x3c!--truncate--\x3e\\n\\n## About GraphQL Core and Core Next\\n\\nLets start with little history first. Both GraphQL-core and GraphQL-core-next are Python ports of reference GraphQL implementation, `graphql.js`. Key bit of difference between the two is the time at which they were developed, and thus Python features they support.\\n\\nGraphQL-core has started its life back in 2015 and supports Python 2.7, while work on GraphQL-core-next begun in 2018 and from day one it required Python 3.6 or 3.7 to work. It also supported then-new `asyncio` for improved query execution performance and proper [dataloader](https://github.com/syrusakbary/aiodataloader) pattern implementation in place of promises. It also had fully-typed codebase which made it much easier for us to reason about its codebase and develop custom abstractions on top of it.\\n\\nGraphQL-core was most famously used to build Graphene framework, which GraphQL-core-next has found wide use amongst the \\"new wave\\" of GraphQL libraries that came about in 2018.\\n\\nIt was always plan for GraphQL-core-next developers to eventually replace GraphQL-core as \\"default\\" Python GraphQL implementation and this has finally taken place on 30th November 2019 when GraphQL-core-next has been released as GraphQL-core 3.0.\\n\\nAriadne originally used GraphQL core for its implementation, but very quickly we\'ve made decision to move to core-next - something we\'ve never regretted as it enabled us to quickly adopt the new ecosystem of async web frameworks and libraries in our projects.\\n\\n## Upgrading to Ariadne 0.9\\n\\nBecause both GraphQL-core and GraphQL-core-next use the same `graphql` package name, it\'s required for projects using Ariadne to uninstall `Graphql-core-next` before upgrading their Ariadne dependency to 0.9.\\n\\n## CHANGELOG\\n\\n- Updated `graphql-core-next` to `graphql-core` 3."},{"id":"/2019/11/25/ariadne-0-8-0","metadata":{"permalink":"/blog/2019/11/25/ariadne-0-8-0","source":"@site/blog/2019-11-25-ariadne-0-8-0.md","title":"Ariadne 0.8.0","description":"Ariadne 0.8 release brings improvements to API modularization, makes python-multipart optional dependency, and updates dependencies to latest versions. We have also added Python 3.8 to the list of officially supported Python versions.","date":"2019-11-25T00:00:00.000Z","tags":[],"readingTime":1.83,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne 0.8.0"},"unlisted":false,"prevItem":{"title":"Ariadne 0.9.0","permalink":"/blog/2019/12/11/ariadne-0-9-0"},"nextItem":{"title":"Ariadne 0.7.0","permalink":"/blog/2019/10/03/ariadne-0-7-0"}},"content":"Ariadne 0.8 release brings improvements to API modularization, makes `python-multipart` optional dependency, and updates dependencies to latest versions. We have also added Python 3.8 to the list of officially supported Python versions.\\n\\n\x3c!--truncate--\x3e\\n\\n## Modularization improvements\\n\\nWe\'ve noticed an emerging pattern in GraphQL APIs implemented with Ariadne where developers create dedicated modules/packages in their project for scalars, mutations or types and then use their `__init__.py\'s` to gather all bindables into single lists:\\n\\n```python\\nfrom .scalars import scalars  # [date_scalar, datetime_scalar]\\nfrom .types import types  # [query, book, user]\\nfrom .mutations import mutations  # [login, register, add_book, edit_book, publish_book, delete_book]\\n```\\n\\nThose lists were then combined into single large list at the time of passing them to `make_executable_schema`:\\n\\n```python\\nschema = make_executable_schema(type_defs, scalars + types + mutations)\\n```\\n\\nThis code didn\'t look too pleasant to us, and things only became worse when single bindable was thrown into the mix:\\n\\n```python\\nfrom somewhere import library_type\\n\\nschema = make_executable_schema(type_defs, scalars + types + mutations + [library_type])\\n```\\n\\nWe\'ve decided to change `make_executable_schema` implementation and turn `bindables` into `*args`, enabling much cleaner syntax:\\n\\n```python\\nschema = make_executable_schema(type_defs, scalars, types, mutations, library_type)\\n```\\n\\nFor the time being both approaches are be supported (and also can be mixed at same time), but we recommend all developers to migrate their projects to new approach.\\n\\nIn future version of Ariadne mixing lists with single bindables will require explicit syntax:\\n\\n```python\\nschema = make_executable_schema(type_defs, *scalars, *types, *mutations, library_type])\\n```\\n\\nWe have also fixed `load_schema_from_path` implementation to actually walk subdirectories in given path to find and parse `*.graphql` files, as it was documented.\\n\\n## `python-multipart` is now an optional dependency\\n\\nWe have received a feedback that always installing `python-multipart` dependency is unwarranted behavior due to library being only required for file uploads in ASGI-based GraphQL servers and having potential name conflict with other library.\\n\\nTo address this we have made library optional. Developers may opt-in to install it by using `asgi-file-uploads` extra flag:\\n\\n```console\\npip install ariadne[asgi-file-uploads]\\n```\\n\\n## CHANGELOG\\n\\n- Added recursive loading of GraphQL schema files from provided path.\\n- Added support for passing multiple bindables as `*args` to `make_executable_schema`.\\n- Updated Starlette dependency to 0.13.\\n- Made `python-multipart` optional dependency for `asgi-file-uploads`.\\n- Added Python 3.8 to officially supported versions."},{"id":"/2019/10/03/ariadne-0-7-0","metadata":{"permalink":"/blog/2019/10/03/ariadne-0-7-0","source":"@site/blog/2019-10-03-ariadne-0-7-0.md","title":"Ariadne 0.7.0","description":"Ariadne 0.7 brings support for custom schema directives and synchronous extensions.","date":"2019-10-03T00:00:00.000Z","tags":[],"readingTime":2.21,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne 0.7.0"},"unlisted":false,"prevItem":{"title":"Ariadne 0.8.0","permalink":"/blog/2019/11/25/ariadne-0-8-0"},"nextItem":{"title":"Ariadne 0.6.0","permalink":"/blog/2019/08/12/ariadne-0-6-0"}},"content":"Ariadne 0.7 brings support for custom schema directives and synchronous extensions.\\n\\n\x3c!--truncate--\x3e\\n\\n## Custom schema directives\\n\\nIn SDL, schema directives act as annotations adding extra information and meaning to schema\'s items. Ariadne already supported the `@deprecated` directive described by the specification and enabled developers to declare custom directives in schema with `directive @example on` syntax, but until now there was no obvious and easy way for developers to implement behavior for those:\\n\\n```graphql\\ndirective @requireRole(role: Role!) on FIELD_DEFINITION\\n\\nenum Role {\\n  USER\\n  MODERATOR\\n}\\n\\ntype Query {\\n  reportedContent: [Posts!] @requireRole(role: MODERATOR)\\n}\\n```\\n\\nAriadne 0.7 provides the [`SchemaDirectiveVisitor`](/server/schema-directives) type that is associated with specified annotation in schema by developer, and can be used to perform changes in the schema like wrapping annotated fields resolvers with custom one:\\n\\n```python\\nclass RequireRoleSchemaDirective(SchemaDirectiveVisitor):\\n    def visit_field_definition(self, field, object_type):\\n        role = self.args.get(\\"role\\")\\n        original_resolver = field.resolve or default_field_resolver\\n\\n        def resolve_with_role_check(obj, info, **kwargs):\\n            if role not in info.context[\\"roles\\"]:\\n                return None\\n\\n            return original_resolver(obj, info, **kwargs)\\n\\n        field.resolve = resolve_with_permission_check\\n        return field\\n```\\n\\nI\'m also very happy to add that custom schema directives implementation is [a contribution from Yasin Bahtiyar](https://github.com/mirumee/ariadne/pull/222). Thank you!\\n\\n## Synchronous extensions\\n\\nAriadne 0.6 released with support for extensions, but those were only implemented for asynchronous servers (running with ASGI). Thanks to [contribution by Daniel Rice](https://github.com/mirumee/ariadne/pull/239), Ariadne now also supports extensions in WSGI servers, and the documentation has been updated accordingly. We\'ve also added synchronous versions of Apollo trace and OpenTracing extensions.\\n\\nWe\'ve also updated existing extensions API, making `context` available to `has_errors` and `format` hooks.\\n\\n## Hacktoberfest\\n\\n[Hacktoberfest 2019](https://hacktoberfest.digitalocean.com/) is underway, and we are participating! Make sure you check Ariadne\'s issue tracker for issues labeled with [\\"hacktoberfest\\"](https://github.com/mirumee/ariadne/issues?q=is%3Aissue+is%3Aopen+label%3Ahacktoberfest) if you want to help!\\n\\n## GraphQL federations\\n\\nWe would like to use this opportunity to also give a shout out to Ales Zoulek, who has [implemented GraphQL federations support for Ariadne](https://spectrum.chat/ariadne/general/graphql-federation-with-ariadne~bb5ba9a5-4a81-4d45-b0af-a0f7bfc758a5).\\n\\nFederations are latest hotness in the GraphQL world - they provide a way to combine multiple GraphQL APIs into one. We would love for Ariadne to provide out-of-the box support for this, but getting such a feature to a state when it can be included to library\'s codebase is a considerable task.\\n\\nYou can help! [Test federation](https://github.com/pantheon-systems/ariadne-extensions) in your projects, report issues and contribute bugfixes and tests!\\n\\n## CHANGELOG\\n\\n- Added support for custom schema directives.\\n- Added support for synchronous extensions and synchronous versions of `ApolloTracing` and `OpenTracing` extensions.\\n- Added `context` argument to `has_errors` and `format` hooks."},{"id":"/2019/08/12/ariadne-0-6-0","metadata":{"permalink":"/blog/2019/08/12/ariadne-0-6-0","source":"@site/blog/2019-08-12-ariadne-0-6-0.md","title":"Ariadne 0.6.0","description":"Ariadne 0.6 is now available, bringing bug fixes, extensions and support for application performance monitoring.","date":"2019-08-12T00:00:00.000Z","tags":[],"readingTime":1.68,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne 0.6.0"},"unlisted":false,"prevItem":{"title":"Ariadne 0.7.0","permalink":"/blog/2019/10/03/ariadne-0-7-0"},"nextItem":{"title":"Ariadne 0.5.0","permalink":"/blog/2019/06/07/ariadne-0-5-0"}},"content":"Ariadne 0.6 is now available, bringing bug fixes, extensions and support for application performance monitoring.\\n\\n\x3c!--truncate--\x3e\\n\\n## Extensions and middlewares\\n\\n[Extensions support](/server/extensions) is now available. Extensions can be used to add custom monitoring to the API, as well as inject custom logic into query execution process.\\n\\n0.6 also formalizes our support for the [GraphQL middlewares](/server/middleware), which enable developers to wrap resolvers used by server with custom logic.\\n\\nExtensions are only available in GraphQL servers running over the ASGI, but middlewares are supported by both ASGI and WSGI servers.\\n\\n## Apollo tracing and OpenTracing monitoring extensions.\\n\\n`ariadne.contrib.tracing` package has been added to the library that provides extensions for easy enabling application performance metrics in GraphQL Server.\\n\\n[Apollo tracing](/server/apollo-tracing) extension adds query\'s trace data to the results JSON. This data can then be viewed using the `TRACE` option in GraphQL Playground.\\n\\n[OpenTracing](/server/open-tracing) extension can be used to monitor GraphQL API for performance and errors using popular APM tools like [Jaeger](https://www.jaegertracing.io) or [Datadog](https://www.datadoghq.com/):\\n\\n![GraphQL query traced in Jaeger](assets/open-tracing.png)\\n\\n## CHANGELOG\\n\\n- Updated `graphql-core-next` to 1.1.1 which has feature parity with GraphQL.js 14.4.0.\\n- Added basic extensions system to the `ariadne.graphql.graphql`. Currently only available in the `ariadne.asgi.GraphQL` app.\\n- Added `convert_kwargs_to_snake_case` utility decorator that recursively converts the case of arguments passed to resolver from `camelCase` to `snake_case`.\\n- Removed `default_resolver` and replaced its uses in library with `graphql.default_field_resolver`.\\n- Resolver returned by `resolve_to` util follows `graphql.default_field_resolver` behaviour and supports resolving to callables.\\n- Added `is_default_resolver` utility for checking if resolver function is `graphql.default_field_resolver`, resolver created with `resolve_to` or `alias`.\\n- Added `ariadne.contrib.tracing` package with `ApolloTracingExtension` and `OpenTracingExtension` GraphQL extensions for adding Apollo tracing and OpenTracing monitoring to the API (ASGI only).\\n- Updated ASGI app disconnection handler to also check client connection state.\\n- Fixed ASGI app `context_value` option support for async callables.\\n- Updated `middleware` option implementation in ASGI and WSGI apps to accept list of middleware functions or callable returning those.\\n- Moved error formatting utils (`get_formatted_error_context`, `get_formatted_error_traceback`, `unwrap_graphql_error`) to public API."},{"id":"/2019/06/07/ariadne-0-5-0","metadata":{"permalink":"/blog/2019/06/07/ariadne-0-5-0","source":"@site/blog/2019-06-07-ariadne-0-5-0.md","title":"Ariadne 0.5.0","description":"Just weeks after 0.4 we are now releasing Ariadne 0.5!","date":"2019-06-07T00:00:00.000Z","tags":[],"readingTime":0.38,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne 0.5.0"},"unlisted":false,"prevItem":{"title":"Ariadne 0.6.0","permalink":"/blog/2019/08/12/ariadne-0-6-0"},"nextItem":{"title":"Ariadne 0.4.0","permalink":"/blog/2019/05/23/ariadne-0-4-0"}},"content":"Just weeks after 0.4 we are now releasing Ariadne 0.5!\\n\\n\x3c!--truncate--\x3e\\n\\nThis release is all about delivering one new feature to the developers: file uploads.\\n\\n## File uploads\\n\\n[File uploads](/server/file-uploads) are now available. Implementation follows the [GraphQL file uploads specification](https://github.com/jaydenseric/graphql-multipart-request-spec), which means that Ariadne is fully compatible with client uploading implementations like [apollo-upload-client](https://github.com/jaydenseric/apollo-upload-client).\\n\\n## CHANGELOG\\n\\n- Added support for file uploads."},{"id":"/2019/05/23/ariadne-0-4-0","metadata":{"permalink":"/blog/2019/05/23/ariadne-0-4-0","source":"@site/blog/2019-05-23-ariadne-0-4-0.md","title":"Ariadne 0.4.0","description":"Ariadne 0.4.0 is now available, and with it bunch of features and improvements for developer experience, and bugfixes!","date":"2019-05-23T00:00:00.000Z","tags":[],"readingTime":2.71,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne 0.4.0"},"unlisted":false,"prevItem":{"title":"Ariadne 0.5.0","permalink":"/blog/2019/06/07/ariadne-0-5-0"},"nextItem":{"title":"Ariadne 0.3.0","permalink":"/blog/2019/04/08/ariadne-0-3-0"}},"content":"Ariadne 0.4.0 is now available, and with it bunch of features and improvements for developer experience, and bugfixes!\\n\\n\x3c!--truncate--\x3e\\n\\n## ASGI 3\\n\\nOur ASGI application has been updated to support version 3 of ASGI protocol, courtesy of [Starlette 0.12](https://www.starlette.io/).\\n\\n## Easier Django integration\\n\\nWe want to make process of starting out with GraphQL in Django easy. In Ariadne 0.3 we\'ve provided example code on our docs that you could\'ve copypasted to your project.\\n\\nThis approach was less than optimal, so in Ariadne 0.4 we are introducing `ariadne.contrib.django` package that acts as Django app and provides GraphQL view that you can simply drop in your `urls.py`:\\n\\n```python\\nfrom ariadne.contrib.django.views import GraphQLView\\nfrom django.urls import path\\n\\nfrom .schema import schema\\n\\nurlpatterns = [\\n    ...\\n    path(\'graphql/\', GraphQLView.as_view(schema=schema), name=\'graphql\'),\\n]\\n```\\n\\nTo to sweeten the deal even, we are also providing two scalar implementations: `Date` and `Datetime`. Those two enable developers to exchange dates and datetimes between their UI and Python logic.\\n\\n## Error reporting improvements\\n\\nIn Ariadne 0.3 we\'ve introduced extended error formatting support that added error\'s backtrace and content to GraphQL response, making it so much easier to get to source of the problem when debugging resolvers.\\n\\nIn 0.4 we are further improving error reporting with introduction of error logging.\\n\\nInternally Ariadne creates own logger, and then logs all errors and exceptions to it, enabling you to stay on the top of the situation. We\'ve took extra care to make sure that logged errors contain not only information about field in GraphQL query that failed to resolve, but also actual exception data. It also plays good with existing error tracking systems like [Sentry](https://sentry.io):\\n\\n![Error logged to Sentry](assets/error-in-sentry.png)\\n\\n## Keeping you covered\\n\\nBased on feedback and reports we\'ve received from early adopters we\'ve added bunch of assertions and checks around our API to fail fast and let you spot your errors before your users do.\\n\\nAlso, because in 99% of cases custom scalar literal parser is just a thin wrapper unpacking value from AST `ValueNode` and passing for value_parser, Ariadne 0.4 will provide this mechanism for you out of the box. If you still need custom literal handling logic - you can still do it.\\n\\n## CHANGELOG\\n\\nAbove were only the highlights of this release. Here\'s complete changelog for those interested in nitty-gritty details:\\n\\n- Updated `graphql-core-next` to 1.0.4 which has feature parity with GraphQL.js 14.3.1 and better type annotations.\\n- `ariadne.asgi.GraphQL` is now an ASGI3 application. ASGI3 is now handled by all ASGI servers.\\n- `ObjectType.field` and `SubscriptionType.source` decorators now raise ValueError when used without name argument (eg. `@foo.field`).\\n- `ScalarType` will now use default literal parser that unpacks `ast.value` and calls value parser if scalar has value parser set.\\n- Updated `ariadne.asgi.GraphQL` and `ariadne.wsgi.GraphQL` to support callables for `context_value` and `root_value` options.\\n- Added `logger` option to `ariadne.asgi.GraphQL`, `ariadne.wsgi.GraphQL` and `ariadne.graphql.*` utils.\\n- Added default logger that logs to `ariadne`.\\n- Added support for `extend type` in schema definitions.\\n- Removed unused `format_errors` utility function and renamed `ariadne.format_errors` module to `ariadne.format_error`.\\n- Removed explicit `typing` dependency.\\n- Added `ariadne.contrib.django` package that provides Django class-based view together with `Date` and `Datetime` scalars.\\n- Fixed default ENUM values not being set.\\n- Updated project setup so mypy ran in projects with Ariadne dependency run type checks against it\'s annotations.\\n- Updated Starlette to 0.12.0."},{"id":"/2019/04/08/ariadne-0-3-0","metadata":{"permalink":"/blog/2019/04/08/ariadne-0-3-0","source":"@site/blog/2019-04-08-ariadne-0-3-0.md","title":"Ariadne 0.3.0","description":"Ariadne 0.3.0 release is focused on further improving the support for GraphQL specification and developer experience.","date":"2019-04-08T00:00:00.000Z","tags":[],"readingTime":1.11,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne 0.3.0"},"unlisted":false,"prevItem":{"title":"Ariadne 0.4.0","permalink":"/blog/2019/05/23/ariadne-0-4-0"},"nextItem":{"title":"Ariadne 0.2.0","permalink":"/blog/2019/01/11/ariadne-0-2-0"}},"content":"Ariadne 0.3.0 release is focused on further improving the support for GraphQL specification and developer experience.\\n\\n\x3c!--truncate--\x3e\\n\\nIt adds support for subscriptions, enums, interfaces and union GraphQL types, and unifies the API across those types. It also greatly improves developer experience by the inclusion of debug mode, error reporting, and includes `graphql`, `graphql_sync` and `subscribe` wrappers that ease integrations with existing sites greatly. Lastly, it also provides `ASGI` application that works with asynchronous servers and frameworks like Uvicorn and [Starlette](https://starlette.io)\\n\\n## CHANGELOG\\n\\n- Added `EnumType` type for mapping enum variables to internal representation used in application.\\n- Added support for subscriptions.\\n- Updated Playground to 1.8.7.\\n- Split `GraphQLMiddleware` into two classes and moved it to `ariadne.wsgi`.\\n- Added an ASGI interface based on Starlette under `ariadne.asgi`.\\n- Replaced the simple server utility with Uvicorn.\\n- Made users responsible for calling `make_executable_schema`.\\n- Added `UnionType` and `InterfaceType` types.\\n- Updated library API to be more consistent between types, and work better with code analysis tools like PyLint. Added `QueryType` and `MutationType` convenience utils. Suffixed all types names with `Type` so they are less likely to clash with other libraries built-ins.\\n- Improved error reporting to also include Python exception type, traceback and context in the error JSON. Added `debug` and `error_formatter` options to enable developer customization.\\n- Introduced Ariadne wrappers for `graphql`, `graphql_sync`, and `subscribe` to ease integration into custom servers."},{"id":"/2019/01/11/ariadne-0-2-0","metadata":{"permalink":"/blog/2019/01/11/ariadne-0-2-0","source":"@site/blog/2019-01-11-ariadne-0-2-0.md","title":"Ariadne 0.2.0","description":"Making Python GraphQL better one release at a time\u2026","date":"2019-01-11T00:00:00.000Z","tags":[],"readingTime":4.16,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne 0.2.0"},"unlisted":false,"prevItem":{"title":"Ariadne 0.3.0","permalink":"/blog/2019/04/08/ariadne-0-3-0"},"nextItem":{"title":"Ariadne 0.1.0","permalink":"/blog/2018/10/31/ariadne-0-1-0"}},"content":"Making Python GraphQL better one release at a time\u2026\\n\\n\x3c!--truncate--\x3e\\n\\n## Wait a minute, what\u2019s Ariadne?\\n\\nAriadne is a library we\u2019ve created that enables Python developers to implement GraphQL servers using SDL for defining schema and keeping the amount of boilerplate minimal. It\u2019s the new kid on the block, but it\u2019s the only Python library that offers this approach to developing GraphQL APIs. If you\u2019ve been envious of what Apollo Server can do, we are happy to let you know it\u2019s the main source of inspiration for what we are doing.\\n\\n**Version 0.2.0 of Aridane is now available** for installation from [pypi.org](https://pypi.org/project/ariadne/), bringing plenty of goodies and improvements with it! We are doubling down for a better developer experience.\\n\\nTo find more about Ariadne, [grab the code at GitHub](https://github.com/mirumee/ariadne), or [see the docs](https://ariadne.readthedocs.io/). But for now, let\u2019s dive into version 0.2.0:\\n\\n## Feature parity with GraphQL.js version 14.0.2\\n\\nAriadne now has feature parity with GraphQL.js 14.0.2\u200A\u2014\u200Athe latest release of GraphQL reference implementation. This was achieved by updating the library\u2019s codebase to use [GraphQL-core-next](https://github.com/graphql-python/graphql-core-next) instead of GraphQL-core as its GraphQL implementation.\\n\\nThis GraphQL implementation was build using modern Python features and relies on asyncio for asynchronous query execution, meaning you can now use \u201Casync\u201D with your resolvers.\\n\\nDue to this change we\u2019ve also dropped support for Python 3.5 in Ariadne 0.2.0, now requiring Python 3.6 or 3.7.\\n\\n## New API\\n\\nWe are strong believers that library design should be simple to learn, but strict enough to not leave much room for developer error. In Ariadne 0.1.0 We relied on dicts for mapping resolvers to schema\u200A\u2014\u200Aan idea we\u2019ve took directly from the Apollo-Server:\\n\\n```python\\ndef resolve_users():\\n    # \u2026\\n\\nresolvers = {\\n    \u201CQuery\u201D: {\\n        \u201Cusers\u201D: resolve_users\\n    }\\n}\\n```\\n\\nThis looked like a good idea at first: the pattern is proven and widely adopted in software; it uses basic Python types and is easy to memorize.\\n\\nHowever, as soon as we moved to larger APIs, we found an issue in this approach; because Python doesn\u2019t allow functions to be declared inside dicts, developers quickly end up with a file containing a number of function definitions followed by one big dict mapping those resolvers to their schema. Because that dict was usually out of their focus, a pattern started to emerge in which a developer would declare resolvers but forget to update the dict, thus not adding those resolvers to schema and surprising/confusing the dev.\\n\\nAriadne 0.2.0 does away with this by introducing dedicated objects for mapping resolvers to GraphQL types:\\n\\n```python\\nfrom ariadne import ResolverMap\\n\\nquery = ResolverMap(\u201CQuery\u201D)\\n\\n@query.field(\u201Cusers\u201D)\\ndef resolve_users():\\n    # \u2026\\n```\\n\\nIn this new approach the resolver can be mapped to a declared sample field. This creates a more natural order of things: type -> field -> resolver.\\n\\nAs a bonus, ResolverMap also implements simple validation logic and will raise an error if a type or field doesn\u2019t exist in the schema.\\n\\nMake sure to check the [docs](/server/resolvers) for more examples and information about API changes.\\n\\n## Better interoperability with Apollo tools for developers\\n\\nAriadne now supports loading schema from \\\\*.graphql files, enabling developers to use an [Apollo GraphQL plugin for VS Code](https://marketplace.visualstudio.com/items?itemName=apollographql.vscode-apollo) when writing schema for their API.\\n\\nWe\u2019ve also created a PR (already merged and released!) that supports marking strings in Python code as GraphQL using a simple `gql()` function:\\n\\n![GQL syntax coloring in action](assets/gql-colors-gif.gif)\\n\\nIt\u2019s now not only an awesome GraphQL tooling and a first-class development experience for Python developers, it\u2019s also a single set of tools that can now be shared by backend and frontend developers while working on the same project.\\n\\nWe consider this a game-changer for software projects where a Python backend is developed together with a GraphQL frontend.\\n\\n## Setting the scene for 2019\\n\\nThe latest Ariadne release already has all the features required by real-world GraphQL API implementations\u2026 but we are not stopping there.\\n\\nIt is our goal to make the Python GraphQL experience as great as Node.js GraphQL. To achieve this end, we will continue improving Ariadne to offer a better developer experience and solve the ever-greater problem of space:\\n\\n- Iterate on our documentation to show you how to use Ariadne and how to develop GraphQL servers using good practices and patterns\\n- Deliver better abstractions for integration with existing server and framework libraries\\n- Implement solutions for patterns and problems not specific to the GraphQL core, like query cost validators or connection types\\n\\nWe have some great things in the pipeline we can\u2019t wait to show you!\\n\\n## Thank you!\\n\\nThanks so much for you response and engagement since the release; it has surprised and motivated us. Ariadne is open source and developed on [GitHub](https://github.com/mirumee/ariadne/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22); we invite folk to give it a look and check out the issues marked with \u201Chelp wanted\u201D. PRs are very welcome!"},{"id":"/2018/10/31/ariadne-0-1-0","metadata":{"permalink":"/blog/2018/10/31/ariadne-0-1-0","source":"@site/blog/2018-10-31-ariadne-0-1-0.md","title":"Ariadne 0.1.0","description":"Hello world!","date":"2018-10-31T00:00:00.000Z","tags":[],"readingTime":0.27,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Ariadne 0.1.0"},"unlisted":false,"prevItem":{"title":"Ariadne 0.2.0","permalink":"/blog/2019/01/11/ariadne-0-2-0"}},"content":"Hello world!\\n\\n\x3c!--truncate--\x3e\\n\\nAriadne 0.1.0 is first release of Ariadne that out of the box implements following features:\\n\\n- WSGI Middleware for adding GraphQL API to existing sites\\n- Built-in dev server that enables developers to start experimenting quickly\\n- GraphQL Playground as API explorer\\n- Resolvers, mutations, custom scalars, inputs and enums\\n- Modularization support\\n- Documentation"}]}}')}}]);