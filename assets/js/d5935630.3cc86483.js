"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["13687"],{84164:function(e,n,r){r.r(n),r.d(n,{frontMatter:()=>s,toc:()=>d,default:()=>p,metadata:()=>t,assets:()=>l,contentTitle:()=>a});var t=JSON.parse('{"id":"unions","title":"Union types","description":"When designing your API, you may run into a situation where you want your field to resolve to one of a few possible types. It may be an error field that can resolve to one of many error types, or an activity feed made up of different types.","source":"@site/server_versioned_docs/version-0.25/unions.md","sourceDirName":".","slug":"/unions","permalink":"/server/unions","draft":false,"unlisted":false,"tags":[],"version":"0.25","frontMatter":{"id":"unions","title":"Union types"},"sidebar":"tutorialSidebar","previous":{"title":"Enumeration types","permalink":"/server/enums"},"next":{"title":"Interface types","permalink":"/server/interfaces"}}'),o=r(74848),i=r(84429);let s={id:"unions",title:"Union types"},a,l={},d=[{value:"Union example",id:"union-example",level:2},{value:"<code>__typename</code> field",id:"__typename-field",level:2}];function c(e){let n={blockquote:"blockquote",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["When designing your API, you may run into a situation where you want your field to resolve to one of a few possible types. It may be an ",(0,o.jsx)(n.code,{children:"error"})," field that can resolve to one of many error types, or an activity feed made up of different types."]}),"\n",(0,o.jsx)(n.p,{children:'The most obvious solution may be creating a custom "intermediary" type that would define dedicated fields to different types:'}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-graphql",children:"type MutationResult {\n    status: Boolean!\n    validationError: ValidationError\n    permissionError: AccessError\n    user: User\n}\n\ntype FeedItem {\n    post: Post\n    image: Image\n    user: User\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["GraphQL provides a dedicated solution to this problem in the form of dedicated ",(0,o.jsx)(n.code,{children:"Union"})," type."]}),"\n",(0,o.jsx)(n.h2,{id:"union-example",children:"Union example"}),"\n",(0,o.jsx)(n.p,{children:"Consider an earlier error example. The union representing one of a possible three error types can be defined in schema like this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-graphql",children:"union Error = NotFoundError | AccessError | ValidationError\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This ",(0,o.jsx)(n.code,{children:"Error"})," type can be used just like any other type:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-graphql",children:"type MutationResult {\n    status: Boolean!\n    error: Error\n    user: User\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Your union will also need a special resolver called a ",(0,o.jsx)(n.em,{children:"type resolver"}),". This resolver will be called with an object returned from a field resolver and the current context.\nIt should return a string containing the name of a GraphQL type, or ",(0,o.jsx)(n.code,{children:"None"})," if the received type is incorrect:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'def resolve_error_type(obj, *_):\n    if isinstance(obj, ValidationError):\n        return "ValidationError"\n    if isinstance(obj, AccessError):\n        return "AccessError"\n    return None\n'})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["Returning ",(0,o.jsx)(n.code,{children:"None"})," from this resolver will result in ",(0,o.jsx)(n.code,{children:"null"})," being returned for this field in your query's result. If field is not nullable, this will cause the GraphQL query to error."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Ariadne relies on the dedicated ",(0,o.jsx)(n.code,{children:"UnionType"})," class for binding this function to ",(0,o.jsx)(n.code,{children:"Union"}),"s in your schema:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from ariadne import UnionType\n\nerror = UnionType("Error")\n\n@error.type_resolver\ndef resolve_error_type(obj, *_):\n    ...\n'})}),"\n",(0,o.jsxs)(n.p,{children:["If this function is already defined elsewhere (e.g. 3rd party package), you can instantiate the ",(0,o.jsx)(n.code,{children:"UnionType"})," with it as the second argument:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from ariadne import UnionType\nfrom .graphql import resolve_error_type\n\nerror = UnionType("Error", resolve_error_type)\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Lastly, your ",(0,o.jsx)(n.code,{children:"UnionType"})," instance should be passed to ",(0,o.jsx)(n.code,{children:"make_executable_schema"})," together with your other types:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"schema = make_executable_schema(type_defs, [query, error])\n"})}),"\n",(0,o.jsxs)(n.h2,{id:"__typename-field",children:[(0,o.jsx)(n.code,{children:"__typename"})," field"]}),"\n",(0,o.jsxs)(n.p,{children:["Every type in GraphQL has a special ",(0,o.jsx)(n.code,{children:"__typename"})," field that is resolved to a string containing the type's name."]}),"\n",(0,o.jsx)(n.p,{children:"Including this field in your query may simplify implementation of result-handling logic in your client:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-graphql",children:"query getFeed {\n    feed {\n        __typename\n        ... on Post {\n            text\n        }\n        ... on Image {\n            url\n        }\n        ... on User {\n            username\n        }\n    }\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Assuming that the feed is a list, the query could produce the following response:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n    "data": {\n        "feed": [\n            {\n                "__typename": "User",\n                "username": "Bob"\n            },\n            {\n                "__typename": "User",\n                "username": "Aerith"\n            },\n            {\n                "__typename": "Image",\n                "url": "http://placekitten.com/200/300"\n            },\n            {\n                "__typename": "Post",\n                "text": "Hello world!"\n            },\n            {\n                "__typename": "Image",\n                "url": "http://placekitten.com/200/300"\n            }\n        ]\n    }\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Client code could check the ",(0,o.jsx)(n.code,{children:"__typename"})," value of every item in the feed to decide how it should be displayed in the interface."]})]})}function p(e={}){let{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},84429:function(e,n,r){r.d(n,{R:()=>s,x:()=>a});var t=r(96540);let o={},i=t.createContext(o);function s(e){let n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);