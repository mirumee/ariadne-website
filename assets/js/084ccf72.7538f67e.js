"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["86829"],{26024:function(e,s,n){n.r(s),n.d(s,{frontMatter:()=>o,toc:()=>t,default:()=>h,metadata:()=>r,assets:()=>c,contentTitle:()=>i});var r=JSON.parse('{"id":"types-reference","title":"Types reference","description":"Ariadne uses type annotations in its codebase.","source":"@site/server_versioned_docs/version-0.10.0/types-reference.md","sourceDirName":".","slug":"/types-reference","permalink":"/server/0.10.0/types-reference","draft":false,"unlisted":false,"tags":[],"version":"0.10.0","frontMatter":{"id":"types-reference","title":"Types reference","sidebar_label":"ariadne.types"},"sidebar":"tutorialSidebar","previous":{"title":"ariadne.exceptions","permalink":"/server/0.10.0/exceptions-reference"},"next":{"title":"Ariadne logo","permalink":"/server/0.10.0/logo"}}'),l=n(74848),d=n(84429);let o={id:"types-reference",title:"Types reference",sidebar_label:"ariadne.types"},i,c={},t=[{value:"<code>ContextValue</code>",id:"contextvalue",level:2},{value:"<code>ErrorFormatter</code>",id:"errorformatter",level:2},{value:"Required arguments",id:"required-arguments",level:3},{value:"<code>error</code>",id:"error",level:4},{value:"<code>debug</code>",id:"debug",level:4},{value:"<code>Extension</code>",id:"extension",level:2},{value:"Methods",id:"methods",level:3},{value:"<code>format</code>",id:"format",level:4},{value:"Example",id:"example",level:5},{value:"<code>has_errors</code>",id:"has_errors",level:4},{value:"<code>request_finished</code>",id:"request_finished",level:4},{value:"<code>request_started</code>",id:"request_started",level:4},{value:"<code>resolve</code>",id:"resolve",level:4},{value:"<code>ExtensionSync</code>",id:"extensionsync",level:2},{value:"<code>GraphQLResult</code>",id:"graphqlresult",level:2},{value:"<code>Resolver</code>",id:"resolver",level:2},{value:"Required arguments",id:"required-arguments-1",level:3},{value:"<code>obj</code>",id:"obj",level:4},{value:"<code>info</code>",id:"info",level:4},{value:"<code>**kwargs</code>",id:"kwargs",level:4},{value:"<code>RootValue</code>",id:"rootvalue",level:2},{value:"<code>SchemaBindable</code>",id:"schemabindable",level:2},{value:"Methods",id:"methods-1",level:3},{value:"<code>bind_to_schema</code>",id:"bind_to_schema",level:4},{value:"<code>Subscriber</code>",id:"subscriber",level:2},{value:"Required arguments",id:"required-arguments-2",level:3},{value:"<code>root_value</code>",id:"root_value",level:4},{value:"<code>info</code>",id:"info-1",level:4},{value:"<code>**kwargs</code>",id:"kwargs-1",level:4},{value:"<code>SubscriptionResult</code>",id:"subscriptionresult",level:2}];function a(e){let s={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(s.p,{children:["Ariadne uses ",(0,l.jsx)(s.a,{href:"https://www.python.org/dev/peps/pep-0484/",children:"type annotations"})," in its codebase."]}),"\n",(0,l.jsxs)(s.p,{children:["Many parts of its API share or rely on common types, importable from ",(0,l.jsx)(s.code,{children:"ariadne.types"})," module:"]}),"\n",(0,l.jsx)(s.h2,{id:"contextvalue",children:(0,l.jsx)(s.code,{children:"ContextValue"})}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-python",children:"Any\n"})}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-python",children:"def get_context_value(request):\n"})}),"\n",(0,l.jsxs)(s.p,{children:["Context value that should be passed to [resolvers] through the ",(0,l.jsx)(s.a,{href:"#info",children:(0,l.jsx)(s.code,{children:"info.context"})}),". Can be of any type."]}),"\n",(0,l.jsx)(s.p,{children:"If value is callable, it will be called with single argument:"}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"request"})," - representation of HTTP request specific to the web stack used by your API."]}),"\n"]}),"\n",(0,l.jsxs)(s.p,{children:["Return value will then be used as final ",(0,l.jsx)(s.code,{children:"context"})," passed to resolvers."]}),"\n",(0,l.jsx)(s.hr,{}),"\n",(0,l.jsx)(s.h2,{id:"errorformatter",children:(0,l.jsx)(s.code,{children:"ErrorFormatter"})}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-python",children:"def format_error(error, debug):\n"})}),"\n",(0,l.jsx)(s.p,{children:"Callabe used to format errors into JSON-serializable form."}),"\n",(0,l.jsxs)(s.p,{children:["Should return a Python ",(0,l.jsx)(s.code,{children:"dict"}),"."]}),"\n",(0,l.jsx)(s.h3,{id:"required-arguments",children:"Required arguments"}),"\n",(0,l.jsx)(s.h4,{id:"error",children:(0,l.jsx)(s.code,{children:"error"})}),"\n",(0,l.jsxs)(s.p,{children:["Instance of ",(0,l.jsx)(s.a,{href:"https://github.com/graphql-python/graphql-core-next/blob/v1.0.5/graphql/error/graphql_error.py#L15",children:(0,l.jsx)(s.code,{children:"graphql.error.GraphQLError"})})," to be formatted."]}),"\n",(0,l.jsx)(s.h4,{id:"debug",children:(0,l.jsx)(s.code,{children:"debug"})}),"\n",(0,l.jsx)(s.p,{children:"Boolean controlling if debug information should be included in formatted data."}),"\n",(0,l.jsx)(s.hr,{}),"\n",(0,l.jsx)(s.h2,{id:"extension",children:(0,l.jsx)(s.code,{children:"Extension"})}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-python",children:"class Extension()\n"})}),"\n",(0,l.jsxs)(s.p,{children:["Base class for ",(0,l.jsx)(s.a,{href:"/server/0.10.0/extensions",children:"extensions"}),"."]}),"\n",(0,l.jsx)(s.h3,{id:"methods",children:"Methods"}),"\n",(0,l.jsx)(s.h4,{id:"format",children:(0,l.jsx)(s.code,{children:"format"})}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-python",children:"Extension.format(context)\n"})}),"\n",(0,l.jsxs)(s.p,{children:["Allows extensions to add data to ",(0,l.jsx)(s.code,{children:"extensions"})," key in GraphQL response."]}),"\n",(0,l.jsxs)(s.p,{children:["Should return a ",(0,l.jsx)(s.code,{children:"dict"}),"."]}),"\n",(0,l.jsx)(s.h5,{id:"example",children:"Example"}),"\n",(0,l.jsxs)(s.p,{children:["Following extension will add ",(0,l.jsx)(s.code,{children:"timestamp"})," entry with current timestamp to query's ",(0,l.jsx)(s.code,{children:"extensions"}),":"]}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-python",children:'from datetime import datetime\n\n\nclass TimestampExtension(Extension):\n    def format(self, context):\n        return {"timestamp": datetime.now().isoformat()}\n'})}),"\n",(0,l.jsx)(s.p,{children:"Result:"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-json",children:'{\n    "data": {\n        "hello": "world!"\n    },\n    "extensions": {\n        "timestamp": "2019-06-28T18:34:31.171409"\n    }\n}\n'})}),"\n",(0,l.jsx)(s.h4,{id:"has_errors",children:(0,l.jsx)(s.code,{children:"has_errors"})}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-python",children:"Extension.has_errors(errors, context)\n"})}),"\n",(0,l.jsxs)(s.p,{children:["Called with ",(0,l.jsx)(s.code,{children:"list"})," of errors that occurred during query process. Not called if no errors were raised. Errors may come from ",(0,l.jsx)(s.code,{children:"validation"}),", query parsing or query execution."]}),"\n",(0,l.jsx)(s.h4,{id:"request_finished",children:(0,l.jsx)(s.code,{children:"request_finished"})}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-python",children:"Extension.request_finished(context)\n"})}),"\n",(0,l.jsx)(s.p,{children:"Called when query processing finishes."}),"\n",(0,l.jsx)(s.h4,{id:"request_started",children:(0,l.jsx)(s.code,{children:"request_started"})}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-python",children:"Extension.request_started(context)\n"})}),"\n",(0,l.jsx)(s.p,{children:"Called when query processing starts."}),"\n",(0,l.jsx)(s.h4,{id:"resolve",children:(0,l.jsx)(s.code,{children:"resolve"})}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-python",children:"Extension.resolve(next_, parent, info[, **kwargs])\n"})}),"\n",(0,l.jsxs)(s.p,{children:["Used as middleware for fields resolver. Takes special ",(0,l.jsx)(s.code,{children:"next_"})," argument that is next resolver in resolvers chain that should be called."]}),"\n",(0,l.jsxs)(s.p,{children:["Everything else is same as with regular ",(0,l.jsx)(s.a,{href:"#resolver",children:"resolvers"}),"."]}),"\n",(0,l.jsx)(s.hr,{}),"\n",(0,l.jsx)(s.h2,{id:"extensionsync",children:(0,l.jsx)(s.code,{children:"ExtensionSync"})}),"\n",(0,l.jsxs)(s.p,{children:["Synchronous counterpart of the ",(0,l.jsx)(s.a,{href:"#extension",children:(0,l.jsx)(s.code,{children:"Extension"})}),". All hooks are the same, but ",(0,l.jsx)(s.code,{children:"resolve"})," hook can't be asynchronous."]}),"\n",(0,l.jsx)(s.hr,{}),"\n",(0,l.jsx)(s.h2,{id:"graphqlresult",children:(0,l.jsx)(s.code,{children:"GraphQLResult"})}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-python",children:"(success, response)\n"})}),"\n",(0,l.jsx)(s.p,{children:"A tuple of two items:"}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"success"})," - web server should use status code ",(0,l.jsx)(s.code,{children:"200"})," for response if this value is ",(0,l.jsx)(s.code,{children:"True"})," and ",(0,l.jsx)(s.code,{children:"400"})," if it wasn't."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"response"})," - response data that should be JSON-encoded and sent to client."]}),"\n"]}),"\n",(0,l.jsx)(s.hr,{}),"\n",(0,l.jsx)(s.h2,{id:"resolver",children:(0,l.jsx)(s.code,{children:"Resolver"})}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-python",children:"def resolver(obj, info[, **kwargs]):\n"})}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-python",children:"class Resolver:\n    def __call__(self, obj, info[, **kwargs]):\n"})}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-python",children:"lambda obj, info[, **kwargs]:\n"})}),"\n",(0,l.jsx)(s.p,{children:"A callable that query executor runs to resolve a specific field's value."}),"\n",(0,l.jsxs)(s.blockquote,{children:["\n",(0,l.jsxs)(s.p,{children:["Returning ",(0,l.jsx)(s.code,{children:"None"})," from resolver for field declared as non-nullable (eg.: ",(0,l.jsx)(s.code,{children:"field: Int!"}),") will result in ",(0,l.jsx)(s.code,{children:"TypeError"})," being raised by the query executor."]}),"\n"]}),"\n",(0,l.jsx)(s.h3,{id:"required-arguments-1",children:"Required arguments"}),"\n",(0,l.jsx)(s.h4,{id:"obj",children:(0,l.jsx)(s.code,{children:"obj"})}),"\n",(0,l.jsxs)(s.p,{children:["Object from which the value should be resolved. Can be ",(0,l.jsx)(s.code,{children:"None"})," for root resolvers (resolvers for ",(0,l.jsx)(s.a,{href:"/server/0.10.0/resolvers",children:(0,l.jsx)(s.code,{children:"Query"})}),", ",(0,l.jsx)(s.a,{href:"/server/0.10.0/mutations",children:(0,l.jsx)(s.code,{children:"Mutation"})})," and ",(0,l.jsx)(s.a,{href:"/server/0.10.0/subscriptions",children:(0,l.jsx)(s.code,{children:"Subscription"})})," fields) in server without set ",(0,l.jsx)(s.a,{href:"#rootvalue",children:(0,l.jsx)(s.code,{children:"RootValue"})}),"."]}),"\n",(0,l.jsx)(s.h4,{id:"info",children:(0,l.jsx)(s.code,{children:"info"})}),"\n",(0,l.jsxs)(s.p,{children:["Instance of the ",(0,l.jsx)(s.a,{href:"https://github.com/graphql-python/graphql-core-next/blob/v1.0.5/graphql/type/definition.py#L487",children:(0,l.jsx)(s.code,{children:"graphql.type.GraphQLResolveInfo"})}),". Is specific to resolved field and query."]}),"\n",(0,l.jsxs)(s.p,{children:["Has ",(0,l.jsx)(s.code,{children:"context"})," attribute that contains ",(0,l.jsx)(s.a,{href:"#contextvalue",children:(0,l.jsx)(s.code,{children:"ContextValue"})})," specific to the server implementation."]}),"\n",(0,l.jsx)(s.h4,{id:"kwargs",children:(0,l.jsx)(s.code,{children:"**kwargs"})}),"\n",(0,l.jsx)(s.p,{children:"If resolver's GraphQL field accepts any arguments, those arguments values will be passed to the field as kwargs:"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-graphql",children:"type Query {\n    sum(a: Int, b: Int): Int!\n}\n"})}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-python",children:"def resolve_users(obj, info, *, a=0, b=0):\n    return a + b\n"})}),"\n",(0,l.jsxs)(s.p,{children:["If argument is declared required (eg.: ",(0,l.jsx)(s.code,{children:"a: Int!"}),"), default value is not required because value presence will be asserted by Query executor before resolver is called:"]}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-python",children:"def resolve_users(obj, info, *, a, b=0):\n    return a + b  # a is guaranteed to have a value\n"})}),"\n",(0,l.jsx)(s.hr,{}),"\n",(0,l.jsx)(s.h2,{id:"rootvalue",children:(0,l.jsx)(s.code,{children:"RootValue"})}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-python",children:"Any\n"})}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-python",children:"def get_root_value(context, document):\n"})}),"\n",(0,l.jsxs)(s.p,{children:["The value that should be passed to the root-level ",(0,l.jsx)(s.a,{href:"#resolver",children:"resolvers"})," as their ",(0,l.jsx)(s.a,{href:"#obj",children:(0,l.jsx)(s.code,{children:"obj"})}),". Can be of any type."]}),"\n",(0,l.jsx)(s.p,{children:"If value is callable, it will be called with two arguments:"}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"context"})," - containing current ",(0,l.jsx)(s.code,{children:"context_value"}),"."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"document"})," - ",(0,l.jsx)(s.a,{href:"https://github.com/graphql-python/graphql-core-next/blob/v1.0.5/graphql/language/ast.py#L180",children:(0,l.jsx)(s.code,{children:"graphql.ast.DocumentNode"})})," that was result of parsing current GraphQL query."]}),"\n"]}),"\n",(0,l.jsxs)(s.p,{children:["Return value will then be used as ",(0,l.jsx)(s.code,{children:"obj"})," passed to root resolvers."]}),"\n",(0,l.jsx)(s.hr,{}),"\n",(0,l.jsx)(s.h2,{id:"schemabindable",children:(0,l.jsx)(s.code,{children:"SchemaBindable"})}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-python",children:"class SchemaBindable()\n"})}),"\n",(0,l.jsxs)(s.p,{children:["Base class for ",(0,l.jsx)(s.a,{href:"/server/0.10.0/bindables",children:(0,l.jsx)(s.em,{children:"bindables"})}),"."]}),"\n",(0,l.jsx)(s.h3,{id:"methods-1",children:"Methods"}),"\n",(0,l.jsx)(s.h4,{id:"bind_to_schema",children:(0,l.jsx)(s.code,{children:"bind_to_schema"})}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-python",children:"SchemaBindable.bind_to_schema(schema)\n"})}),"\n",(0,l.jsxs)(s.p,{children:["Method called by ",(0,l.jsx)(s.code,{children:"make_executable_schema"})," with single argument being instance of GraphQL schema. Extending classes should override this method with custom logic that binds business mechanic to schema."]}),"\n",(0,l.jsx)(s.hr,{}),"\n",(0,l.jsx)(s.h2,{id:"subscriber",children:(0,l.jsx)(s.code,{children:"Subscriber"})}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-python",children:"async def source(value, info[, **kwargs])\n"})}),"\n",(0,l.jsxs)(s.p,{children:["Asynchronous generator that ",(0,l.jsx)(s.a,{href:"/server/0.10.0/subscriptions",children:"subscription"})," field uses as data source for its ",(0,l.jsx)(s.a,{href:"#resolver",children:"resolver"}),"."]}),"\n",(0,l.jsx)(s.h3,{id:"required-arguments-2",children:"Required arguments"}),"\n",(0,l.jsx)(s.h4,{id:"root_value",children:(0,l.jsx)(s.code,{children:"root_value"})}),"\n",(0,l.jsxs)(s.p,{children:[(0,l.jsx)(s.a,{href:"#rootvalue",children:"Root value"})," set on the server."]}),"\n",(0,l.jsx)(s.h4,{id:"info-1",children:(0,l.jsx)(s.code,{children:"info"})}),"\n",(0,l.jsxs)(s.p,{children:["Instance of the ",(0,l.jsx)(s.a,{href:"https://github.com/graphql-python/graphql-core-next/blob/v1.0.5/graphql/type/definition.py#L487",children:(0,l.jsx)(s.code,{children:"graphql.type.GraphQLResolveInfo"})}),". Is specific to resolved field and query."]}),"\n",(0,l.jsxs)(s.p,{children:["Has ",(0,l.jsx)(s.code,{children:"context"})," attribute that contains ",(0,l.jsx)(s.a,{href:"#contextvalue",children:(0,l.jsx)(s.code,{children:"ContextValue"})})," specific to the server implementation."]}),"\n",(0,l.jsx)(s.h4,{id:"kwargs-1",children:(0,l.jsx)(s.code,{children:"**kwargs"})}),"\n",(0,l.jsx)(s.p,{children:"If subscriptions's GraphQL field accepts any arguments, those arguments values will be passed to the field as kwargs:"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-graphql",children:"type Subscription {\n    alerts(level: Int, age: Int): Int!\n}\n"})}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-python",children:"async def alerts_source(obj, info, *, level=0, age=0):\n    yield from alerts.subscribe(level, age)\n"})}),"\n",(0,l.jsxs)(s.p,{children:["If argument is declared required (eg.: ",(0,l.jsx)(s.code,{children:"age: Int!"}),"), default value is not required because value presence will be asserted by Query executor before subscriber is called:"]}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-python",children:"async def alerts_source(obj, info, *, level=0, age):\n    yield from alerts.subscribe(level, age)\n"})}),"\n",(0,l.jsx)(s.hr,{}),"\n",(0,l.jsx)(s.h2,{id:"subscriptionresult",children:(0,l.jsx)(s.code,{children:"SubscriptionResult"})}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-python",children:"(success, response)\n"})}),"\n",(0,l.jsx)(s.p,{children:"A tuple of two items:"}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"success"})," - web server should use status code ",(0,l.jsx)(s.code,{children:"200"})," for response if this value is ",(0,l.jsx)(s.code,{children:"True"})," and ",(0,l.jsx)(s.code,{children:"400"})," if it wasn't."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"response"})," - asynchronous generator for response data that should be JSON-encoded and sent to client for the duration of the connection."]}),"\n"]})]})}function h(e={}){let{wrapper:s}={...(0,d.R)(),...e.components};return s?(0,l.jsx)(s,{...e,children:(0,l.jsx)(a,{...e})}):a(e)}},84429:function(e,s,n){n.d(s,{R:()=>o,x:()=>i});var r=n(96540);let l={},d=r.createContext(l);function o(e){let s=r.useContext(d);return r.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),r.createElement(d.Provider,{value:s},e.children)}}}]);