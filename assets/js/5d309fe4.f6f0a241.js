"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["61060"],{37149:function(e,r,n){n.r(r),n.d(r,{frontMatter:()=>d,toc:()=>o,default:()=>h,metadata:()=>s,assets:()=>c,contentTitle:()=>i});var s=JSON.parse('{"id":"api-reference","title":"API reference","description":"Following items are importable directly from ariadne package:","source":"@site/server_versioned_docs/version-0.5.0/api-reference.md","sourceDirName":".","slug":"/api-reference","permalink":"/server/0.5.0/api-reference","draft":false,"unlisted":false,"tags":[],"version":"0.5.0","frontMatter":{"id":"api-reference","title":"API reference","sidebar_label":"ariadne"},"sidebar":"tutorialSidebar","previous":{"title":"Other technologies","permalink":"/server/0.5.0/other-integrations"},"next":{"title":"ariadne.constants","permalink":"/server/0.5.0/constants-reference"}}'),l=n(74848),a=n(84429);let d={id:"api-reference",title:"API reference",sidebar_label:"ariadne"},i,c={},o=[{value:"<code>EnumType</code>",id:"enumtype",level:2},{value:"Required arguments",id:"required-arguments",level:3},{value:"<code>name</code>",id:"name",level:4},{value:"<code>values</code>",id:"values",level:4},{value:"Example",id:"example",level:3},{value:"<code>FallbackResolversSetter</code>",id:"fallbackresolverssetter",level:2},{value:"Custom default resolver example",id:"custom-default-resolver-example",level:3},{value:"<code>InterfaceType</code>",id:"interfacetype",level:2},{value:"Required arguments",id:"required-arguments-1",level:3},{value:"<code>name</code>",id:"name-1",level:4},{value:"Optional arguments",id:"optional-arguments",level:3},{value:"<code>type_resolver</code>",id:"type_resolver",level:4},{value:"Methods",id:"methods",level:3},{value:"<code>set_type_resolver</code>",id:"set_type_resolver",level:4},{value:"<code>type_resolver</code>",id:"type_resolver-1",level:4},{value:"Example",id:"example-1",level:3},{value:"<code>MutationType</code>",id:"mutationtype",level:2},{value:"<code>ObjectType</code>",id:"objecttype",level:2},{value:"Required arguments",id:"required-arguments-2",level:3},{value:"<code>name</code>",id:"name-2",level:4},{value:"Methods",id:"methods-1",level:3},{value:"<code>field</code>",id:"field",level:4},{value:"<code>set_alias</code>",id:"set_alias",level:4},{value:"<code>set_field</code>",id:"set_field",level:4},{value:"<code>QueryType</code>",id:"querytype",level:2},{value:"<code>ScalarType</code>",id:"scalartype",level:2},{value:"Required arguments",id:"required-arguments-3",level:3},{value:"<code>name</code>",id:"name-3",level:4},{value:"<code>serializer</code>",id:"serializer",level:4},{value:"<code>value_parser</code>",id:"value_parser",level:4},{value:"<code>literal_parser</code>",id:"literal_parser",level:4},{value:"Methods",id:"methods-2",level:3},{value:"<code>literal_parser</code>",id:"literal_parser-1",level:4},{value:"<code>serializer</code>",id:"serializer-1",level:4},{value:"<code>set_serializer</code>",id:"set_serializer",level:4},{value:"<code>set_literal_parser</code>",id:"set_literal_parser",level:4},{value:"<code>set_value_parser</code>",id:"set_value_parser",level:4},{value:"<code>value_parser</code>",id:"value_parser-1",level:4},{value:"Example",id:"example-2",level:3},{value:"<code>SnakeCaseFallbackResolversSetter</code>",id:"snakecasefallbackresolverssetter",level:2},{value:"<code>SubscriptionType</code>",id:"subscriptiontype",level:2},{value:"Methods",id:"methods-3",level:3},{value:"<code>field</code>",id:"field-1",level:4},{value:"<code>set_field</code>",id:"set_field-1",level:4},{value:"<code>set_source</code>",id:"set_source",level:4},{value:"<code>source</code>",id:"source",level:4},{value:"Example",id:"example-3",level:3},{value:"<code>UnionType</code>",id:"uniontype",level:2},{value:"Required arguments",id:"required-arguments-4",level:3},{value:"<code>name</code>",id:"name-4",level:4},{value:"Optional arguments",id:"optional-arguments-1",level:3},{value:"<code>type_resolver</code>",id:"type_resolver-2",level:4},{value:"Methods",id:"methods-4",level:3},{value:"<code>set_type_resolver</code>",id:"set_type_resolver-1",level:4},{value:"<code>type_resolver</code>",id:"type_resolver-3",level:4},{value:"Example",id:"example-4",level:3},{value:"<code>combine_multipart_data</code>",id:"combine_multipart_data",level:2},{value:"Required arguments",id:"required-arguments-5",level:3},{value:"<code>operations</code>",id:"operations",level:4},{value:"<code>files_map</code>",id:"files_map",level:4},{value:"<code>files</code>",id:"files",level:4},{value:"<code>convert_camel_case_to_snake</code>",id:"convert_camel_case_to_snake",level:2},{value:"<code>default_resolver</code>",id:"default_resolver",level:2},{value:"<code>fallback_resolvers</code>",id:"fallback_resolvers",level:2},{value:"<code>format_error</code>",id:"format_error",level:2},{value:"<code>get_error_extension</code>",id:"get_error_extension",level:2},{value:"<code>gql</code>",id:"gql",level:2},{value:"<code>graphql</code>",id:"graphql",level:2},{value:"Required arguments",id:"required-arguments-6",level:3},{value:"<code>schema</code>",id:"schema",level:4},{value:"<code>data</code>",id:"data",level:4},{value:"Configuration options",id:"configuration-options",level:3},{value:"<code>context_value</code>",id:"context_value",level:4},{value:"<code>root_value</code>",id:"root_value",level:4},{value:"<code>logger</code>",id:"logger",level:4},{value:"<code>debug</code>",id:"debug",level:4},{value:"<code>validation_rules</code>",id:"validation_rules",level:4},{value:"<code>error_formatter</code>",id:"error_formatter",level:4},{value:"<code>middleware</code>",id:"middleware",level:4},{value:"<code>graphql_sync</code>",id:"graphql_sync",level:2},{value:"Required arguments",id:"required-arguments-7",level:3},{value:"Configuration options",id:"configuration-options-1",level:3},{value:"<code>load_schema_from_path</code>",id:"load_schema_from_path",level:2},{value:"<code>make_executable_schema</code>",id:"make_executable_schema",level:2},{value:"<code>resolve_to</code>",id:"resolve_to",level:2},{value:"<code>snake_case_fallback_resolvers</code>",id:"snake_case_fallback_resolvers",level:2},{value:"<code>subscribe</code>",id:"subscribe",level:2},{value:"<code>upload_scalar</code>",id:"upload_scalar",level:2}];function t(e){let r={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(r.p,{children:["Following items are importable directly from ",(0,l.jsx)(r.code,{children:"ariadne"})," package:"]}),"\n",(0,l.jsx)(r.h2,{id:"enumtype",children:(0,l.jsx)(r.code,{children:"EnumType"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"EnumType(name, values)\n"})}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.a,{href:"/server/0.5.0/bindables",children:(0,l.jsx)(r.em,{children:"Bindable"})})," used for mapping python values to enumeration members defined in GraphQL schema."]}),"\n",(0,l.jsx)(r.h3,{id:"required-arguments",children:"Required arguments"}),"\n",(0,l.jsx)(r.h4,{id:"name",children:(0,l.jsx)(r.code,{children:"name"})}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.code,{children:"str"})," with name of enumeration type defined in schema."]}),"\n",(0,l.jsx)(r.h4,{id:"values",children:(0,l.jsx)(r.code,{children:"values"})}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.code,{children:"dict"}),", ",(0,l.jsx)(r.code,{children:"enum.Enum"})," or ",(0,l.jsx)(r.code,{children:"enum.IntEnum"})," instance that defines mappings between Enum members and values"]}),"\n",(0,l.jsx)(r.h3,{id:"example",children:"Example"}),"\n",(0,l.jsx)(r.p,{children:"Enum defined in schema:"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-graphql",children:"enum ErrorType {\n  NOT_FOUND\n  PERMISSION_DENIED\n  VALIDATION_ERROR\n}\n"})}),"\n",(0,l.jsxs)(r.p,{children:["Python mapping using ",(0,l.jsx)(r.code,{children:"dict"}),":"]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:'from ariadne import EnumType\n\n\nerror_type_enum = EnumType(\n    "ErrorType",\n    {\n      "NOT_FOUND": "NotFound",\n      "PERMISSION_DENIED": "PermissionDenied",\n      "VALIDATION_ERROR": "ValidationError",\n    }\n)\n'})}),"\n",(0,l.jsxs)(r.p,{children:["Python mapping using ",(0,l.jsx)(r.code,{children:"enum.Enum"}),":"]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:'from enum import Enum\n\nfrom ariadne import EnumType\n\n\nclass ErrorType(Enum):\n    NOT_FOUND = "NotFound"\n    PERMISSION_DENIED = "PermissionDenied"\n    VALIDATION_ERROR = "ValidationError"\n\n\nerror_type_enum = EnumType("ErrorType", ErrorType)\n'})}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h2,{id:"fallbackresolverssetter",children:(0,l.jsx)(r.code,{children:"FallbackResolversSetter"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"FallbackResolversSetter()\n"})}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.a,{href:"/server/0.5.0/bindables",children:(0,l.jsx)(r.em,{children:"Bindable"})})," used for setting default resolvers on schema object types."]}),"\n",(0,l.jsxs)(r.blockquote,{children:["\n",(0,l.jsxs)(r.p,{children:["Use ",(0,l.jsx)(r.a,{href:"#fallback_resolvers",children:(0,l.jsx)(r.code,{children:"fallback_resolvers"})})," instead of instantiating ",(0,l.jsx)(r.code,{children:"FallbackResolversSetter"}),"."]}),"\n"]}),"\n",(0,l.jsx)(r.h3,{id:"custom-default-resolver-example",children:"Custom default resolver example"}),"\n",(0,l.jsxs)(r.p,{children:["You can create custom class extending ",(0,l.jsx)(r.code,{children:"FallbackResolversSetter"})," to set custom default resolver on your GraphQL object types:"]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"from ariadne import FallbackResolversSetter\n\n\ndef custom_resolver(obj, info, **kwargs) -> Any:\n    try:\n        return obj.get(info.field_name)\n    except AttributeError:\n        return getattr(obj, info.field_name, None)\n\n\nclass CustomFallbackResolversSetter(FallbackResolversSetter):\n    def add_resolver_to_field(self, field_name, field_object):\n        if field_object.resolve is None:\n            field_object.resolve = custom_resolver\n"})}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h2,{id:"interfacetype",children:(0,l.jsx)(r.code,{children:"InterfaceType"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"InterfaceType(name, type_resolver=None)\n"})}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.a,{href:"/server/0.5.0/bindables",children:(0,l.jsx)(r.em,{children:"Bindable"})})," used for setting Python logic for GraphQL interfaces. Extends ",(0,l.jsx)(r.a,{href:"#objecttype",children:(0,l.jsx)(r.code,{children:"ObjectType"})}),"."]}),"\n",(0,l.jsxs)(r.blockquote,{children:["\n",(0,l.jsxs)(r.p,{children:["Because ",(0,l.jsx)(r.code,{children:"InterfaceType"})," extends ",(0,l.jsx)(r.code,{children:"ObjectType"}),", it can also be used to set field resolvers."]}),"\n",(0,l.jsx)(r.p,{children:"InterfaceType will set its resolvers on fields of GraphQL types implementing the interface, but only if there is no resolver already set on the field."}),"\n"]}),"\n",(0,l.jsx)(r.h3,{id:"required-arguments-1",children:"Required arguments"}),"\n",(0,l.jsx)(r.h4,{id:"name-1",children:(0,l.jsx)(r.code,{children:"name"})}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.code,{children:"str"})," with name of interface type defined in schema."]}),"\n",(0,l.jsx)(r.h3,{id:"optional-arguments",children:"Optional arguments"}),"\n",(0,l.jsx)(r.h4,{id:"type_resolver",children:(0,l.jsx)(r.code,{children:"type_resolver"})}),"\n",(0,l.jsxs)(r.p,{children:["Valid ",(0,l.jsx)(r.a,{href:"/server/0.5.0/types-reference#resolver",children:"resolver"})," that is used to resolve the GraphQL type to which ",(0,l.jsx)(r.code,{children:"obj"})," belongs. It should return a ",(0,l.jsx)(r.code,{children:"str"})," with the name of the type. Not needed if ",(0,l.jsx)(r.code,{children:"obj"})," contains a ",(0,l.jsx)(r.code,{children:"__typename"})," key or attribute."]}),"\n",(0,l.jsx)(r.h3,{id:"methods",children:"Methods"}),"\n",(0,l.jsx)(r.h4,{id:"set_type_resolver",children:(0,l.jsx)(r.code,{children:"set_type_resolver"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"InterfaceType.set_type_resolver(type_resolver)\n"})}),"\n",(0,l.jsxs)(r.p,{children:["Sets type ",(0,l.jsx)(r.a,{href:"/server/0.5.0/types-reference#resolver",children:"resolver"})," used to resolve the ",(0,l.jsx)(r.code,{children:"str"})," with name of GraphQL type to which ",(0,l.jsx)(r.code,{children:"obj"})," belongs to."]}),"\n",(0,l.jsxs)(r.p,{children:["Returns value passed to ",(0,l.jsx)(r.code,{children:"type_resolver"})," argument."]}),"\n",(0,l.jsx)(r.h4,{id:"type_resolver-1",children:(0,l.jsx)(r.code,{children:"type_resolver"})}),"\n",(0,l.jsxs)(r.p,{children:["Decorator counterpart of ",(0,l.jsx)(r.code,{children:"set_type_resolver"}),":"]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:'search_result = InterfaceType("SearchResult")\n\n\n@search_result.type_resolver\ndef resolve_search_result_type(obj, info):\n    ...\n'})}),"\n",(0,l.jsx)(r.p,{children:"Decorator doesn't change or wrap the decorated function into any additional logic."}),"\n",(0,l.jsx)(r.h3,{id:"example-1",children:"Example"}),"\n",(0,l.jsxs)(r.p,{children:["Interface type for search result that can be ",(0,l.jsx)(r.code,{children:"User"})," or ",(0,l.jsx)(r.code,{children:"Thread"}),", that defines the url field and sets default resolver for it:"]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-graphql",children:"interface SearchResult {\n  url: String!\n}\n"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:'search_result = InterfaceType("SearchResult")\n\n\n@search_result.type_resolver\ndef resolve_search_result_type(obj, info):\n    if isinstance(obj, User):\n        return "User"\n    if isinstance(obj, Thread):\n        return "Thread"\n\n\n@search_result.field("url")\ndef resolve_search_result_url(obj, info):\n    return obj.get_absolute_url()\n'})}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h2,{id:"mutationtype",children:(0,l.jsx)(r.code,{children:"MutationType"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"MutationType()\n"})}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.a,{href:"/server/0.5.0/bindables",children:(0,l.jsx)(r.em,{children:"Bindable"})})," used for setting Python logic for GraphQL mutation type. Has the same API as ",(0,l.jsx)(r.a,{href:"#objecttype",children:(0,l.jsx)(r.code,{children:"ObjectType"})}),", but has GraphQL type name hardcoded to ",(0,l.jsx)(r.code,{children:"Mutation"}),"."]}),"\n",(0,l.jsxs)(r.blockquote,{children:["\n",(0,l.jsxs)(r.p,{children:["This is an convenience utility that can be used in place of of ",(0,l.jsx)(r.code,{children:'ObjectType("Mutation")'}),"."]}),"\n"]}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h2,{id:"objecttype",children:(0,l.jsx)(r.code,{children:"ObjectType"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"ObjectType(name)\n"})}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.a,{href:"/server/0.5.0/bindables",children:(0,l.jsx)(r.em,{children:"Bindable"})})," used for setting Python logic for GraphQL object types."]}),"\n",(0,l.jsx)(r.h3,{id:"required-arguments-2",children:"Required arguments"}),"\n",(0,l.jsx)(r.h4,{id:"name-2",children:(0,l.jsx)(r.code,{children:"name"})}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.code,{children:"str"})," with name of an object type defined in schema."]}),"\n",(0,l.jsx)(r.h3,{id:"methods-1",children:"Methods"}),"\n",(0,l.jsx)(r.h4,{id:"field",children:(0,l.jsx)(r.code,{children:"field"})}),"\n",(0,l.jsxs)(r.p,{children:["Decorator that takes single parameter, ",(0,l.jsx)(r.code,{children:"name"})," of GraphQL field, and sets decorated callable as ",(0,l.jsx)(r.a,{href:"/server/0.5.0/types-reference#resolver",children:"a resolver"})," for it:"]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:'user = ObjectType("User")\n\n\n@user.field("posts")\ndef resolve_posts(obj, info):\n    ...\n'})}),"\n",(0,l.jsx)(r.p,{children:"Decorator doesn't change or wrap the decorated function into any additional logic."}),"\n",(0,l.jsx)(r.h4,{id:"set_alias",children:(0,l.jsx)(r.code,{children:"set_alias"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"ObjectType.set_alias(name, to)\n"})}),"\n",(0,l.jsxs)(r.p,{children:["Makes a field ",(0,l.jsx)(r.code,{children:"name"})," defined in the schema resolve to property ",(0,l.jsx)(r.code,{children:"to"})," of an object."]}),"\n",(0,l.jsxs)(r.p,{children:["For example, if you want field ",(0,l.jsx)(r.code,{children:"username"})," from schema resolve to attribute ",(0,l.jsx)(r.code,{children:"user_name"})," of Python object, you can set an alias:"]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:'user = ObjectType("User")\n\n\nuser.set_alias("username", "user_name")\n'})}),"\n",(0,l.jsx)(r.h4,{id:"set_field",children:(0,l.jsx)(r.code,{children:"set_field"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"ObjectType.set_field(name, resolver)\n"})}),"\n",(0,l.jsxs)(r.p,{children:["Sets ",(0,l.jsx)(r.a,{href:"/server/0.5.0/types-reference#resolver",children:(0,l.jsx)(r.code,{children:"resolver"})})," as resolver that will be used to resolve the GraphQL field named ",(0,l.jsx)(r.code,{children:"name"}),"."]}),"\n",(0,l.jsxs)(r.p,{children:["Returns value passed to ",(0,l.jsx)(r.code,{children:"resolver"})," argument."]}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h2,{id:"querytype",children:(0,l.jsx)(r.code,{children:"QueryType"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"QueryType()\n"})}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.a,{href:"/server/0.5.0/bindables",children:(0,l.jsx)(r.em,{children:"Bindable"})})," used for setting Python logic for GraphQL mutation type. Has the same API as ",(0,l.jsx)(r.a,{href:"#objecttype",children:(0,l.jsx)(r.code,{children:"ObjectType"})}),", but has GraphQL type name hardcoded to ",(0,l.jsx)(r.code,{children:"Query"}),"."]}),"\n",(0,l.jsxs)(r.blockquote,{children:["\n",(0,l.jsxs)(r.p,{children:["This is an convenience utility that can be used in place of of ",(0,l.jsx)(r.code,{children:'ObjectType("Query")'}),"."]}),"\n"]}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h2,{id:"scalartype",children:(0,l.jsx)(r.code,{children:"ScalarType"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"ScalarType(name, *, serializer=None, value_parser=None, literal_parser=None)\n"})}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.a,{href:"/server/0.5.0/bindables",children:(0,l.jsx)(r.em,{children:"Bindable"})})," used for setting Python logic for GraphQL scalar type."]}),"\n",(0,l.jsx)(r.h3,{id:"required-arguments-3",children:"Required arguments"}),"\n",(0,l.jsx)(r.h4,{id:"name-3",children:(0,l.jsx)(r.code,{children:"name"})}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.code,{children:"str"})," with name of scalar type defined in schema."]}),"\n",(0,l.jsx)(r.h4,{id:"serializer",children:(0,l.jsx)(r.code,{children:"serializer"})}),"\n",(0,l.jsx)(r.p,{children:"Callable that is called to convert scalar value into JSON-serializable form."}),"\n",(0,l.jsx)(r.h4,{id:"value_parser",children:(0,l.jsx)(r.code,{children:"value_parser"})}),"\n",(0,l.jsx)(r.p,{children:"Callable that is called to convert JSON-serialized value back into Python form."}),"\n",(0,l.jsx)(r.h4,{id:"literal_parser",children:(0,l.jsx)(r.code,{children:"literal_parser"})}),"\n",(0,l.jsxs)(r.p,{children:["Callable that is called to convert AST ",(0,l.jsx)(r.code,{children:"ValueNode"})," value into Python form."]}),"\n",(0,l.jsx)(r.h3,{id:"methods-2",children:"Methods"}),"\n",(0,l.jsx)(r.h4,{id:"literal_parser-1",children:(0,l.jsx)(r.code,{children:"literal_parser"})}),"\n",(0,l.jsx)(r.p,{children:"Decorator that sets decorated callable as literal parser for the scalar:"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:'datetime = ScalarType("DateTime")\n\n\n@datetime.literal_parser\ndef parse_datetime_literal(ast):\n    ...\n'})}),"\n",(0,l.jsx)(r.p,{children:"Decorator doesn't change or wrap the decorated function into any additional logic."}),"\n",(0,l.jsx)(r.h4,{id:"serializer-1",children:(0,l.jsx)(r.code,{children:"serializer"})}),"\n",(0,l.jsx)(r.p,{children:"Decorator that sets decorated callable as serializer for the scalar:"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:'datetime = ScalarType("DateTime")\n\n\n@datetime.serializer\ndef serialize_datetime(value):\n    ...\n'})}),"\n",(0,l.jsx)(r.p,{children:"Decorator doesn't change or wrap the decorated function into any additional logic."}),"\n",(0,l.jsx)(r.h4,{id:"set_serializer",children:(0,l.jsx)(r.code,{children:"set_serializer"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"ScalarType.set_serializer(serializer)\n"})}),"\n",(0,l.jsxs)(r.p,{children:["Sets ",(0,l.jsx)(r.code,{children:"serializer"})," callable as serializer for the scalar."]}),"\n",(0,l.jsx)(r.h4,{id:"set_literal_parser",children:(0,l.jsx)(r.code,{children:"set_literal_parser"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"ScalarType.set_value_parser(literal_parser)\n"})}),"\n",(0,l.jsxs)(r.p,{children:["Sets ",(0,l.jsx)(r.code,{children:"literal_parser"})," callable as literal parser for the scalar."]}),"\n",(0,l.jsx)(r.h4,{id:"set_value_parser",children:(0,l.jsx)(r.code,{children:"set_value_parser"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"ScalarType.set_value_parser(value_parser)\n"})}),"\n",(0,l.jsxs)(r.p,{children:["Sets ",(0,l.jsx)(r.code,{children:"value_parser"})," callable as value parser for the scalar."]}),"\n",(0,l.jsxs)(r.blockquote,{children:["\n",(0,l.jsx)(r.p,{children:"As convenience, this function will also set literal parser, if none was set already."}),"\n"]}),"\n",(0,l.jsx)(r.h4,{id:"value_parser-1",children:(0,l.jsx)(r.code,{children:"value_parser"})}),"\n",(0,l.jsx)(r.p,{children:"Decorator that sets decorated callable as value parser for the scalar:"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:'datetime = ScalarType("DateTime")\n\n\n@datetime.value_parser\ndef parse_datetime_value(value):\n    ...\n'})}),"\n",(0,l.jsx)(r.p,{children:"Decorator doesn't change or wrap the decorated function into any additional logic."}),"\n",(0,l.jsxs)(r.blockquote,{children:["\n",(0,l.jsx)(r.p,{children:"As convenience, this decorator will also set literal parser, if none was set already."}),"\n"]}),"\n",(0,l.jsx)(r.h3,{id:"example-2",children:"Example"}),"\n",(0,l.jsxs)(r.p,{children:["Read-only scalar that converts ",(0,l.jsx)(r.code,{children:"datetime"})," object to string containing ISO8601 formatted date:"]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:'datetime = ScalarType("DateTime")\n\n\n@datetime.serializer\ndef serialize_datetime(value):\n    return value.isoformat()\n'})}),"\n",(0,l.jsxs)(r.p,{children:["Bidirectional scalar that converts ",(0,l.jsx)(r.code,{children:"date"})," object to ISO8601 formatted date and reverses it back:"]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:'from datetime import date\n\ndate_scalar = ScalarType("Date")\n\n\n@date.serializer\ndef serialize_datetime(value):\n    return value.isoformat()\n\n\n@date.value_parser\ndef serialize_datetime(value):\n    return date.strptime(value, "%Y-%m-%d")\n'})}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h2,{id:"snakecasefallbackresolverssetter",children:(0,l.jsx)(r.code,{children:"SnakeCaseFallbackResolversSetter"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"SnakeCaseFallbackResolversSetter()\n"})}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.a,{href:"/server/0.5.0/bindables",children:(0,l.jsx)(r.em,{children:"Bindable"})})," used for setting default resolvers on schema object types. Subclasses ",(0,l.jsx)(r.a,{href:"#fallbackresolverssetter",children:(0,l.jsx)(r.code,{children:"FallbackResolversSetter"})})," and sets default resolver that performs case conversion between GraphQL's ",(0,l.jsx)(r.code,{children:"camelCase"})," and Python's ",(0,l.jsx)(r.code,{children:"snake_case"}),":"]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-graphql",children:'type User {\n  "Default resolver for this field will read value from contact_address"\n  contactAddress: String\n}\n'})}),"\n",(0,l.jsxs)(r.blockquote,{children:["\n",(0,l.jsxs)(r.p,{children:["Use ",(0,l.jsx)(r.a,{href:"#snake_case_fallback_resolvers",children:(0,l.jsx)(r.code,{children:"fallback_resolvers"})})," instead of instantiating ",(0,l.jsx)(r.code,{children:"SnakeCaseFallbackResolversSetter"}),"."]}),"\n"]}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h2,{id:"subscriptiontype",children:(0,l.jsx)(r.code,{children:"SubscriptionType"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"SubscriptionType()\n"})}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.a,{href:"/server/0.5.0/bindables",children:(0,l.jsx)(r.em,{children:"Bindable"})})," used for setting Python logic for GraphQL subscription type."]}),"\n",(0,l.jsxs)(r.blockquote,{children:["\n",(0,l.jsxs)(r.p,{children:["Like ",(0,l.jsx)(r.a,{href:"#querytype",children:(0,l.jsx)(r.code,{children:"QueryType"})})," and ",(0,l.jsx)(r.a,{href:"#mutationtype",children:(0,l.jsx)(r.code,{children:"MutationType"})})," this type is hardcoded to bind only to ",(0,l.jsx)(r.code,{children:"Subscription"})," type in schema."]}),"\n"]}),"\n",(0,l.jsx)(r.h3,{id:"methods-3",children:"Methods"}),"\n",(0,l.jsx)(r.h4,{id:"field-1",children:(0,l.jsx)(r.code,{children:"field"})}),"\n",(0,l.jsxs)(r.p,{children:["Decorator that takes single parameter, ",(0,l.jsx)(r.code,{children:"name"})," of GraphQL field, and sets decorated callable as resolver for it."]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:'subscription = SubscriptionType()\n\n\n@subscription.field("alerts")\ndef resolve_alerts(obj, info):\n    ...\n'})}),"\n",(0,l.jsx)(r.p,{children:"Decorator doesn't change or wrap the decorated function into any additional logic."}),"\n",(0,l.jsxs)(r.blockquote,{children:["\n",(0,l.jsxs)(r.p,{children:["Root resolvers set on subscription type are called with value returned by field's ",(0,l.jsx)(r.code,{children:"source"})," resolver as first argument."]}),"\n"]}),"\n",(0,l.jsx)(r.h4,{id:"set_field-1",children:(0,l.jsx)(r.code,{children:"set_field"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"SubscriptionType.set_field(name, resolver)\n"})}),"\n",(0,l.jsxs)(r.p,{children:["Sets ",(0,l.jsx)(r.code,{children:"resolver"})," callable as resolver that will be used to resolve the GraphQL field named ",(0,l.jsx)(r.code,{children:"name"}),"."]}),"\n",(0,l.jsxs)(r.p,{children:["Returns value passed to ",(0,l.jsx)(r.code,{children:"resolver"})," argument."]}),"\n",(0,l.jsxs)(r.blockquote,{children:["\n",(0,l.jsxs)(r.p,{children:["Root resolvers set on subscription type are called with value returned by field's ",(0,l.jsx)(r.code,{children:"source"})," resolver as first argument."]}),"\n"]}),"\n",(0,l.jsx)(r.h4,{id:"set_source",children:(0,l.jsx)(r.code,{children:"set_source"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"SubscriptionType.set_source(name, generator)\n"})}),"\n",(0,l.jsxs)(r.p,{children:["Sets ",(0,l.jsx)(r.code,{children:"generator"})," generator as source that will be used to resolve the GraphQL field named ",(0,l.jsx)(r.code,{children:"name"}),"."]}),"\n",(0,l.jsxs)(r.p,{children:["Returns value passed to ",(0,l.jsx)(r.code,{children:"generator"})," argument."]}),"\n",(0,l.jsx)(r.h4,{id:"source",children:(0,l.jsx)(r.code,{children:"source"})}),"\n",(0,l.jsxs)(r.p,{children:["Decorator that takes single parameter, ",(0,l.jsx)(r.code,{children:"name"})," of GraphQL field, and sets decorated generator as source for it."]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:'subscription = SubscriptionType()\n\n\n@subscription.source("alerts")\nasync def alerts_generator(obj, info):\n    ...\n'})}),"\n",(0,l.jsx)(r.p,{children:"Decorator doesn't change or wrap the decorated function into any additional logic."}),"\n",(0,l.jsx)(r.h3,{id:"example-3",children:"Example"}),"\n",(0,l.jsx)(r.p,{children:"Simple counter API that counts to 5 and ends subscription:"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-graphql",children:"type Subscription {\n  counter: Int\n}\n"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:'import asyncio\n\n\nsubscription = SubscriptionType()\n\n\n@subscription.source("counter")\nasync def counter_generator(obj, info):\n    for i in range(5):\n        await asyncio.sleep(1)\n        yield i\n\n\n@subscription.field("counter")\ndef counter_resolver(count, info):\n    return count\n'})}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h2,{id:"uniontype",children:(0,l.jsx)(r.code,{children:"UnionType"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"UnionType(name, type_resolver=None)\n"})}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.a,{href:"/server/0.5.0/bindables",children:(0,l.jsx)(r.em,{children:"Bindable"})})," used for setting Python logic for GraphQL union type."]}),"\n",(0,l.jsx)(r.h3,{id:"required-arguments-4",children:"Required arguments"}),"\n",(0,l.jsx)(r.h4,{id:"name-4",children:(0,l.jsx)(r.code,{children:"name"})}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.code,{children:"str"})," with name of union type defined in schema."]}),"\n",(0,l.jsx)(r.h3,{id:"optional-arguments-1",children:"Optional arguments"}),"\n",(0,l.jsx)(r.h4,{id:"type_resolver-2",children:(0,l.jsx)(r.code,{children:"type_resolver"})}),"\n",(0,l.jsxs)(r.p,{children:["Valid ",(0,l.jsx)(r.a,{href:"/server/0.5.0/types-reference#resolver",children:"resolver"})," that is used to resolve the GraphQL type to which ",(0,l.jsx)(r.code,{children:"obj"})," belongs. It should return a ",(0,l.jsx)(r.code,{children:"str"})," with the name of the type. Not needed if ",(0,l.jsx)(r.code,{children:"obj"})," contains a ",(0,l.jsx)(r.code,{children:"__typename"})," key or attribute."]}),"\n",(0,l.jsx)(r.h3,{id:"methods-4",children:"Methods"}),"\n",(0,l.jsx)(r.h4,{id:"set_type_resolver-1",children:(0,l.jsx)(r.code,{children:"set_type_resolver"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"UnionType.set_type_resolver(type_resolver)\n"})}),"\n",(0,l.jsxs)(r.p,{children:["Sets type ",(0,l.jsx)(r.a,{href:"/server/0.5.0/types-reference#resolver",children:"resolver"})," used to resolve the ",(0,l.jsx)(r.code,{children:"str"})," with name of GraphQL type to which ",(0,l.jsx)(r.code,{children:"obj"})," belongs to."]}),"\n",(0,l.jsxs)(r.p,{children:["Returns value passed to ",(0,l.jsx)(r.code,{children:"type_resolver"})," argument."]}),"\n",(0,l.jsx)(r.h4,{id:"type_resolver-3",children:(0,l.jsx)(r.code,{children:"type_resolver"})}),"\n",(0,l.jsxs)(r.p,{children:["Decorator counterpart of ",(0,l.jsx)(r.code,{children:"set_type_resolver"}),":"]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:'search_result = UnionType("SearchResult")\n\n\n@search_result.type_resolver\ndef resolve_search_result_type(obj, info):\n    ...\n'})}),"\n",(0,l.jsx)(r.p,{children:"Decorator doesn't change or wrap the decorated function into any additional logic."}),"\n",(0,l.jsx)(r.h3,{id:"example-4",children:"Example"}),"\n",(0,l.jsxs)(r.p,{children:["Union type for search result that can be ",(0,l.jsx)(r.code,{children:"User"})," or ",(0,l.jsx)(r.code,{children:"Thread"}),":"]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-graphql",children:"union SearchResult = User | Thread\n"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:'search_result = UnionType("SearchResult")\n\n\n@search_result.type_resolver\ndef resolve_search_result_type(obj, info):\n    if isinstance(obj, User):\n        return "User"\n    if isinstance(obj, Thread):\n        return "Thread"\n'})}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h2,{id:"combine_multipart_data",children:(0,l.jsx)(r.code,{children:"combine_multipart_data"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"combine_multipart_data(operations, files_map, files)\n"})}),"\n",(0,l.jsxs)(r.p,{children:["Combines data from ",(0,l.jsx)(r.a,{href:"https://github.com/jaydenseric/graphql-multipart-request-spec",children:"GraphQL multipart request"})," into a query ",(0,l.jsx)(r.a,{href:"#data",children:(0,l.jsx)(r.code,{children:"data"})}),"."]}),"\n",(0,l.jsx)(r.h3,{id:"required-arguments-5",children:"Required arguments"}),"\n",(0,l.jsx)(r.h4,{id:"operations",children:(0,l.jsx)(r.code,{children:"operations"})}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.code,{children:"dict"})," containing GraphQL query data or ",(0,l.jsx)(r.code,{children:"list"})," of those."]}),"\n",(0,l.jsx)(r.h4,{id:"files_map",children:(0,l.jsx)(r.code,{children:"files_map"})}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.code,{children:"dict"})," containing data mapping ",(0,l.jsx)(r.code,{children:"files"})," to Query variables."]}),"\n",(0,l.jsx)(r.h4,{id:"files",children:(0,l.jsx)(r.code,{children:"files"})}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.code,{children:"dict"})," (or object implementing ",(0,l.jsx)(r.code,{children:"__getitem__"}),") containing uploaded files."]}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h2,{id:"convert_camel_case_to_snake",children:(0,l.jsx)(r.code,{children:"convert_camel_case_to_snake"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"convert_camel_case_to_snake(graphql_name)\n"})}),"\n",(0,l.jsxs)(r.p,{children:["Utility function that converts GraphQL name written in ",(0,l.jsx)(r.code,{children:"camelCase"})," to its Python ",(0,l.jsx)(r.code,{children:"snake_case"})," counterpart."]}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h2,{id:"default_resolver",children:(0,l.jsx)(r.code,{children:"default_resolver"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"def default_resolver(parent, info)\n"})}),"\n",(0,l.jsxs)(r.p,{children:["Default resolver used by Ariadne. If ",(0,l.jsx)(r.code,{children:"parent"})," is ",(0,l.jsx)(r.code,{children:"dict"}),", will use ",(0,l.jsx)(r.code,{children:"dict.get(info.field_name)"})," to resolve the value. Uses ",(0,l.jsx)(r.code,{children:"getattr(parent, info.field_name, None)"})," otherwise."]}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h2,{id:"fallback_resolvers",children:(0,l.jsx)(r.code,{children:"fallback_resolvers"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"fallback_resolvers\n"})}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.a,{href:"/server/0.5.0/bindables",children:(0,l.jsx)(r.em,{children:"Bindable"})})," instance of ",(0,l.jsx)(r.a,{href:"#fallbackresolverssetter",children:(0,l.jsx)(r.code,{children:"FallbackResolversSetter"})}),"."]}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h2,{id:"format_error",children:(0,l.jsx)(r.code,{children:"format_error"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"def format_error(error, debug=False)\n"})}),"\n",(0,l.jsxs)(r.p,{children:["Default error formatter used by Ariadne. Takes instance of ",(0,l.jsx)(r.code,{children:"GraphQLError"})," as first argument and debug flag as second."]}),"\n",(0,l.jsxs)(r.p,{children:["Returns ",(0,l.jsx)(r.code,{children:"dict"})," containing formatted error data ready for returning to API client."]}),"\n",(0,l.jsxs)(r.p,{children:["If ",(0,l.jsx)(r.code,{children:"debug"})," is ",(0,l.jsx)(r.code,{children:"True"}),", updates returned data ",(0,l.jsx)(r.code,{children:"extensions"})," key with ",(0,l.jsx)(r.code,{children:"exception"})," ",(0,l.jsx)(r.code,{children:"dict"})," that contains traceback to original Python exception and its context variables."]}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h2,{id:"get_error_extension",children:(0,l.jsx)(r.code,{children:"get_error_extension"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"def get_error_extension(error)\n"})}),"\n",(0,l.jsxs)(r.p,{children:["Takes ",(0,l.jsx)(r.code,{children:"GraphQLError"})," instance as only argument and returns ",(0,l.jsx)(r.code,{children:"dict"})," with traceback and context of original Python exception. If error was not caused by exception in resolver, returns ",(0,l.jsx)(r.code,{children:"None"})," instead."]}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h2,{id:"gql",children:(0,l.jsx)(r.code,{children:"gql"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"def gql(value)\n"})}),"\n",(0,l.jsxs)(r.p,{children:["Utility function that takes GraphQL string as only argument, validates it and returns same string unchanged or raises ",(0,l.jsx)(r.code,{children:"GraphQLError"})," if string was invalid."]}),"\n",(0,l.jsx)(r.p,{children:"Wrapping GraphQL strings declarations with this utility will make errors easier to track down and debug, as their traceback will point to place of declaration instead of Ariadne internals:"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:'type_defs = gql("""\n    type Query {\n      username: String!\n    }\n""")\n'})}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h2,{id:"graphql",children:(0,l.jsx)(r.code,{children:"graphql"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"async def graphql(schema, data, *, root_value=None, context_value=None, logger=None, debug=False, validation_rules, error_formatter, middleware, **kwargs)\n"})}),"\n",(0,l.jsx)(r.p,{children:"Asynchronously executes query against the schema."}),"\n",(0,l.jsxs)(r.p,{children:["Returns ",(0,l.jsx)(r.a,{href:"/server/0.5.0/types-reference#graphqlresult",children:(0,l.jsx)(r.code,{children:"GraphQLResult"})})," instance."]}),"\n",(0,l.jsxs)(r.blockquote,{children:["\n",(0,l.jsxs)(r.p,{children:["This function is an asynchronous coroutine so you will need to ",(0,l.jsx)(r.code,{children:"await"})," on the returned value."]}),"\n"]}),"\n",(0,l.jsxs)(r.blockquote,{children:["\n",(0,l.jsxs)(r.p,{children:["Coroutines will not work under WSGI. If your server uses WSGI (Django and Flask do), use ",(0,l.jsx)(r.a,{href:"#graphql_sync",children:(0,l.jsx)(r.code,{children:"graphql_sync"})})," instead."]}),"\n"]}),"\n",(0,l.jsx)(r.h3,{id:"required-arguments-6",children:"Required arguments"}),"\n",(0,l.jsx)(r.h4,{id:"schema",children:(0,l.jsx)(r.code,{children:"schema"})}),"\n",(0,l.jsxs)(r.p,{children:["An executable schema created using ",(0,l.jsx)(r.a,{href:"#make_executable_schema",children:(0,l.jsx)(r.code,{children:"make_executable_schema"})}),"."]}),"\n",(0,l.jsx)(r.h4,{id:"data",children:(0,l.jsx)(r.code,{children:"data"})}),"\n",(0,l.jsxs)(r.p,{children:["Decoded input data sent by the client (eg. for POST requests in JSON format, pass in the structure decoded from JSON). Exact shape of ",(0,l.jsx)(r.code,{children:"data"})," depends on the query type and protocol."]}),"\n",(0,l.jsx)(r.h3,{id:"configuration-options",children:"Configuration options"}),"\n",(0,l.jsx)(r.h4,{id:"context_value",children:(0,l.jsx)(r.code,{children:"context_value"})}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.a,{href:"/server/0.5.0/types-reference#contextvalue",children:"Context value"})," to be passed to resolvers."]}),"\n",(0,l.jsxs)(r.blockquote,{children:["\n",(0,l.jsxs)(r.p,{children:["If ",(0,l.jsx)(r.code,{children:"context_value"})," is callable, it should be evaluated on higher level of abstraction (in server integration) before passing to ",(0,l.jsx)(r.code,{children:"graphql()"}),"."]}),"\n"]}),"\n",(0,l.jsx)(r.h4,{id:"root_value",children:(0,l.jsx)(r.code,{children:"root_value"})}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.a,{href:"/server/0.5.0/types-reference#rootvalue",children:"Root value"})," to be passed to root resolvers."]}),"\n",(0,l.jsx)(r.h4,{id:"logger",children:(0,l.jsx)(r.code,{children:"logger"})}),"\n",(0,l.jsxs)(r.p,{children:["String with the name of logger that should be used to log GraphQL errors. Defaults to ",(0,l.jsx)(r.code,{children:"ariadne"}),"."]}),"\n",(0,l.jsx)(r.h4,{id:"debug",children:(0,l.jsx)(r.code,{children:"debug"})}),"\n",(0,l.jsxs)(r.p,{children:["If ",(0,l.jsx)(r.code,{children:"True"})," will cause the server to include debug information in error responses."]}),"\n",(0,l.jsx)(r.h4,{id:"validation_rules",children:(0,l.jsx)(r.code,{children:"validation_rules"})}),"\n",(0,l.jsxs)(r.p,{children:["optional additional validators (as defined by ",(0,l.jsx)(r.code,{children:"graphql.validation.rules"}),") to run before attempting to execute the query (the standard validators defined by the GraphQL specification are always used and There's no need to provide them here)."]}),"\n",(0,l.jsx)(r.h4,{id:"error_formatter",children:(0,l.jsx)(r.code,{children:"error_formatter"})}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.a,{href:"/server/0.5.0/types-reference#errorformatter",children:"Error formatter"})," that should be used to format errors."]}),"\n",(0,l.jsxs)(r.p,{children:["Defaults to ",(0,l.jsx)(r.a,{href:"#format_error",children:(0,l.jsx)(r.code,{children:"format_error"})}),"."]}),"\n",(0,l.jsx)(r.h4,{id:"middleware",children:(0,l.jsx)(r.code,{children:"middleware"})}),"\n",(0,l.jsx)(r.p,{children:"Optional middleware to wrap the resolvers with."}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h2,{id:"graphql_sync",children:(0,l.jsx)(r.code,{children:"graphql_sync"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"def graphql(schema, data, *, root_value=None, context_value=None, debug=False, validation_rules, error_formatter, middleware, **kwargs)\n"})}),"\n",(0,l.jsx)(r.p,{children:"Synchronously executes query against schema."}),"\n",(0,l.jsxs)(r.p,{children:["Returns ",(0,l.jsx)(r.a,{href:"/server/0.5.0/types-reference#graphqlresult",children:(0,l.jsx)(r.code,{children:"GraphQLResult"})})," instance."]}),"\n",(0,l.jsxs)(r.blockquote,{children:["\n",(0,l.jsxs)(r.p,{children:["Use this function instead of ",(0,l.jsx)(r.a,{href:"#graphql",children:(0,l.jsx)(r.code,{children:"graphql"})})," to run queries in synchronous servers (WSGI, Django, Flask)."]}),"\n"]}),"\n",(0,l.jsx)(r.h3,{id:"required-arguments-7",children:"Required arguments"}),"\n",(0,l.jsxs)(r.p,{children:["See ",(0,l.jsx)(r.a,{href:"#graphql",children:(0,l.jsx)(r.code,{children:"graphql"})})," required arguments."]}),"\n",(0,l.jsx)(r.h3,{id:"configuration-options-1",children:"Configuration options"}),"\n",(0,l.jsxs)(r.p,{children:["See ",(0,l.jsx)(r.a,{href:"#graphql",children:(0,l.jsx)(r.code,{children:"graphql"})})," configuration options."]}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h2,{id:"load_schema_from_path",children:(0,l.jsx)(r.code,{children:"load_schema_from_path"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"def load_schema_from_path(path)\n"})}),"\n",(0,l.jsxs)(r.p,{children:["Loads GraphQL schema from ",(0,l.jsx)(r.code,{children:"path"})," using different strategy depending on ",(0,l.jsx)(r.code,{children:"path"}),"'s type:"]}),"\n",(0,l.jsxs)(r.ul,{children:["\n",(0,l.jsxs)(r.li,{children:["If ",(0,l.jsx)(r.code,{children:"path"})," is single file, reads it."]}),"\n",(0,l.jsxs)(r.li,{children:["If ",(0,l.jsx)(r.code,{children:"path"})," is directory, walks it recursively loading all ",(0,l.jsx)(r.code,{children:".graphql"})," files within it."]}),"\n"]}),"\n",(0,l.jsxs)(r.p,{children:["Files are validated using the same logic that ",(0,l.jsx)(r.a,{href:"#gql",children:(0,l.jsx)(r.code,{children:"gql"})})," uses, concatenated into single string and returned."]}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h2,{id:"make_executable_schema",children:(0,l.jsx)(r.code,{children:"make_executable_schema"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"def make_executable_schema(type_defs, bindables=None)\n"})}),"\n",(0,l.jsx)(r.p,{children:"Takes two arguments:"}),"\n",(0,l.jsxs)(r.ul,{children:["\n",(0,l.jsxs)(r.li,{children:[(0,l.jsx)(r.code,{children:"type_defs"})," - string or list of strings with valid GraphQL types definitions."]}),"\n",(0,l.jsxs)(r.li,{children:[(0,l.jsx)(r.code,{children:"bindables"})," - ",(0,l.jsx)(r.a,{href:"/server/0.5.0/bindables",children:"bindable or list of bindables"})," with Python logic to add to schema. ",(0,l.jsx)(r.em,{children:"Optional"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(r.p,{children:["Returns ",(0,l.jsx)(r.code,{children:"GraphQLSchema"})," instance that can be used to run queries on."]}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h2,{id:"resolve_to",children:(0,l.jsx)(r.code,{children:"resolve_to"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"def resolve_to(name)\n"})}),"\n",(0,l.jsxs)(r.p,{children:["Returns ",(0,l.jsx)(r.a,{href:"#default_resolver",children:(0,l.jsx)(r.code,{children:"default_resolver"})})," that always resolves to named attribute. Used to create aliases by ",(0,l.jsx)(r.a,{href:"#set_alias",children:(0,l.jsx)(r.code,{children:"ObjectType.set_alias"})}),"."]}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h2,{id:"snake_case_fallback_resolvers",children:(0,l.jsx)(r.code,{children:"snake_case_fallback_resolvers"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"snake_case_fallback_resolvers\n"})}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.a,{href:"/server/0.5.0/bindables",children:(0,l.jsx)(r.em,{children:"Bindable"})})," instance of ",(0,l.jsx)(r.a,{href:"#snakecasefallbackresolverssetter",children:(0,l.jsx)(r.code,{children:"SnakeCaseFallbackResolversSetter"})}),"."]}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h2,{id:"subscribe",children:(0,l.jsx)(r.code,{children:"subscribe"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"async def subscribe(schema, data, *, root_value=None, context_value=None, debug=False, validation_rules, error_formatter, **kwargs)\n"})}),"\n",(0,l.jsxs)(r.p,{children:["Asynchronously executes subscription query against schema, usually made over the websocket. Takes same arguments and options as ",(0,l.jsx)(r.a,{href:"#graphql",children:(0,l.jsx)(r.code,{children:"graphql"})})," except ",(0,l.jsx)(r.code,{children:"middleware"}),"."]}),"\n",(0,l.jsxs)(r.blockquote,{children:["\n",(0,l.jsxs)(r.p,{children:["This function is an asynchronous coroutine so you will need to ",(0,l.jsx)(r.code,{children:"await"})," on the returned value."]}),"\n"]}),"\n",(0,l.jsxs)(r.blockquote,{children:["\n",(0,l.jsxs)(r.p,{children:["Coroutines will not work under WSGI. If your server uses WSGI (Django and Flask do), use ",(0,l.jsx)(r.a,{href:"#graphql_sync",children:(0,l.jsx)(r.code,{children:"graphql_sync"})})," instead."]}),"\n"]}),"\n",(0,l.jsx)(r.hr,{}),"\n",(0,l.jsx)(r.h2,{id:"upload_scalar",children:(0,l.jsx)(r.code,{children:"upload_scalar"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"upload_scalar\n"})}),"\n",(0,l.jsxs)(r.p,{children:["Instance of ",(0,l.jsx)(r.a,{href:"#scalartype",children:(0,l.jsx)(r.code,{children:"ScalarType"})})," that represents uploaded file."]}),"\n",(0,l.jsxs)(r.p,{children:["See ",(0,l.jsx)(r.a,{href:"/server/0.5.0/file-uploads",children:"file uploads"})," documentation for information about ",(0,l.jsx)(r.a,{href:"/server/0.5.0/file-uploads#limitations",children:"limitations"})," and ",(0,l.jsx)(r.a,{href:"/server/0.5.0/file-uploads#implementation-differences",children:"implementation specific"})," differences in behaviour."]})]})}function h(e={}){let{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,l.jsx)(r,{...e,children:(0,l.jsx)(t,{...e})}):t(e)}},84429:function(e,r,n){n.d(r,{R:()=>d,x:()=>i});var s=n(96540);let l={},a=s.createContext(l);function d(e){let r=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:d(e.components),s.createElement(a.Provider,{value:r},e.children)}}}]);