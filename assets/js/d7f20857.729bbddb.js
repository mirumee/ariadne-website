"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["90861"],{87182:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>o,toc:()=>d,default:()=>p,metadata:()=>a,assets:()=>l,contentTitle:()=>i});var a=JSON.parse('{"id":"aws-lambda","title":"AWS Lambda","description":"Multiple ways to implement an AWS Lambda function for GraphQL using Ariadne exist.","source":"@site/server_versioned_docs/version-0.24/aws-lambda.md","sourceDirName":".","slug":"/aws-lambda","permalink":"/server/0.24/aws-lambda","draft":false,"unlisted":false,"tags":[],"version":"0.24","frontMatter":{"id":"aws-lambda","title":"AWS Lambda"},"sidebar":"tutorialSidebar","previous":{"title":"WSGI application","permalink":"/server/0.24/wsgi"},"next":{"title":"Django","permalink":"/server/0.24/django-integration"}}'),r=t(74848),s=t(84429);let o={id:"aws-lambda",title:"AWS Lambda"},i="AWS Lambda",l={},d=[{value:"Deploying ASGI Application with Ariadne Lambda",id:"deploying-asgi-application-with-ariadne-lambda",level:2},{value:"Minimal Lambda Handler Example",id:"minimal-lambda-handler-example",level:2},{value:"Asynchronous Example",id:"asynchronous-example",level:3},{value:"Local Testing",id:"local-testing",level:2}];function c(e){let n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"aws-lambda",children:"AWS Lambda"})}),"\n",(0,r.jsx)(n.p,{children:"Multiple ways to implement an AWS Lambda function for GraphQL using Ariadne exist."}),"\n",(0,r.jsxs)(n.p,{children:["This document presents a selected few of those, but its aim is not to be an ",(0,r.jsx)(n.strong,{children:"exhaustive"})," list of all approaches to using Ariadne on AWS Lambda."]}),"\n",(0,r.jsx)(n.h2,{id:"deploying-asgi-application-with-ariadne-lambda",children:"Deploying ASGI Application with Ariadne Lambda"}),"\n",(0,r.jsxs)(n.p,{children:["Ariadne Lambda is an extension to Ariadne itself to enable running ",(0,r.jsx)(n.a,{href:"/server/0.24/asgi",children:"ASGI"})," applications on AWS Lambda:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from typing import Any\n\nfrom ariadne import QueryType, gql, make_executable_schema\nfrom ariadne_lambda.graphql import GraphQLLambda\nfrom asgiref.sync import async_to_sync\nfrom aws_lambda_powertools.utilities.typing import LambdaContext\n\ntype_defs = gql(\n    """\n    type Query {\n        hello: String!\n    }\n""")\nquery = QueryType()\n\n@query.field("hello")\ndef resolve_hello(_, info):\n    request = info.context["request"]\n    user_agent = request.headers.get("user-agent", "guest")\n    return "Hello, %s!" % user_agent\n\nschema = make_executable_schema(type_defs, query)\ngraphql_app = GraphQLLambda(schema=schema)\n\ndef graphql_http_handler(event: dict[str, Any], context: LambdaContext):\n    return async_to_sync(graphql_app)(event, context)\n'})}),"\n",(0,r.jsxs)(n.p,{children:["This approach is recommended because it gives immediate availability of Ariadne's features through the ",(0,r.jsx)(n.code,{children:"GraphQL"})," object's options and doesn't require the implementation of a custom translation layer between the GraphQL engine and AWS Lambda."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," If you need your Lambda function to offer other API endpoints in addition to GraphQL, you can combine your Ariadne app with ",(0,r.jsx)(n.a,{href:"/server/0.24/starlette-integration",children:"Starlette"})," or ",(0,r.jsx)(n.a,{href:"/server/0.24/fastapi-integration",children:"FastAPI"})," along with ",(0,r.jsx)(n.a,{href:"https://github.com/mirumee/lynara",children:"Lynara"}),", which wraps the app to handle HTTP requests from AWS."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"minimal-lambda-handler-example",children:"Minimal Lambda Handler Example"}),"\n",(0,r.jsxs)(n.p,{children:["If you want to skip the HTTP stack altogether, you can execute the queries directly using the ",(0,r.jsx)(n.a,{href:"/server/0.24/api-reference#graphql_sync",children:(0,r.jsx)(n.code,{children:"graphql_sync"})}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import json\nimport logging\n\nfrom ariadne import QueryType, graphql_sync, make_executable_schema, gql\n\nlogger = logging.getLogger()\n\ntype_defs = gql(\n    """\n    type Query {\n        hello: String!\n    }\n""")\n\nquery_type = QueryType()\n\n@query_type.field("hello")\ndef resolve_hello(_, info):\n    http_context = info.context["requestContext"]["http"]\n    user_agent = http_context.get("userAgent") or "Anon"\n    return f"Hello {user_agent}!"\n\nschema = make_executable_schema(type_defs, query_type)\n\ndef handler(event: dict, _):\n    try:\n        data = json.loads(event.get("body") or "")\n    except ValueError as exc:\n        return response({"error": f"Failed to parse JSON: {exc}"}, 405)\n\n    success, result = graphql_sync(\n        schema,\n        data,\n        context_value=event,\n        logger=logger,\n    )\n\n    return response(result, 200 if success else 400)\n\ndef response(body: dict, status_code: int = 200):\n    return {\n        "statusCode": status_code,\n        "headers": {\n            "Content-Type": "application/json"\n        },\n        "body": json.dumps(body),\n    }\n'})}),"\n",(0,r.jsxs)(n.p,{children:["This Lambda function will expect a JSON request with at least one key, a ",(0,r.jsx)(n.code,{children:"query"})," containing the GraphQL query."]}),"\n",(0,r.jsx)(n.h3,{id:"asynchronous-example",children:"Asynchronous Example"}),"\n",(0,r.jsx)(n.p,{children:"In case you want to run your handler asynchronously, you'll need to run it in an event loop."}),"\n",(0,r.jsxs)(n.p,{children:["This can be done manually or by decorating the async handler with the ",(0,r.jsx)(n.code,{children:"async_to_sync"})," decorator from the ",(0,r.jsx)(n.code,{children:"asgiref"})," package:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import json\nimport logging\n\nfrom ariadne import QueryType, graphql, make_executable_schema, gql\nfrom asgiref.sync import async_to_sync\n\nlogger = logging.getLogger()\n\ntype_defs = gql(\n    """\n    type Query {\n        hello: String!\n    }\n""")\n\nquery_type = QueryType()\n\n@query_type.field("hello")\ndef resolve_hello(_, info):\n    http_context = info.context["requestContext"]["http"]\n    user_agent = http_context.get("userAgent") or "Anon"\n    return f"Hello {user_agent}!"\n\nschema = make_executable_schema(type_defs, query_type)\n\n@async_to_sync\nasync def handler(event: dict, _):\n    try:\n        data = json.loads(event.get("body") or "")\n    except ValueError as exc:\n        return response({"error": f"Failed to parse JSON: {exc}"}, 405)\n\n    success, result = await graphql(\n        schema,\n        data,\n        context_value=event,\n        logger=logger,\n    )\n\n    return response(result, 200 if success else 400)\n\ndef response(body: dict, status_code: int = 200):\n    return {\n        "statusCode": status_code,\n        "headers": {\n            "Content-Type": "application/json"\n        },\n        "body": json.dumps(body),\n    }\n'})}),"\n",(0,r.jsx)(n.h2,{id:"local-testing",children:"Local Testing"}),"\n",(0,r.jsxs)(n.p,{children:["If you want to test your Lambda functions locally, you can use the repository ",(0,r.jsx)(n.a,{href:"https://github.com/mirumee/smyth",children:"Smyth"}),", which supports local development of Lambdas. This allows you to simulate the AWS Lambda environment on your local machine, making it easier to develop and debug your functions before deploying them to AWS."]})]})}function p(e={}){let{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},84429:function(e,n,t){t.d(n,{R:()=>o,x:()=>i});var a=t(96540);let r={},s=a.createContext(r);function o(e){let n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);