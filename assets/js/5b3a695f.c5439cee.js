"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["90841"],{25819:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>o,toc:()=>c,default:()=>p,metadata:()=>a,assets:()=>l,contentTitle:()=>i});var a=JSON.parse('{"id":"aws-lambda","title":"AWS lambda","description":"Multiple ways to implement an AWS Lambda function for GraphQL using Ariadne exist.","source":"@site/server_versioned_docs/version-0.21/aws-lambda.md","sourceDirName":".","slug":"/aws-lambda","permalink":"/server/0.21/aws-lambda","draft":false,"unlisted":false,"tags":[],"version":"0.21","frontMatter":{"id":"aws-lambda","title":"AWS lambda"},"sidebar":"tutorialSidebar","previous":{"title":"WSGI application","permalink":"/server/0.21/wsgi"},"next":{"title":"Django","permalink":"/server/0.21/django-integration"}}'),r=t(74848),s=t(84429);let o={id:"aws-lambda",title:"AWS lambda"},i,l={},c=[{value:"Deploying ASGI application with Mangum",id:"deploying-asgi-application-with-mangum",level:2},{value:"Minimal lambda handler example",id:"minimal-lambda-handler-example",level:2},{value:"Asynchronous example",id:"asynchronous-example",level:3}];function d(e){let n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Multiple ways to implement an AWS Lambda function for GraphQL using Ariadne exist."}),"\n",(0,r.jsxs)(n.p,{children:["This document presents selected few of those, but it's aim is not to be an ",(0,r.jsx)(n.strong,{children:"exhaustive"})," list of all approaches to using Ariadne on the AWS Lambda."]}),"\n",(0,r.jsx)(n.h2,{id:"deploying-asgi-application-with-mangum",children:"Deploying ASGI application with Mangum"}),"\n",(0,r.jsxs)(n.p,{children:["Mangum is an adapter that can be used to run Ariadne ",(0,r.jsx)(n.a,{href:"/server/0.21/asgi",children:"ASGI"})," application on AWS Lambda:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from ariadne import make_executable_schema, gql\nfrom ariadne.asgi import GraphQL\nfrom mangum import Mangum\n\ntype_defs = gql(\n    """\n    type Query {\n        hello: String!\n    }\n    """\n)\n\nschema = make_executable_schema(type_defs)\n\napp = GraphQL(schema, root_value={"hello": "Hello world!"})\n\nhandler = Mangum(app, lifespan="off")\n'})}),"\n",(0,r.jsxs)(n.p,{children:["This approach is recommended because it gives immediate availability of Ariadne's features through the ",(0,r.jsx)(n.code,{children:"GraphQL"})," object's options, and doesn't require implementation of custom translation layer between GraphQL engine and AWS lambda."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," Mangum doesn't require Ariadne's ASGI application exactly. If you need your lambda function to offer other API endpoints in addition to the GraphQL, you can combine your Ariadne's app with ",(0,r.jsx)(n.a,{href:"/server/0.21/starlette-integration",children:"Starlette"})," or ",(0,r.jsx)(n.a,{href:"/server/0.21/fastapi-integration",children:"FastAPI"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"minimal-lambda-handler-example",children:"Minimal lambda handler example"}),"\n",(0,r.jsxs)(n.p,{children:["If you want to skip the HTTP stack altogether you can execute the queries directly using the ",(0,r.jsx)(n.a,{href:"/server/0.21/api-reference#graphql_sync",children:(0,r.jsx)(n.code,{children:"graphql_sync"})}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import json\nimport logging\n\nfrom ariadne import QueryType, graphql_sync, make_executable_schema, gql\n\nlogger = logging.getLogger()\n\ntype_defs = gql(\n    """\n    type Query {\n        hello: String!\n    }\n    """\n)\n\nquery_type = QueryType()\n\n@query_type.field("hello")\ndef resolve_hello(_, info):\n    http_context = info.context["requestContext"]["http"]\n    user_agent = http_context.get("userAgent") or "Anon"\n    return f"Hello {user_agent}!"\n\n\nschema = make_executable_schema(type_defs, query_type)\n\ndef handler(event: dict, _):\n    try:\n        data = json.loads(event.get("body") or "")\n    except ValueError as exc:\n        return response({"error": f"Failed to parse JSON: {exc}"}, 405)\n\n    success, result = graphql_sync(\n        schema,\n        data,\n        context_value=event,\n        logger=logger,\n    )\n\n    return response(result, 200 if success else 400)\n\n\ndef response(body: dict, status_code: int = 200):\n    return {\n        "statusCode": status_code,\n        "headers": {\n            "Content-Type": "application/json"\n        },\n        "body": json.dumps(body),\n    }\n'})}),"\n",(0,r.jsxs)(n.p,{children:["This lambda function will expect a JSON request with at least one key, a ",(0,r.jsx)(n.code,{children:"query"})," with a ",(0,r.jsx)(n.code,{children:"str"})," containing the GraphQL query."]}),"\n",(0,r.jsx)(n.h3,{id:"asynchronous-example",children:"Asynchronous example"}),"\n",(0,r.jsx)(n.p,{children:"In case where you want to run your handler asynchronously, you'll need to run it in an event loop."}),"\n",(0,r.jsxs)(n.p,{children:["This can be done manually or by decorating the async handler with the ",(0,r.jsx)(n.code,{children:"async_to_sync"})," decorator from the ",(0,r.jsx)(n.code,{children:"asgiref"})," package:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import json\nimport logging\n\nfrom ariadne import QueryType, graphql, make_executable_schema, gql\nfrom asgiref.sync import async_to_sync\n\nlogger = logging.getLogger()\n\ntype_defs = gql(\n    """\n    type Query {\n        hello: String!\n    }\n    """\n)\n\nquery_type = QueryType()\n\n@query_type.field("hello")\ndef resolve_hello(_, info):\n    http_context = info.context["requestContext"]["http"]\n    user_agent = http_context.get("userAgent") or "Anon"\n    return f"Hello {user_agent}!"\n\n\nschema = make_executable_schema(type_defs, query_type)\n\n@async_to_sync\nasync def handler(event: dict, _):\n    try:\n        data = json.loads(event.get("body") or "")\n    except ValueError as exc:\n        return response({"error": f"Failed to parse JSON: {exc}"}, 405)\n\n    success, result = await graphql(\n        schema,\n        data,\n        context_value=event,\n        logger=logger,\n    )\n\n    return response(result, 200 if success else 400)\n\n\ndef response(body: dict, status_code: int = 200):\n    return {\n        "statusCode": status_code,\n        "headers": {\n            "Content-Type": "application/json"\n        },\n        "body": json.dumps(body),\n    }\n'})})]})}function p(e={}){let{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},84429:function(e,n,t){t.d(n,{R:()=>o,x:()=>i});var a=t(96540);let r={},s=a.createContext(r);function o(e){let n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);