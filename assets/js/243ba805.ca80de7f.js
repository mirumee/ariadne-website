"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["38665"],{44485:function(e,n,r){r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var s=r(5963),a=r(74848),t=r(84429);let i={title:"Introducing Ariadne GraphQL Modules"},l,o={authorsImageUrls:[]},d=[{value:"Example",id:"example",level:2},{value:"Automatic merging of multiple roots",id:"automatic-merging-of-multiple-roots",level:2},{value:"Better case mapping between <code>clientWorld</code> and <code>python_world</code>",id:"better-case-mapping-between-clientworld-and-python_world",level:2},{value:"Installation",id:"installation",level:2},{value:"Using modules in your project",id:"using-modules-in-your-project",level:2},{value:"Feedback",id:"feedback",level:2}];function c(e){let n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://github.com/mirumee/ariadne-graphql-modules",children:"Ariadne GraphQL Modules library is now available"})," \u{1F389}"]}),"\n",(0,a.jsx)(n.p,{children:"This library provides developers with modular way for implementing GraphQL schemas in their projects."}),"\n",(0,a.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.p,{children:"In Ariadne GraphQL Modules, every GraphQL type is defined as Python type:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from ariadne_graphql_modules import ObjectType, gql\n\n\nclass UserType(ObjectType):\n    __schema__ = gql(\n        """\n        type User {\n            id: ID!\n            name: String!\n            email: String\n        }\n        """\n    )\n\n    @staticmethod\n    def resolve_email(user, info):\n        if info.context["user"] == user or info.context["is_admin"]:\n            return user.email\n\n        return None\n'})}),"\n",(0,a.jsx)(n.p,{children:"Types can depend on other types:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from ariadne_graphql_modules import ObjectType, gql\nfrom my_app.users.models import User\n\n\nclass UsersQueries(ObjectType):\n    __schema__ = gql(\n        """\n        type Query {\n            user(id: ID!): User\n            lastUsers: [User!]!\n        }\n        """\n    )\n    __aliases__ = {"lastUsers": "last_users"}\n    __requires__ = [UserType]  # UsersQueries requires User definition\n\n    @staticmethod\n    async def resolver_user(*_, id):\n        return await User.objects.filter(id=id).one()\n\n    @staticmethod\n    async def resolve_last_users(*_):\n        return await User.objects.order_by("-id").limit(10)\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Types are then passed to ",(0,a.jsx)(n.code,{children:"make_executable_schema"})," which flattens types graph, and produces executable ",(0,a.jsx)(n.code,{children:"GraphQL"})," schema instance:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"from ariadne.asgi import GraphQL\nfrom ariadne_graphql_modules import make_executable_schema\nfrom my_app.users.graphql import UsersQueries\n\nschema = make_executable_schema(UsersQueries)\napp = GraphQL(schema)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"automatic-merging-of-multiple-roots",children:"Automatic merging of multiple roots"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"make_executable_schema"})," by default merges multiple ",(0,a.jsx)(n.code,{children:"Query"}),", ",(0,a.jsx)(n.code,{children:"Mutation"})," and ",(0,a.jsx)(n.code,{children:"Subscription"}),' types into one, so you don\'t have to define "throwaway" type with single unused field to extend in other places:']}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from datetime import date\n\nfrom ariadne.asgi import GraphQL\nfrom ariadne_graphql_modules import ObjectType, gql, make_executable_schema\n\n\nclass YearQuery(ObjectType):\n    __schema__ = gql(\n        """\n        type Query {\n            year: Int!\n        }\n        """\n    )\n\n    @staticmethod\n    def resolve_year(*_):\n        return date.today().year\n\n\nclass MessageQuery(ObjectType):\n    __schema__ = gql(\n        """\n        type Query {\n            message: String!\n        }\n        """\n    )\n\n    @staticmethod\n    def resolve_message(*_):\n        return "Hello world!"\n\n\nschema = make_executable_schema(YearQuery, MessageQuery)\napp = GraphQL(schema=schema, debug=True)\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Final schema will contain single ",(0,a.jsx)(n.code,{children:"Query"})," type thats result of merged tupes:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-graphql",children:"type Query {\n  message: String!\n  year: Int!\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Fields on final type will be ordered alphabetically."}),"\n",(0,a.jsxs)(n.h2,{id:"better-case-mapping-between-clientworld-and-python_world",children:["Better case mapping between ",(0,a.jsx)(n.code,{children:"clientWorld"})," and ",(0,a.jsx)(n.code,{children:"python_world"})]}),"\n",(0,a.jsxs)(n.p,{children:["Above example contained explicit mapping of ",(0,a.jsx)(n.code,{children:"lastUsers"})," field in GraphQL schema to ",(0,a.jsx)(n.code,{children:"last_users"})," Python name using the ",(0,a.jsx)(n.code,{children:"__aliases__"})," option."]}),"\n",(0,a.jsxs)(n.p,{children:["Library also provides ",(0,a.jsx)(n.code,{children:"convert_case"})," utility that performs this conversion automatically for given type:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from ariadne_graphql_modules import ObjectType, convert_case\n\n\nclass UsersQueries(ObjectType):\n    __schema__ = gql(\n        """\n        type Query {\n            user(id: ID!): User\n            lastUsers: [User!]!\n        }\n        """\n    )\n    __aliases__ = convert_case\n    __requires__ = [UserType]  # UsersQueries requires User definition\n'})}),"\n",(0,a.jsx)(n.p,{children:"This utility also handles mapping of arguments names:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'class UserRegisterMutation(MutationType):\n    __schema__ = gql(\n        """\n        type Mutation {\n            registerUser(fullName: String!, email: String!): Boolean!\n        }\n        """\n    )\n    __fields_args__ = convert_case\n\n    @staticmethod\n    async def resolve_mutation(*_, full_name: str, email: str):\n        user = await create_user(\n            full_name=full_name,\n            email=email,\n        )\n        return bool(user)\n'})}),"\n",(0,a.jsx)(n.p,{children:"It also takes care of input fields:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'class UserRegisterInput(InputType):\n    __schema__ = gql(\n        """\n        input UserRegisterInput {\n            fullName: String!\n            email: String!\n        }\n        """\n    )\n    __args__ = convert_case\n\n\nclass UserRegisterMutation(MutationType):\n    __schema__ = gql(\n        """\n        type Mutation {\n            registerUser(input: UserRegisterInput!): Boolean!\n        }\n        """\n    )\n    __requires__ = [UserRegisterInput]\n\n    @staticmethod\n    async def resolve_mutation(*_, input: dict):\n        user = await create_user(\n            full_name=input["full_name"],\n            email=input["email"],\n        )\n        return bool(user)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,a.jsx)(n.p,{children:"Ariadne GraphQL Modules can be installed with pip:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-console",children:"pip install ariadne-graphql-modules\n"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Ariadne 0.15 or later is required."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"using-modules-in-your-project",children:"Using modules in your project"}),"\n",(0,a.jsxs)(n.p,{children:['Because there\'s no way to mix old and new approach within single GraphQL API we are recommending this library for teams starting new schemas or maintaining smaller existing schemas and are unhappy with "default" approach for schema definition that Ariadne provides. Just remember that we ',(0,a.jsx)(n.strong,{children:"don't consider current API stable"})," and we plan to iterate and change things based on our own experience with it and feedback from other users."]}),"\n",(0,a.jsx)(n.p,{children:"We don't know yet if in future we will merge modules code into Ariadne proper. For the time being we want to maintain it as a separate library so we can make frequent releases as bugs are discovered and improvements are found."}),"\n",(0,a.jsx)(n.h2,{id:"feedback",children:"Feedback"}),"\n",(0,a.jsxs)(n.p,{children:["We'd ",(0,a.jsx)(n.strong,{children:"LOVE"})," to hear what you think about Ariadne GraphQL Modules. You can let us know using ",(0,a.jsx)(n.a,{href:"https://github.com/mirumee/ariadne/discussions",children:"Ariadne's discussions on GitHub"}),"."]})]})}function p(e={}){let{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},84429:function(e,n,r){r.d(n,{R:()=>i,x:()=>l});var s=r(96540);let a={},t=s.createContext(a);function i(e){let n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(t.Provider,{value:n},e.children)}},5963:function(e){e.exports=JSON.parse('{"permalink":"/blog/2022/04/13/ariadne-graphql-modules","source":"@site/blog/2022-04-13-ariadne-graphql-modules.md","title":"Introducing Ariadne GraphQL Modules","description":"Ariadne GraphQL Modules library is now available \u{1F389}","date":"2022-04-13T00:00:00.000Z","tags":[],"readingTime":3.06,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Introducing Ariadne GraphQL Modules"},"unlisted":false,"prevItem":{"title":"Ariadne 0.15","permalink":"/blog/2022/04/13/ariadne-0-15"},"nextItem":{"title":"Ariadne 0.14.1","permalink":"/blog/2022/01/28/ariadne-0-14-1"}}')}}]);