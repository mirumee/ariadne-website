"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["83849"],{62430:function(e,n,s){s.r(n),s.d(n,{frontMatter:()=>l,toc:()=>d,default:()=>h,metadata:()=>a,assets:()=>o,contentTitle:()=>t});var a=JSON.parse('{"id":"modularization","title":"Modularization","description":"Ariadne allows you to spread your GraphQL API implementation over multiple files, with different strategies being available for schema and resolvers.","source":"@site/server_versioned_docs/version-0.25/modularization.md","sourceDirName":".","slug":"/modularization","permalink":"/server/modularization","draft":false,"unlisted":false,"tags":[],"version":"0.25","frontMatter":{"id":"modularization","title":"Modularization"},"sidebar":"tutorialSidebar","previous":{"title":"Documenting schema","permalink":"/server/documenting-schema"},"next":{"title":"Bindables","permalink":"/server/bindables"}}'),r=s(74848),i=s(84429);let l={id:"modularization",title:"Modularization"},t,o={},d=[{value:"Defining schema in <code>.graphql</code> files",id:"defining-schema-in-graphql-files",level:2},{value:"Defining schema in multiple modules",id:"defining-schema-in-multiple-modules",level:2},{value:"Defining types in multiple Python modules",id:"defining-types-in-multiple-python-modules",level:2},{value:"Using Ariadne GraphQL Modules",id:"using-ariadne-graphql-modules",level:2}];function c(e){let n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Ariadne allows you to spread your GraphQL API implementation over multiple files, with different strategies being available for schema and resolvers."}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["We've recently released ",(0,r.jsx)(n.a,{href:"#using-ariadne-graphql-modules",children:"Ariadne GraphQL Modules"})," library that provides new way to modularize large GraphQL schemas."]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"defining-schema-in-graphql-files",children:["Defining schema in ",(0,r.jsx)(n.code,{children:".graphql"})," files"]}),"\n",(0,r.jsxs)(n.p,{children:["The recommended way to define schema is by using ",(0,r.jsx)(n.code,{children:".graphql"}),", ",(0,r.jsx)(n.code,{children:".graphqls"}),", or ",(0,r.jsx)(n.code,{children:".gql"})," files. This approach offers certain advantages:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["First class support from developer tools like ",(0,r.jsx)(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=apollographql.vscode-apollo",children:"Apollo GraphQL plugin"})," for VS Code."]}),"\n",(0,r.jsx)(n.li,{children:"Easier cooperation and sharing of schema design between frontend and backend developers."}),"\n",(0,r.jsx)(n.li,{children:"Dropping whatever python boilerplate code was used for SDL strings."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["To load schema from a file or directory, you can use the ",(0,r.jsx)(n.code,{children:"load_schema_from_path"})," utility provided by the Ariadne:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from ariadne import load_schema_from_path\nfrom ariadne.asgi import GraphQL\n\n# Load schema from file...\ntype_defs = load_schema_from_path("/path/to/schema.graphql")\n\n# ...or construct schema from all *.graphql, *.graphqls and *.gql files in directory\ntype_defs = load_schema_from_path("/path/to/schema/")\n\n# Build an executable schema\nschema = make_executable_schema(type_defs)\n\n# Create an ASGI app for the schema\napp = GraphQL(schema)\n'})}),"\n",(0,r.jsx)(n.p,{children:"The above app won't be able to execute any queries but it will allow you to browse your schema."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"load_schema_from_path"})," validates syntax of every loaded file, and will raise an ",(0,r.jsx)(n.code,{children:"ariadne.exceptions.GraphQLFileSyntaxError"})," if file syntax is found to be invalid."]}),"\n",(0,r.jsx)(n.h2,{id:"defining-schema-in-multiple-modules",children:"Defining schema in multiple modules"}),"\n",(0,r.jsxs)(n.p,{children:["Because Ariadne expects ",(0,r.jsx)(n.code,{children:"type_defs"})," to be either a string or list of strings, it's easy to split types across many string variables in many modules:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'query = """\n    type Query {\n        users: [User]!\n    }\n"""\n\nuser = """\n    type User {\n        id: ID!\n        username: String!\n        joinedOn: Datetime!\n        birthDay: Date!\n    }\n"""\n\nscalars = """\n    scalar Datetime\n    scalar Date\n"""\n\nschema = make_executable_schema([query, user, scalars])\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The order in which types are defined or passed to ",(0,r.jsx)(n.code,{children:"type_defs"})," doesn't matter, even if those types depend on each other."]}),"\n",(0,r.jsx)(n.h2,{id:"defining-types-in-multiple-python-modules",children:"Defining types in multiple Python modules"}),"\n",(0,r.jsxs)(n.p,{children:["GraphQL types definitions can be split across multiple modules or even packages, and combined using the ",(0,r.jsx)(n.code,{children:"make_executable_schema"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"myapp/\n    __init__.py\n    ...\n    graphql/\n        types/\n            __init__.py\n            book.py\n            query.py\n            user.py\n        __init__.py\n        scalars.py\n        schema.py\n"})}),"\n",(0,r.jsxs)(n.p,{children:["GraphQL types can be defined in dedicated modules under ",(0,r.jsx)(n.code,{children:"types"})," namespace and combined into a list in ",(0,r.jsx)(n.code,{children:"types/__init__.py"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from .book import book\nfrom .query import query\nfrom .user import user\n\ntypes = [query, book, user]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Because API defines only single custom scalar, using single ",(0,r.jsx)(n.code,{children:"scalars.py"})," module can be enough:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from ariadne import ScalarType\n\n\nisbn = ScalarType("ISBN")\n\n... # other code for isbn scalar\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"schema.py"})," imports ",(0,r.jsx)(n.code,{children:"types"})," list and single custom scalar, then passes those as ",(0,r.jsx)(n.code,{children:"*args"})," to ",(0,r.jsx)(n.code,{children:"make_executable_schema"})," to combine them into single schema:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from .types import types\nfrom .scalars import isbn\n\ntype_defs = ...  # valid type definitions\n\nschema = make_executable_schema(type_defs, *types, isbn)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The order in which objects are passed to the ",(0,r.jsx)(n.code,{children:"bindables"})," argument matters. Most bindables replace previously set resolvers with new ones, when more than one is defined for the same GraphQL type, with ",(0,r.jsx)(n.code,{children:"InterfaceType"})," and fallback resolvers being exceptions to this rule."]}),"\n",(0,r.jsx)(n.h2,{id:"using-ariadne-graphql-modules",children:"Using Ariadne GraphQL Modules"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/mirumee/ariadne-graphql-modules",children:"Ariadne GraphQL Modules"})," is library for Ariadne where every GraphQL object in your schema is defined as Python type:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from datetime import date\n\nfrom ariadne.asgi import GraphQL\nfrom ariadne_graphql_modules import ObjectType, gql, make_executable_schema\n\n\nclass Query(ObjectType):\n    # You can also do __schema__ = load_schema_from_path("/path/to/schema.graphql")\n    __schema__ = gql(\n        """\n        type Query {\n            message: String!\n            year: Int!\n        }\n        """\n    )\n\n    @staticmethod\n    def resolve_message(*_):\n        return "Hello world!"\n\n    @staticmethod\n    def resolve_year(*_):\n        return date.today().year\n\n\nschema = make_executable_schema(Query)\napp = GraphQL(schema=schema, debug=True)\n'})}),"\n",(0,r.jsx)(n.p,{children:"This library provides multiple features like dependency graph and correctness check at definition time that make it easier to reason about and work with large schemas."}),"\n",(0,r.jsxs)(n.p,{children:["Please see readme file for ",(0,r.jsx)(n.a,{href:"https://github.com/mirumee/ariadne-graphql-modules#examples",children:"examples"}),"."]})]})}function h(e={}){let{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},84429:function(e,n,s){s.d(n,{R:()=>l,x:()=>t});var a=s(96540);let r={},i=a.createContext(r);function l(e){let n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);